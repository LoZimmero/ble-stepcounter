
PedometerCustom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800cbb8  0800cbb8  0001cbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca8  0800cca8  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccb0  0800ccb0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccb0  0800ccb0  0001ccb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccb4  0800ccb4  0001ccb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ccb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  200000f0  0800cda4  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  0800cda4  00021554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239d0  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000412f  00000000  00000000  00043aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea8  00000000  00000000  00047c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  00049ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034aaf  00000000  00000000  0004b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b15  00000000  00000000  00080257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013adb5  00000000  00000000  000a3d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  001deb21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008724  00000000  00000000  001debc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cba0 	.word	0x0800cba0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	0800cba0 	.word	0x0800cba0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <BSP_SPI1_Init+0x54>)
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <BSP_SPI1_Init+0x58>)
 8000cde:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <BSP_SPI1_Init+0x5c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	4911      	ldr	r1, [pc, #68]	; (8000d2c <BSP_SPI1_Init+0x5c>)
 8000ce8:	600a      	str	r2, [r1, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d114      	bne.n	8000d18 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <BSP_SPI1_Init+0x54>)
 8000cf0:	f007 fb8e 	bl	8008410 <HAL_SPI_GetState>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10e      	bne.n	8000d18 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <BSP_SPI1_Init+0x54>)
 8000cfc:	f000 f8c2 	bl	8000e84 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d108      	bne.n	8000d18 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <BSP_SPI1_Init+0x54>)
 8000d08:	f000 f87a 	bl	8000e00 <MX_SPI1_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000d12:	f06f 0307 	mvn.w	r3, #7
 8000d16:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000b34 	.word	0x20000b34
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	20000b98 	.word	0x20000b98

08000d30 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000d36:	f06f 0307 	mvn.w	r3, #7
 8000d3a:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <BSP_SPI1_DeInit+0x48>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <BSP_SPI1_DeInit+0x48>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <BSP_SPI1_DeInit+0x48>)
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <BSP_SPI1_DeInit+0x48>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <BSP_SPI1_DeInit+0x4c>)
 8000d58:	f000 f8e8 	bl	8000f2c <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <BSP_SPI1_DeInit+0x4c>)
 8000d5e:	f006 fe6a 	bl	8007a36 <HAL_SPI_DeInit>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000b98 	.word	0x20000b98
 8000d7c:	20000b34 	.word	0x20000b34

08000d80 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000d90:	887a      	ldrh	r2, [r7, #2]
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <BSP_SPI1_Send+0x34>)
 8000d9a:	f006 fe88 	bl	8007aae <HAL_SPI_Transmit>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000da4:	f06f 0305 	mvn.w	r3, #5
 8000da8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000b34 	.word	0x20000b34

08000db8 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <BSP_SPI1_Recv+0x34>)
 8000dd2:	f006 ffda 	bl	8007d8a <HAL_SPI_Receive>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000ddc:	f06f 0305 	mvn.w	r3, #5
 8000de0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000b34 	.word	0x20000b34

08000df0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000df4:	f003 fff8 	bl	8004de8 <HAL_GetTick>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_SPI1_Init+0x80>)
 8000e10:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e18:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e26:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2207      	movs	r2, #7
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2208      	movs	r2, #8
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f006 fd42 	bl	80078f0 <HAL_SPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013000 	.word	0x40013000

08000e84 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e90:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000e92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e96:	6613      	str	r3, [r2, #96]	; 0x60
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <SPI1_MspInit+0xa0>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <SPI1_MspInit+0xa4>)
 8000ed8:	f004 fa40 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000edc:	2320      	movs	r3, #32
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000eec:	2305      	movs	r3, #5
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480c      	ldr	r0, [pc, #48]	; (8000f28 <SPI1_MspInit+0xa4>)
 8000ef8:	f004 fa30 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000efc:	2308      	movs	r3, #8
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <SPI1_MspInit+0xa4>)
 8000f18:	f004 fa20 	bl	800535c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000400 	.word	0x48000400

08000f2c <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SPI1_MspDeInit+0x34>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <SPI1_MspDeInit+0x34>)
 8000f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f3e:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000f40:	2110      	movs	r1, #16
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <SPI1_MspDeInit+0x38>)
 8000f44:	f004 fb9c 	bl	8005680 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8000f48:	2120      	movs	r1, #32
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <SPI1_MspDeInit+0x38>)
 8000f4c:	f004 fb98 	bl	8005680 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000f50:	2108      	movs	r1, #8
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <SPI1_MspDeInit+0x38>)
 8000f54:	f004 fb94 	bl	8005680 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f003 fed4 	bl	8004d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f80b 	bl	8000f8a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f000 f8f0 	bl	8001158 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f78:	f000 f850 	bl	800101c <MX_CRC_Init>
  MX_RTC_Init();
 8000f7c:	f000 f870 	bl	8001060 <MX_RTC_Init>
  MX_MEMS_Init();
 8000f80:	f000 fa34 	bl	80013ec <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f84:	f000 fa38 	bl	80013f8 <MX_MEMS_Process>
 8000f88:	e7fc      	b.n	8000f84 <main+0x1c>

08000f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b096      	sub	sp, #88	; 0x58
 8000f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2244      	movs	r2, #68	; 0x44
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00b f91d 	bl	800c1d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb0:	f004 fc90 	bl	80058d4 <HAL_PWREx_ControlVoltageScaling>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fba:	f000 f91b 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000fbe:	2318      	movs	r3, #24
 8000fc0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fce:	2360      	movs	r3, #96	; 0x60
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fd1e 	bl	8005a1c <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000fe6:	f000 f905 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 f924 	bl	8006250 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800100e:	f000 f8f1 	bl	80011f4 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	; 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_CRC_Init+0x3c>)
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <MX_CRC_Init+0x40>)
 8001024:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_CRC_Init+0x3c>)
 8001028:	2200      	movs	r2, #0
 800102a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_CRC_Init+0x3c>)
 800102e:	2200      	movs	r2, #0
 8001030:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_CRC_Init+0x3c>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_CRC_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_CRC_Init+0x3c>)
 8001040:	2201      	movs	r2, #1
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_CRC_Init+0x3c>)
 8001046:	f003 ffe5 	bl	8005014 <HAL_CRC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001050:	f000 f8d0 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000b9c 	.word	0x20000b9c
 800105c:	40023000 	.word	0x40023000

08001060 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_RTC_Init+0x48>)
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <MX_RTC_Init+0x4c>)
 8001068:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_RTC_Init+0x48>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_RTC_Init+0x48>)
 8001072:	227f      	movs	r2, #127	; 0x7f
 8001074:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_RTC_Init+0x48>)
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_RTC_Init+0x48>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_RTC_Init+0x48>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_RTC_Init+0x48>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_RTC_Init+0x48>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_RTC_Init+0x48>)
 8001096:	f006 f911 	bl	80072bc <HAL_RTC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010a0:	f000 f8a8 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000bc0 	.word	0x20000bc0
 80010ac:	40002800 	.word	0x40002800

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <MX_TIM1_Init+0xa4>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <MX_TIM1_Init+0xa0>)
 80010fc:	f007 fb52 	bl	80087a4 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001106:	f000 f875 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_TIM1_Init+0xa0>)
 8001118:	f007 fc3b 	bl	8008992 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001122:	f000 f867 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM1_Init+0xa0>)
 8001138:	f007 fe28 	bl	8008d8c <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 f857 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000be4 	.word	0x20000be4
 8001154:	40012c00 	.word	0x40012c00

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_GPIO_Init+0x94>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_GPIO_Init+0x94>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_GPIO_Init+0x94>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_GPIO_Init+0x94>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_GPIO_Init+0x94>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_GPIO_Init+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_GPIO_Init+0x98>)
 80011a6:	f004 fb5d 	bl	8005864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x98>)
 80011c0:	f004 f8cc 	bl	800535c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x98>)
 80011de:	f004 f8bd 	bl	800535c <HAL_GPIO_Init>

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_CRC_MspInit+0x38>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10b      	bne.n	8001272 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 8001260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001264:	6493      	str	r3, [r2, #72]	; 0x48
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023000 	.word	0x40023000
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0aa      	sub	sp, #168	; 0xa8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	229c      	movs	r2, #156	; 0x9c
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00a ff9d 	bl	800c1d8 <memset>
  if(hrtc->Instance==RTC)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_RTC_MspInit+0x5c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d118      	bne.n	80012da <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fa86 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012c6:	f7ff ff95 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_RTC_MspInit+0x60>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_RTC_MspInit+0x60>)
 80012d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	37a8      	adds	r7, #168	; 0xa8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40002800 	.word	0x40002800
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_TIM_Base_MspInit+0x38>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10b      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001308:	6613      	str	r3, [r2, #96]	; 0x60
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f003 fd22 	bl	8004dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f00a fec0 	bl	800c134 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200a0000 	.word	0x200a0000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	20000c30 	.word	0x20000c30
 80013e8:	20001558 	.word	0x20001558

080013ec <MX_MEMS_Init>:
static void MEMS_INT1_Force_Low(void);
static void MEMS_INT1_Init(void);
#endif

void MX_MEMS_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_Pedometer_Init();
 80013f0:	f000 f808 	bl	8001404 <MX_Pedometer_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_Pedometer_Process();
 80013fc:	f000 f830 	bl	8001460 <MX_Pedometer_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <MX_Pedometer_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_Pedometer_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Force MEMS INT1 pin of the sensor low during startup in order to disable I3C and enable I2C. This function needs
   * to be called only if user wants to disable I3C / enable I2C and didn't put the pull-down resistor to MEMS INT1 pin
   * on his HW setup. This is also the case of usage X-NUCLEO-IKS01A2 or X-NUCLEO-IKS01A3 expansion board together with
   * sensor in DIL24 adapter board where the LDO with internal pull-up is used.
   */
  MEMS_INT1_Force_Low();
 8001408:	f000 fb64 	bl	8001ad4 <MEMS_INT1_Force_Low>
#endif

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800140c:	2000      	movs	r0, #0
 800140e:	f003 fb05 	bl	8004a1c <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8001412:	2000      	movs	r0, #0
 8001414:	f003 fb80 	bl	8004b18 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8001418:	f7ff fe4a 	bl	80010b0 <MX_TIM1_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800141c:	2032      	movs	r0, #50	; 0x32
 800141e:	f000 fb25 	bl	8001a6c <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8001422:	f000 f887 	bl	8001534 <Init_Sensors>

#ifdef BSP_IP_MEMS_INT1_PIN_NUM
  /* Initialize MEMS INT1 pin back to it's default state after I3C disable / I2C enable */
  MEMS_INT1_Init();
 8001426:	f000 fb77 	bl	8001b18 <MEMS_INT1_Init>
#endif

  /* Pedometer API initialization function */
  MotionPM_manager_init();
 800142a:	f001 fe19 	bl	8003060 <MotionPM_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionPM_manager_get_version(LibVersion, &LibVersionLen);
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <MX_Pedometer_Init+0x54>)
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <MX_Pedometer_Init+0x58>)
 8001432:	f001 fe28 	bl	8003086 <MotionPM_manager_get_version>

  DWT_Init();
 8001436:	f000 fb8b 	bl	8001b50 <DWT_Init>

  BSP_LED_On(LED2);
 800143a:	2000      	movs	r0, #0
 800143c:	f003 fb00 	bl	8004a40 <BSP_LED_On>
  HAL_Delay(500);
 8001440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001444:	f003 fcdc 	bl	8004e00 <HAL_Delay>
  BSP_LED_Off(LED2);
 8001448:	2000      	movs	r0, #0
 800144a:	f003 fb0f 	bl	8004a6c <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800144e:	f000 fca3 	bl	8001d98 <UART_StartReceiveMsg>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000c60 	.word	0x20000c60
 800145c:	20000c3c 	.word	0x20000c3c

08001460 <MX_Pedometer_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_Pedometer_Process(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001464:	482d      	ldr	r0, [pc, #180]	; (800151c <MX_Pedometer_Process+0xbc>)
 8001466:	f000 fbc5 	bl	8001bf4 <UART_ReceivedMSG>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <MX_Pedometer_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <MX_Pedometer_Process+0xbc>)
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	2b32      	cmp	r3, #50	; 0x32
 8001476:	d102      	bne.n	800147e <MX_Pedometer_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_Pedometer_Process+0xbc>)
 800147a:	f001 f9f7 	bl	800286c <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <MX_Pedometer_Process+0xc0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d146      	bne.n	8001516 <MX_Pedometer_Process+0xb6>
  {
    SensorReadRequest = 0;
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <MX_Pedometer_Process+0xc0>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800148e:	4825      	ldr	r0, [pc, #148]	; (8001524 <MX_Pedometer_Process+0xc4>)
 8001490:	f000 f86a 	bl	8001568 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_Pedometer_Process+0xc4>)
 8001496:	f000 f94b 	bl	8001730 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800149a:	4822      	ldr	r0, [pc, #136]	; (8001524 <MX_Pedometer_Process+0xc4>)
 800149c:	f000 f9a2 	bl	80017e4 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014a2:	f000 f9f9 	bl	8001898 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014a8:	f000 fab0 	bl	8001a0c <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014ae:	f000 fa7d 	bl	80019ac <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014b4:	f000 fa4a 	bl	800194c <Pressure_Sensor_Handler>

    /* Pedometer specific part */
    PM_Data_Handler(&msg_dat);
 80014b8:	481a      	ldr	r0, [pc, #104]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014ba:	f000 f8c9 	bl	8001650 <PM_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 80014be:	4819      	ldr	r0, [pc, #100]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014c0:	f001 f9ba 	bl	8002838 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_Pedometer_Process+0xc4>)
 80014c6:	2243      	movs	r2, #67	; 0x43
 80014c8:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_Pedometer_Process+0xc8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d11e      	bne.n	8001510 <MX_Pedometer_Process+0xb0>
    {
      OfflineDataCount--;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_Pedometer_Process+0xcc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <MX_Pedometer_Process+0xcc>)
 80014da:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_Pedometer_Process+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da02      	bge.n	80014ea <MX_Pedometer_Process+0x8a>
      {
        OfflineDataCount = 0;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_Pedometer_Process+0xcc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_Pedometer_Process+0xd0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <MX_Pedometer_Process+0xd0>)
 80014f2:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_Pedometer_Process+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	dd02      	ble.n	8001502 <MX_Pedometer_Process+0xa2>
      {
        OfflineDataReadIndex = 0;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_Pedometer_Process+0xd0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_Pedometer_Process+0xcc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dd02      	ble.n	8001510 <MX_Pedometer_Process+0xb0>
      {
        SensorReadRequest = 1;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_Pedometer_Process+0xc0>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_Pedometer_Process+0xc4>)
 8001512:	f000 fc25 	bl	8001d60 <UART_SendMsg>
  }
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000e44 	.word	0x20000e44
 8001520:	20000c64 	.word	0x20000c64
 8001524:	20000f48 	.word	0x20000f48
 8001528:	20000c65 	.word	0x20000c65
 800152c:	20000e10 	.word	0x20000e10
 8001530:	20000e08 	.word	0x20000e08

08001534 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8001538:	f000 fd47 	bl	8001fca <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800153c:	f000 fd4d 	bl	8001fda <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8001540:	f000 fd53 	bl	8001fea <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8001544:	f000 fd58 	bl	8001ff8 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8001548:	f000 fd5d 	bl	8002006 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800154c:	f000 fd62 	bl	8002014 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001550:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001564 <Init_Sensors+0x30>
 8001554:	f000 fe08 	bl	8002168 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001558:	2004      	movs	r0, #4
 800155a:	f000 fe14 	bl	8002186 <BSP_SENSOR_ACC_SetFullScale>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	42480000 	.word	0x42480000

08001568 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <RTC_Handler+0xd8>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <RTC_Handler+0xdc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d12b      	bne.n	80015dc <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <RTC_Handler+0xe0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a30      	ldr	r2, [pc, #192]	; (800164c <RTC_Handler+0xe4>)
 800158a:	2134      	movs	r1, #52	; 0x34
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <RTC_Handler+0xe0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2b      	ldr	r2, [pc, #172]	; (800164c <RTC_Handler+0xe4>)
 800159e:	2134      	movs	r1, #52	; 0x34
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3301      	adds	r3, #1
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <RTC_Handler+0xe0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <RTC_Handler+0xe4>)
 80015b4:	2134      	movs	r1, #52	; 0x34
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	3302      	adds	r3, #2
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <RTC_Handler+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <RTC_Handler+0xe4>)
 80015ca:	2134      	movs	r1, #52	; 0x34
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	3303      	adds	r3, #3
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 80015da:	e02d      	b.n	8001638 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4816      	ldr	r0, [pc, #88]	; (8001640 <RTC_Handler+0xd8>)
 80015e6:	f005 ff81 	bl	80074ec <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <RTC_Handler+0xd8>)
 80015f4:	f006 f85d 	bl	80076b2 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2264      	movs	r2, #100	; 0x64
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	3301      	adds	r3, #1
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	b2db      	uxtb	r3, r3
 8001616:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800161e:	7a3a      	ldrb	r2, [r7, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8001624:	7a7a      	ldrb	r2, [r7, #9]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800162a:	7aba      	ldrb	r2, [r7, #10]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001636:	729a      	strb	r2, [r3, #10]
}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000bc0 	.word	0x20000bc0
 8001644:	20000c65 	.word	0x20000c65
 8001648:	20000e08 	.word	0x20000e08
 800164c:	20000c68 	.word	0x20000c68

08001650 <PM_Data_Handler>:
 * @brief  Pedometer data handler
 * @param  Msg the Pedometer data part of the stream
 * @retval None
 */
static void PM_Data_Handler(TMsg *Msg)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  MPM_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  static MPM_output_t data_out;

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <PM_Data_Handler+0xd0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b10      	cmp	r3, #16
 8001678:	d14d      	bne.n	8001716 <PM_Data_Handler+0xc6>
  {
    /* Fill input data */
    data_in.AccX = (float)AccValue.x / 1000.0f;    /* Convert from [mg] to [g] */
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <PM_Data_Handler+0xd4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001686:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001728 <PM_Data_Handler+0xd8>
 800168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168e:	edc7 7a02 	vstr	s15, [r7, #8]
    data_in.AccY = (float)AccValue.y / 1000.0f;    /* Convert from [mg] to [g] */
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <PM_Data_Handler+0xd4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001728 <PM_Data_Handler+0xd8>
 80016a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a6:	edc7 7a03 	vstr	s15, [r7, #12]
    data_in.AccZ = (float)AccValue.z / 1000.0f;    /* Convert from [mg] to [g] */
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <PM_Data_Handler+0xd4>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001728 <PM_Data_Handler+0xd8>
 80016ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016be:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Run Pedometer algorithm */
    BSP_LED_On(LED2);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f003 f9bc 	bl	8004a40 <BSP_LED_On>
    DWT_Start();
 80016c8:	f000 fa5a 	bl	8001b80 <DWT_Start>
    MotionPM_manager_run(&data_in, &data_out);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4916      	ldr	r1, [pc, #88]	; (800172c <PM_Data_Handler+0xdc>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fcca 	bl	800306c <MotionPM_manager_run>
    elapsed_time_us = DWT_Stop();
 80016d8:	f000 fa64 	bl	8001ba4 <DWT_Stop>
 80016dc:	6178      	str	r0, [r7, #20]
    BSP_LED_Off(LED2);
 80016de:	2000      	movs	r0, #0
 80016e0:	f003 f9c4 	bl	8004a6c <BSP_LED_Off>

    Serialize_s32(&Msg->Data[55], (int32_t)data_out.Cadence, 4);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	333b      	adds	r3, #59	; 0x3b
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <PM_Data_Handler+0xdc>)
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	4611      	mov	r1, r2
 80016ee:	2204      	movs	r2, #4
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fdd2 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[59], (int32_t)data_out.Nsteps, 4);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	333f      	adds	r3, #63	; 0x3f
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <PM_Data_Handler+0xdc>)
 80016fc:	6852      	ldr	r2, [r2, #4]
 80016fe:	4611      	mov	r1, r2
 8001700:	2204      	movs	r2, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fdc9 	bl	800329a <Serialize_s32>

    Serialize_s32(&Msg->Data[63], (int32_t)elapsed_time_us, 4);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3343      	adds	r3, #67	; 0x43
 800170c:	6979      	ldr	r1, [r7, #20]
 800170e:	2204      	movs	r2, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fdc2 	bl	800329a <Serialize_s32>
  }
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000c38 	.word	0x20000c38
 8001724:	20000e14 	.word	0x20000e14
 8001728:	447a0000 	.word	0x447a0000
 800172c:	2000104c 	.word	0x2000104c

08001730 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <Accelero_Sensor_Handler+0xa0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b10      	cmp	r3, #16
 8001742:	d140      	bne.n	80017c6 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <Accelero_Sensor_Handler+0xa4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d121      	bne.n	8001790 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <Accelero_Sensor_Handler+0xa8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <Accelero_Sensor_Handler+0xac>)
 8001752:	2134      	movs	r1, #52	; 0x34
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3310      	adds	r3, #16
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 8001760:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <Accelero_Sensor_Handler+0xa8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <Accelero_Sensor_Handler+0xac>)
 8001768:	2134      	movs	r1, #52	; 0x34
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3314      	adds	r3, #20
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 8001776:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <Accelero_Sensor_Handler+0xa8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <Accelero_Sensor_Handler+0xac>)
 800177e:	2134      	movs	r1, #52	; 0x34
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	3318      	adds	r3, #24
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 800178c:	6093      	str	r3, [r2, #8]
 800178e:	e002      	b.n	8001796 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 8001792:	f000 fc9e 	bl	80020d2 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3317      	adds	r3, #23
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 800179c:	6811      	ldr	r1, [r2, #0]
 800179e:	2204      	movs	r2, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fd7a 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	331b      	adds	r3, #27
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 80017ac:	6851      	ldr	r1, [r2, #4]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fd72 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	331f      	adds	r3, #31
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <Accelero_Sensor_Handler+0xb0>)
 80017bc:	6891      	ldr	r1, [r2, #8]
 80017be:	2204      	movs	r2, #4
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 fd6a 	bl	800329a <Serialize_s32>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000c38 	.word	0x20000c38
 80017d4:	20000c65 	.word	0x20000c65
 80017d8:	20000e08 	.word	0x20000e08
 80017dc:	20000c68 	.word	0x20000c68
 80017e0:	20000e14 	.word	0x20000e14

080017e4 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <Gyro_Sensor_Handler+0xa0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d140      	bne.n	800187a <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <Gyro_Sensor_Handler+0xa4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d121      	bne.n	8001844 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <Gyro_Sensor_Handler+0xa8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a22      	ldr	r2, [pc, #136]	; (8001890 <Gyro_Sensor_Handler+0xac>)
 8001806:	2134      	movs	r1, #52	; 0x34
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	331c      	adds	r3, #28
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001814:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <Gyro_Sensor_Handler+0xa8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <Gyro_Sensor_Handler+0xac>)
 800181c:	2134      	movs	r1, #52	; 0x34
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3320      	adds	r3, #32
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 800182a:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <Gyro_Sensor_Handler+0xa8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <Gyro_Sensor_Handler+0xac>)
 8001832:	2134      	movs	r1, #52	; 0x34
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3324      	adds	r3, #36	; 0x24
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001840:	6093      	str	r3, [r2, #8]
 8001842:	e002      	b.n	800184a <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001846:	f000 fc51 	bl	80020ec <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3323      	adds	r3, #35	; 0x23
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fd20 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3327      	adds	r3, #39	; 0x27
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001860:	6851      	ldr	r1, [r2, #4]
 8001862:	2204      	movs	r2, #4
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fd18 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	332b      	adds	r3, #43	; 0x2b
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <Gyro_Sensor_Handler+0xb0>)
 8001870:	6891      	ldr	r1, [r2, #8]
 8001872:	2204      	movs	r2, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fd10 	bl	800329a <Serialize_s32>
  }
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000c38 	.word	0x20000c38
 8001888:	20000c65 	.word	0x20000c65
 800188c:	20000e08 	.word	0x20000e08
 8001890:	20000c68 	.word	0x20000c68
 8001894:	20000e20 	.word	0x20000e20

08001898 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <Magneto_Sensor_Handler+0xa0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a8:	2b40      	cmp	r3, #64	; 0x40
 80018aa:	d140      	bne.n	800192e <Magneto_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <Magneto_Sensor_Handler+0xa4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d121      	bne.n	80018f8 <Magneto_Sensor_Handler+0x60>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <Magneto_Sensor_Handler+0xa8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <Magneto_Sensor_Handler+0xac>)
 80018ba:	2134      	movs	r1, #52	; 0x34
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3328      	adds	r3, #40	; 0x28
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 80018c8:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <Magneto_Sensor_Handler+0xa8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <Magneto_Sensor_Handler+0xac>)
 80018d0:	2134      	movs	r1, #52	; 0x34
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	332c      	adds	r3, #44	; 0x2c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1a      	ldr	r2, [pc, #104]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 80018de:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <Magneto_Sensor_Handler+0xa8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <Magneto_Sensor_Handler+0xac>)
 80018e6:	2134      	movs	r1, #52	; 0x34
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3330      	adds	r3, #48	; 0x30
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 80018f4:	6093      	str	r3, [r2, #8]
 80018f6:	e002      	b.n	80018fe <Magneto_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 80018fa:	f000 fc04 	bl	8002106 <BSP_SENSOR_MAG_GetAxes>
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	332f      	adds	r3, #47	; 0x2f
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 8001904:	6811      	ldr	r1, [r2, #0]
 8001906:	2204      	movs	r2, #4
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fcc6 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3333      	adds	r3, #51	; 0x33
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 8001914:	6851      	ldr	r1, [r2, #4]
 8001916:	2204      	movs	r2, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fcbe 	bl	800329a <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3337      	adds	r3, #55	; 0x37
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <Magneto_Sensor_Handler+0xb0>)
 8001924:	6891      	ldr	r1, [r2, #8]
 8001926:	2204      	movs	r2, #4
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fcb6 	bl	800329a <Serialize_s32>
  }
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000c38 	.word	0x20000c38
 800193c:	20000c65 	.word	0x20000c65
 8001940:	20000e08 	.word	0x20000e08
 8001944:	20000c68 	.word	0x20000c68
 8001948:	20000e2c 	.word	0x20000e2c

0800194c <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <Pressure_Sensor_Handler+0x4c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d117      	bne.n	8001990 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <Pressure_Sensor_Handler+0x50>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10b      	bne.n	8001980 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <Pressure_Sensor_Handler+0x54>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <Pressure_Sensor_Handler+0x58>)
 800196e:	2134      	movs	r1, #52	; 0x34
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3304      	adds	r3, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <Pressure_Sensor_Handler+0x5c>)
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e002      	b.n	8001986 <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <Pressure_Sensor_Handler+0x5c>)
 8001982:	f000 fbd3 	bl	800212c <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	330b      	adds	r3, #11
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <Pressure_Sensor_Handler+0x5c>)
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	601a      	str	r2, [r3, #0]
  }
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000c38 	.word	0x20000c38
 800199c:	20000c65 	.word	0x20000c65
 80019a0:	20000e08 	.word	0x20000e08
 80019a4:	20000c68 	.word	0x20000c68
 80019a8:	20000e38 	.word	0x20000e38

080019ac <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <Temperature_Sensor_Handler+0x4c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d117      	bne.n	80019f0 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <Temperature_Sensor_Handler+0x50>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10b      	bne.n	80019e0 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <Temperature_Sensor_Handler+0x54>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <Temperature_Sensor_Handler+0x58>)
 80019ce:	2134      	movs	r1, #52	; 0x34
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	330c      	adds	r3, #12
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <Temperature_Sensor_Handler+0x5c>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e002      	b.n	80019e6 <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <Temperature_Sensor_Handler+0x5c>)
 80019e2:	f000 fbad 	bl	8002140 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	330f      	adds	r3, #15
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <Temperature_Sensor_Handler+0x5c>)
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	601a      	str	r2, [r3, #0]
  }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000c38 	.word	0x20000c38
 80019fc:	20000c65 	.word	0x20000c65
 8001a00:	20000e08 	.word	0x20000e08
 8001a04:	20000c68 	.word	0x20000c68
 8001a08:	20000e3c 	.word	0x20000e3c

08001a0c <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <Humidity_Sensor_Handler+0x4c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d117      	bne.n	8001a50 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <Humidity_Sensor_Handler+0x50>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10b      	bne.n	8001a40 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <Humidity_Sensor_Handler+0x54>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <Humidity_Sensor_Handler+0x58>)
 8001a2e:	2134      	movs	r1, #52	; 0x34
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3308      	adds	r3, #8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <Humidity_Sensor_Handler+0x5c>)
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e002      	b.n	8001a46 <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <Humidity_Sensor_Handler+0x5c>)
 8001a42:	f000 fb87 	bl	8002154 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3313      	adds	r3, #19
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <Humidity_Sensor_Handler+0x5c>)
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	601a      	str	r2, [r3, #0]
  }
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000c38 	.word	0x20000c38
 8001a5c:	20000c65 	.word	0x20000c65
 8001a60:	20000e08 	.word	0x20000e08
 8001a64:	20000c68 	.word	0x20000c68
 8001a68:	20000e40 	.word	0x20000e40

08001a6c <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8001a74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <TIM_Config+0x60>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <TIM_Config+0x64>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <TIM_Config+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <TIM_Config+0x64>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <TIM_Config+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <TIM_Config+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <TIM_Config+0x64>)
 8001ab4:	f006 fe76 	bl	80087a4 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <TIM_Config+0x56>
  {
    Error_Handler();
 8001abe:	f7ff fb99 	bl	80011f4 <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000007c 	.word	0x2000007c
 8001ad0:	20000be4 	.word	0x20000be4

08001ad4 <MEMS_INT1_Force_Low>:
 * @brief  Force MEMS INT1 pin low
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Force_Low(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 8001ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MEMS_INT1_Force_Low+0x40>)
 8001afc:	f003 fc2e 	bl	800535c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(BSP_IP_MEMS_INT1_GPIOX, BSP_IP_MEMS_INT1_PIN_NUM, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MEMS_INT1_Force_Low+0x40>)
 8001b08:	f003 feac 	bl	8005864 <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	48000400 	.word	0x48000400

08001b18 <MEMS_INT1_Init>:
 * @brief  Configure MEMS INT1 pin to the default state
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 8001b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MEMS_INT1_Init+0x34>)
 8001b40:	f003 fc0c 	bl	800535c <HAL_GPIO_Init>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	48000400 	.word	0x48000400

08001b50 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <DWT_Init+0x28>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <DWT_Init+0x28>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <DWT_Init+0x2c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <DWT_Init+0x2c>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000edf0 	.word	0xe000edf0
 8001b7c:	e0001000 	.word	0xe0001000

08001b80 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <DWT_Start+0x20>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <DWT_Start+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <DWT_Start+0x20>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6013      	str	r3, [r2, #0]
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e0001000 	.word	0xe0001000

08001ba4 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <DWT_Stop+0x44>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <DWT_Stop+0x44>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <DWT_Stop+0x44>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <DWT_Stop+0x48>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <DWT_Stop+0x4c>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e0001000 	.word	0xe0001000
 8001bec:	2000007c 	.word	0x2000007c
 8001bf0:	431bde83 	.word	0x431bde83

08001bf4 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8001c00:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <UART_ReceivedMSG+0x160>)
 8001c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f8e1 	bl	8001dcc <Get_DMA_Flag_Status>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 809c 	bne.w	8001d4a <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <UART_ReceivedMSG+0x160>)
 8001c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f9ca 	bl	8001fb0 <Get_DMA_Counter>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c24:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c28:	889b      	ldrh	r3, [r3, #4]
 8001c2a:	8bba      	ldrh	r2, [r7, #28]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d305      	bcc.n	8001c3c <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c32:	889b      	ldrh	r3, [r3, #4]
 8001c34:	8bba      	ldrh	r2, [r7, #28]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	843b      	strh	r3, [r7, #32]
 8001c3a:	e007      	b.n	8001c4c <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8001c3c:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	8bba      	ldrh	r2, [r7, #28]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c4a:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c56:	e06d      	b.n	8001d34 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8001c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <UART_ReceivedMSG+0x168>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	76fb      	strb	r3, [r7, #27]
      j++;
 8001c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c62:	3301      	adds	r3, #1
 8001c64:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 8001c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d301      	bcc.n	8001c72 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 8001c72:	7efb      	ldrb	r3, [r7, #27]
 8001c74:	2bf0      	cmp	r3, #240	; 0xf0
 8001c76:	d15a      	bne.n	8001d2e <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c7a:	889b      	ldrh	r3, [r3, #4]
 8001c7c:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c82:	e03a      	b.n	8001cfa <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8001c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8e:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 8001c90:	8bfb      	ldrh	r3, [r7, #30]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d904      	bls.n	8001ca0 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 8001c96:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c9a:	8093      	strh	r3, [r2, #4]
            return 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e055      	b.n	8001d4c <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8001ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <UART_ReceivedMSG+0x168>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8001ca8:	8b3b      	ldrh	r3, [r7, #24]
 8001caa:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <UART_ReceivedMSG+0x168>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8001cba:	7db9      	ldrb	r1, [r7, #22]
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fa49 	bl	8003158 <ReverseByteStuffCopyByte2>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8001cd0:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001cd2:	8b3b      	ldrh	r3, [r7, #24]
 8001cd4:	8093      	strh	r3, [r2, #4]
            return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e038      	b.n	8001d4c <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	3301      	adds	r3, #1
 8001cee:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cf6:	4413      	add	r3, r2
 8001cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3c0      	bcc.n	8001c84 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001d02:	8bfa      	ldrh	r2, [r7, #30]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8001d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d12:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d18:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f001 fa6d 	bl	80031fa <CHK_CheckAndRemove>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	e00e      	b.n	8001d4c <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001d2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d30:	3301      	adds	r3, #1
 8001d32:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d36:	8c3b      	ldrh	r3, [r7, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d38d      	bcc.n	8001c58 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8001d3c:	8c3b      	ldrh	r3, [r7, #32]
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d902      	bls.n	8001d4a <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <UART_ReceivedMSG+0x164>)
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200014b0 	.word	0x200014b0
 8001d58:	20001254 	.word	0x20001254
 8001d5c:	20001054 	.word	0x20001054

08001d60 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 fa1c 	bl	80031a6 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <UART_SendMsg+0x30>)
 8001d72:	f001 f9c3 	bl	80030fc <ByteStuffCopy>
 8001d76:	4603      	mov	r3, r0
 8001d78:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 8001d7a:	89fa      	ldrh	r2, [r7, #14]
 8001d7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <UART_SendMsg+0x30>)
 8001d82:	4804      	ldr	r0, [pc, #16]	; (8001d94 <UART_SendMsg+0x34>)
 8001d84:	f007 f8e4 	bl	8008f50 <HAL_UART_Transmit>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000125c 	.word	0x2000125c
 8001d94:	200014b0 	.word	0x200014b0

08001d98 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <UART_StartReceiveMsg+0x2c>)
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <UART_StartReceiveMsg+0x30>)
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <UART_StartReceiveMsg+0x2c>)
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <UART_StartReceiveMsg+0x2c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <UART_StartReceiveMsg+0x30>)
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <UART_StartReceiveMsg+0x2c>)
 8001dbc:	f007 f960 	bl	8009080 <HAL_UART_Receive_DMA>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200014b0 	.word	0x200014b0
 8001dc8:	20001054 	.word	0x20001054

08001dcc <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <Get_DMA_Flag_Status+0x1a8>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d961      	bls.n	8001ea4 <Get_DMA_Flag_Status+0xd8>
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <Get_DMA_Flag_Status+0x1ac>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4964      	ldr	r1, [pc, #400]	; (8001f7c <Get_DMA_Flag_Status+0x1b0>)
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d057      	beq.n	8001e9e <Get_DMA_Flag_Status+0xd2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4963      	ldr	r1, [pc, #396]	; (8001f80 <Get_DMA_Flag_Status+0x1b4>)
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d050      	beq.n	8001e9a <Get_DMA_Flag_Status+0xce>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4961      	ldr	r1, [pc, #388]	; (8001f84 <Get_DMA_Flag_Status+0x1b8>)
 8001dfe:	428b      	cmp	r3, r1
 8001e00:	d049      	beq.n	8001e96 <Get_DMA_Flag_Status+0xca>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4960      	ldr	r1, [pc, #384]	; (8001f88 <Get_DMA_Flag_Status+0x1bc>)
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d042      	beq.n	8001e92 <Get_DMA_Flag_Status+0xc6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	495e      	ldr	r1, [pc, #376]	; (8001f8c <Get_DMA_Flag_Status+0x1c0>)
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d03a      	beq.n	8001e8c <Get_DMA_Flag_Status+0xc0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	495d      	ldr	r1, [pc, #372]	; (8001f90 <Get_DMA_Flag_Status+0x1c4>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d032      	beq.n	8001e86 <Get_DMA_Flag_Status+0xba>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	495b      	ldr	r1, [pc, #364]	; (8001f94 <Get_DMA_Flag_Status+0x1c8>)
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d02a      	beq.n	8001e80 <Get_DMA_Flag_Status+0xb4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	495a      	ldr	r1, [pc, #360]	; (8001f98 <Get_DMA_Flag_Status+0x1cc>)
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d022      	beq.n	8001e7a <Get_DMA_Flag_Status+0xae>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4958      	ldr	r1, [pc, #352]	; (8001f9c <Get_DMA_Flag_Status+0x1d0>)
 8001e3a:	428b      	cmp	r3, r1
 8001e3c:	d01a      	beq.n	8001e74 <Get_DMA_Flag_Status+0xa8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <Get_DMA_Flag_Status+0x1d4>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d012      	beq.n	8001e6e <Get_DMA_Flag_Status+0xa2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4955      	ldr	r1, [pc, #340]	; (8001fa4 <Get_DMA_Flag_Status+0x1d8>)
 8001e4e:	428b      	cmp	r3, r1
 8001e50:	d00a      	beq.n	8001e68 <Get_DMA_Flag_Status+0x9c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4954      	ldr	r1, [pc, #336]	; (8001fa8 <Get_DMA_Flag_Status+0x1dc>)
 8001e58:	428b      	cmp	r3, r1
 8001e5a:	d102      	bne.n	8001e62 <Get_DMA_Flag_Status+0x96>
 8001e5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001e60:	e01e      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e66:	e01b      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001e6c:	e018      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e72:	e015      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e78:	e012      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7e:	e00f      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e84:	e00c      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e8a:	e009      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e90:	e006      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	e004      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	e002      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	e000      	b.n	8001ea0 <Get_DMA_Flag_Status+0xd4>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	e060      	b.n	8001f66 <Get_DMA_Flag_Status+0x19a>
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <Get_DMA_Flag_Status+0x1e0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4933      	ldr	r1, [pc, #204]	; (8001f7c <Get_DMA_Flag_Status+0x1b0>)
 8001eae:	428b      	cmp	r3, r1
 8001eb0:	d057      	beq.n	8001f62 <Get_DMA_Flag_Status+0x196>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4932      	ldr	r1, [pc, #200]	; (8001f80 <Get_DMA_Flag_Status+0x1b4>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d050      	beq.n	8001f5e <Get_DMA_Flag_Status+0x192>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4930      	ldr	r1, [pc, #192]	; (8001f84 <Get_DMA_Flag_Status+0x1b8>)
 8001ec2:	428b      	cmp	r3, r1
 8001ec4:	d049      	beq.n	8001f5a <Get_DMA_Flag_Status+0x18e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	492f      	ldr	r1, [pc, #188]	; (8001f88 <Get_DMA_Flag_Status+0x1bc>)
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	d042      	beq.n	8001f56 <Get_DMA_Flag_Status+0x18a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	492d      	ldr	r1, [pc, #180]	; (8001f8c <Get_DMA_Flag_Status+0x1c0>)
 8001ed6:	428b      	cmp	r3, r1
 8001ed8:	d03a      	beq.n	8001f50 <Get_DMA_Flag_Status+0x184>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	492c      	ldr	r1, [pc, #176]	; (8001f90 <Get_DMA_Flag_Status+0x1c4>)
 8001ee0:	428b      	cmp	r3, r1
 8001ee2:	d032      	beq.n	8001f4a <Get_DMA_Flag_Status+0x17e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	492a      	ldr	r1, [pc, #168]	; (8001f94 <Get_DMA_Flag_Status+0x1c8>)
 8001eea:	428b      	cmp	r3, r1
 8001eec:	d02a      	beq.n	8001f44 <Get_DMA_Flag_Status+0x178>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4929      	ldr	r1, [pc, #164]	; (8001f98 <Get_DMA_Flag_Status+0x1cc>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d022      	beq.n	8001f3e <Get_DMA_Flag_Status+0x172>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4927      	ldr	r1, [pc, #156]	; (8001f9c <Get_DMA_Flag_Status+0x1d0>)
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d01a      	beq.n	8001f38 <Get_DMA_Flag_Status+0x16c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4926      	ldr	r1, [pc, #152]	; (8001fa0 <Get_DMA_Flag_Status+0x1d4>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d012      	beq.n	8001f32 <Get_DMA_Flag_Status+0x166>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <Get_DMA_Flag_Status+0x1d8>)
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d00a      	beq.n	8001f2c <Get_DMA_Flag_Status+0x160>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4923      	ldr	r1, [pc, #140]	; (8001fa8 <Get_DMA_Flag_Status+0x1dc>)
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d102      	bne.n	8001f26 <Get_DMA_Flag_Status+0x15a>
 8001f20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f24:	e01e      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f2a:	e01b      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f30:	e018      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f36:	e015      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f3c:	e012      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f48:	e00c      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f4e:	e009      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f54:	e006      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	e004      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	e002      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e000      	b.n	8001f64 <Get_DMA_Flag_Status+0x198>
 8001f62:	2308      	movs	r3, #8
 8001f64:	4013      	ands	r3, r2
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40020080 	.word	0x40020080
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020008 	.word	0x40020008
 8001f80:	40020408 	.word	0x40020408
 8001f84:	4002001c 	.word	0x4002001c
 8001f88:	4002041c 	.word	0x4002041c
 8001f8c:	40020030 	.word	0x40020030
 8001f90:	40020430 	.word	0x40020430
 8001f94:	40020044 	.word	0x40020044
 8001f98:	40020444 	.word	0x40020444
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40020458 	.word	0x40020458
 8001fa4:	4002006c 	.word	0x4002006c
 8001fa8:	4002046c 	.word	0x4002046c
 8001fac:	40020000 	.word	0x40020000

08001fb0 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 8001fce:	2102      	movs	r1, #2
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f000 f8e5 	bl	80021a0 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
#endif
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f8dd 	bl	80021a0 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 8002026:	2102      	movs	r1, #2
 8002028:	2000      	movs	r0, #0
 800202a:	f000 f941 	bl	80022b0 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
#endif
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}

08002032 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 8002036:	2101      	movs	r1, #1
 8002038:	2000      	movs	r0, #0
 800203a:	f000 f939 	bl	80022b0 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}

08002042 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 800207e:	2102      	movs	r1, #2
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f957 	bl	8002334 <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
#endif
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}

0800208a <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800208e:	2101      	movs	r1, #1
 8002090:	2000      	movs	r0, #0
 8002092:	f000 f94f 	bl	8002334 <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}

0800209a <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  Axes->z = 0;
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	2102      	movs	r1, #2
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f96a 	bl	80023b8 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
#endif
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	2101      	movs	r1, #1
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f95d 	bl	80023b8 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->x = 0;
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
  #else
  Axes->x = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
  Axes->y = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  Axes->z = 0;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  #endif
#endif
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  #else
  *Value = 0.0f;
  #endif
#endif
#endif
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Odr);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Odr);
 8002172:	ed97 0a01 	vldr	s0, [r7, #4]
 8002176:	2102      	movs	r1, #2
 8002178:	2000      	movs	r0, #0
 800217a:	f000 f961 	bl	8002440 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  #endif
#endif
#endif
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Fullscale);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Fullscale);
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	2102      	movs	r1, #2
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f99a 	bl	80024cc <CUSTOM_MOTION_SENSOR_SetFullScale>
  #endif
#endif
#endif
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80021ae:	2301      	movs	r3, #1
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d131      	bne.n	8002220 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ASM330LHH_0 == 1)
    case CUSTOM_ASM330LHH_0:
      if (ASM330LHH_0_Probe(Functions) != BSP_ERROR_NONE)
 80021bc:	6838      	ldr	r0, [r7, #0]
 80021be:	f000 f9c9 	bl	8002554 <ASM330LHH_0_Probe>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e064      	b.n	8002298 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80021ce:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4932      	ldr	r1, [pc, #200]	; (80022a4 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021e0:	f107 010c 	add.w	r1, r7, #12
 80021e4:	4610      	mov	r0, r2
 80021e6:	4798      	blx	r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80021ee:	f06f 0306 	mvn.w	r3, #6
 80021f2:	e051      	b.n	8002298 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80021f4:	7b3b      	ldrb	r3, [r7, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d103      	bne.n	8002202 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d103      	bne.n	8002210 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800221e:	e003      	b.n	8002228 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8002220:	f06f 0301 	mvn.w	r3, #1
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002226:	e000      	b.n	800222a <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8002228:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	e031      	b.n	8002298 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002238:	e02a      	b.n	8002290 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	4013      	ands	r3, r2
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	429a      	cmp	r2, r3
 8002244:	d11e      	bne.n	8002284 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8002246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	4013      	ands	r3, r2
 800224c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224e:	429a      	cmp	r2, r3
 8002250:	d118      	bne.n	8002284 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800225a:	4814      	ldr	r0, [pc, #80]	; (80022ac <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	440b      	add	r3, r1
 8002266:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	490d      	ldr	r1, [pc, #52]	; (80022a4 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002274:	4610      	mov	r0, r2
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800227e:	f06f 0304 	mvn.w	r3, #4
 8002282:	e009      	b.n	8002298 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	3301      	adds	r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b02      	cmp	r3, #2
 8002294:	d9d1      	bls.n	800223a <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002298:	4618      	mov	r0, r3
 800229a:	3738      	adds	r7, #56	; 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2000146c 	.word	0x2000146c
 80022a4:	2000145c 	.word	0x2000145c
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20001460 	.word	0x20001460

080022b0 <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022c0:	f06f 0301 	mvn.w	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e028      	b.n	800231a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4013      	ands	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d11c      	bne.n	8002314 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80022fc:	4610      	mov	r0, r2
 80022fe:	4798      	blx	r3
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002306:	f06f 0304 	mvn.w	r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e005      	b.n	800231a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e002      	b.n	800231a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002314:	f06f 0301 	mvn.w	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20001470 	.word	0x20001470
 8002328:	20000004 	.word	0x20000004
 800232c:	20001460 	.word	0x20001460
 8002330:	2000145c 	.word	0x2000145c

08002334 <CUSTOM_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <CUSTOM_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002344:	f06f 0301 	mvn.w	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e028      	b.n	800239e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <CUSTOM_MOTION_SENSOR_Disable+0x74>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4013      	ands	r3, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d11c      	bne.n	8002398 <CUSTOM_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <CUSTOM_MOTION_SENSOR_Disable+0x78>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002366:	4812      	ldr	r0, [pc, #72]	; (80023b0 <CUSTOM_MOTION_SENSOR_Disable+0x7c>)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	440b      	add	r3, r1
 8002372:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <CUSTOM_MOTION_SENSOR_Disable+0x80>)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002380:	4610      	mov	r0, r2
 8002382:	4798      	blx	r3
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <CUSTOM_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800238a:	f06f 0304 	mvn.w	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e005      	b.n	800239e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e002      	b.n	800239e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002398:	f06f 0301 	mvn.w	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20001470 	.word	0x20001470
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20001460 	.word	0x20001460
 80023b4:	2000145c 	.word	0x2000145c

080023b8 <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023ca:	f06f 0301 	mvn.w	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e029      	b.n	8002426 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d11d      	bne.n	8002420 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023ec:	4812      	ldr	r0, [pc, #72]	; (8002438 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	490f      	ldr	r1, [pc, #60]	; (800243c <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4610      	mov	r0, r2
 800240a:	4798      	blx	r3
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002412:	f06f 0304 	mvn.w	r3, #4
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e005      	b.n	8002426 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e002      	b.n	8002426 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002420:	f06f 0301 	mvn.w	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002426:	697b      	ldr	r3, [r7, #20]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20001470 	.word	0x20001470
 8002434:	20000004 	.word	0x20000004
 8002438:	20001460 	.word	0x20001460
 800243c:	2000145c 	.word	0x2000145c

08002440 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002454:	f06f 0301 	mvn.w	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e02a      	b.n	80024b2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4013      	ands	r3, r2
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d11e      	bne.n	80024ac <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002476:	4813      	ldr	r0, [pc, #76]	; (80024c4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	440b      	add	r3, r1
 8002482:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	490f      	ldr	r1, [pc, #60]	; (80024c8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002490:	ed97 0a01 	vldr	s0, [r7, #4]
 8002494:	4610      	mov	r0, r2
 8002496:	4798      	blx	r3
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800249e:	f06f 0304 	mvn.w	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e005      	b.n	80024b2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e002      	b.n	80024b2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80024ac:	f06f 0301 	mvn.w	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80024b2:	697b      	ldr	r3, [r7, #20]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001470 	.word	0x20001470
 80024c0:	20000004 	.word	0x20000004
 80024c4:	20001460 	.word	0x20001460
 80024c8:	2000145c 	.word	0x2000145c

080024cc <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024de:	f06f 0301 	mvn.w	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e029      	b.n	800253a <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d11d      	bne.n	8002534 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002500:	4812      	ldr	r0, [pc, #72]	; (800254c <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	440b      	add	r3, r1
 800250c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	490f      	ldr	r1, [pc, #60]	; (8002550 <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4610      	mov	r0, r2
 800251e:	4798      	blx	r3
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002526:	f06f 0304 	mvn.w	r3, #4
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e005      	b.n	800253a <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e002      	b.n	800253a <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002534:	f06f 0301 	mvn.w	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800253a:	697b      	ldr	r3, [r7, #20]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20001470 	.word	0x20001470
 8002548:	20000004 	.word	0x20000004
 800254c:	20001460 	.word	0x20001460
 8002550:	2000145c 	.word	0x2000145c

08002554 <ASM330LHH_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t ASM330LHH_0_Probe(uint32_t Functions)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b094      	sub	sp, #80	; 0x50
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ASM330LHH_IO_t            io_ctx;
  uint8_t                   id;
  static ASM330LHH_Object_t asm330lhh_obj_0;
  ASM330LHH_Capabilities_t  cap;
  int32_t                   ret = BSP_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the driver */
  io_ctx.BusType     = ASM330LHH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8002560:	2301      	movs	r3, #1
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = CUSTOM_ASM330LHH_0_Init;
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <ASM330LHH_0_Probe+0x140>)
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = CUSTOM_ASM330LHH_0_DeInit;
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <ASM330LHH_0_Probe+0x144>)
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = CUSTOM_ASM330LHH_0_ReadReg;
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <ASM330LHH_0_Probe+0x148>)
 8002574:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = CUSTOM_ASM330LHH_0_WriteReg;
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <ASM330LHH_0_Probe+0x14c>)
 8002578:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <ASM330LHH_0_Probe+0x150>)
 800257c:	647b      	str	r3, [r7, #68]	; 0x44

  if (ASM330LHH_RegisterBusIO(&asm330lhh_obj_0, &io_ctx) != ASM330LHH_OK)
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4848      	ldr	r0, [pc, #288]	; (80026a8 <ASM330LHH_0_Probe+0x154>)
 8002586:	f000 fed7 	bl	8003338 <ASM330LHH_RegisterBusIO>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <ASM330LHH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002590:	f06f 0306 	mvn.w	r3, #6
 8002594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002596:	e077      	b.n	8002688 <ASM330LHH_0_Probe+0x134>
  }
  else if (ASM330LHH_ReadID(&asm330lhh_obj_0, &id) != ASM330LHH_OK)
 8002598:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800259c:	4619      	mov	r1, r3
 800259e:	4842      	ldr	r0, [pc, #264]	; (80026a8 <ASM330LHH_0_Probe+0x154>)
 80025a0:	f000 ffd0 	bl	8003544 <ASM330LHH_ReadID>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <ASM330LHH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025aa:	f06f 0306 	mvn.w	r3, #6
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e06a      	b.n	8002688 <ASM330LHH_0_Probe+0x134>
  }
  else if (id != (uint8_t)ASM330LHH_ID)
 80025b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025b6:	2b6b      	cmp	r3, #107	; 0x6b
 80025b8:	d003      	beq.n	80025c2 <ASM330LHH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025ba:	f06f 0306 	mvn.w	r3, #6
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	e062      	b.n	8002688 <ASM330LHH_0_Probe+0x134>
  }
  else
  {
    (void)ASM330LHH_GetCapabilities(&asm330lhh_obj_0, &cap);
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4619      	mov	r1, r3
 80025c8:	4837      	ldr	r0, [pc, #220]	; (80026a8 <ASM330LHH_0_Probe+0x154>)
 80025ca:	f000 ffd1 	bl	8003570 <ASM330LHH_GetCapabilities>
    MotionCtx[CUSTOM_ASM330LHH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80025ce:	7b7b      	ldrb	r3, [r7, #13]
 80025d0:	461a      	mov	r2, r3
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4313      	orrs	r3, r2
 80025de:	4a33      	ldr	r2, [pc, #204]	; (80026ac <ASM330LHH_0_Probe+0x158>)
 80025e0:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_ASM330LHH_0] = &asm330lhh_obj_0;
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <ASM330LHH_0_Probe+0x15c>)
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <ASM330LHH_0_Probe+0x154>)
 80025e6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_ASM330LHH_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ASM330LHH_COMMON_Driver;
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <ASM330LHH_0_Probe+0x160>)
 80025ea:	4a33      	ldr	r2, [pc, #204]	; (80026b8 <ASM330LHH_0_Probe+0x164>)
 80025ec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11d      	bne.n	8002630 <ASM330LHH_0_Probe+0xdc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <ASM330LHH_0_Probe+0xdc>
 80025fe:	7b7b      	ldrb	r3, [r7, #13]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d115      	bne.n	8002630 <ASM330LHH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ASM330LHH_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ASM330LHH_GYRO_Driver;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <ASM330LHH_0_Probe+0x168>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <ASM330LHH_0_Probe+0x16c>)
 800260a:	492e      	ldr	r1, [pc, #184]	; (80026c4 <ASM330LHH_0_Probe+0x170>)
 800260c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ASM330LHH_0]->Init(MotionCompObj[CUSTOM_ASM330LHH_0]) != ASM330LHH_OK)
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <ASM330LHH_0_Probe+0x160>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <ASM330LHH_0_Probe+0x15c>)
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4610      	mov	r0, r2
 800261c:	4798      	blx	r3
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <ASM330LHH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002624:	f06f 0304 	mvn.w	r3, #4
 8002628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262a:	e001      	b.n	8002630 <ASM330LHH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800262c:	2300      	movs	r3, #0
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11d      	bne.n	8002672 <ASM330LHH_0_Probe+0x11e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <ASM330LHH_0_Probe+0x11e>
 8002640:	7b3b      	ldrb	r3, [r7, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d115      	bne.n	8002672 <ASM330LHH_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ASM330LHH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ASM330LHH_ACC_Driver;
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <ASM330LHH_0_Probe+0x168>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <ASM330LHH_0_Probe+0x16c>)
 800264c:	491e      	ldr	r1, [pc, #120]	; (80026c8 <ASM330LHH_0_Probe+0x174>)
 800264e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ASM330LHH_0]->Init(MotionCompObj[CUSTOM_ASM330LHH_0]) != ASM330LHH_OK)
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <ASM330LHH_0_Probe+0x160>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <ASM330LHH_0_Probe+0x15c>)
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <ASM330LHH_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002666:	f06f 0304 	mvn.w	r3, #4
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800266c:	e001      	b.n	8002672 <ASM330LHH_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800266e:	2300      	movs	r3, #0
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <ASM330LHH_0_Probe+0x134>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <ASM330LHH_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002682:	f06f 0304 	mvn.w	r3, #4
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8002688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800268a:	4618      	mov	r0, r3
 800268c:	3750      	adds	r7, #80	; 0x50
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	080026cd 	.word	0x080026cd
 8002698:	080026f1 	.word	0x080026f1
 800269c:	08002789 	.word	0x08002789
 80026a0:	08002715 	.word	0x08002715
 80026a4:	08000df1 	.word	0x08000df1
 80026a8:	20001474 	.word	0x20001474
 80026ac:	20001470 	.word	0x20001470
 80026b0:	2000145c 	.word	0x2000145c
 80026b4:	2000146c 	.word	0x2000146c
 80026b8:	2000001c 	.word	0x2000001c
 80026bc:	20000004 	.word	0x20000004
 80026c0:	20001460 	.word	0x20001460
 80026c4:	20000050 	.word	0x20000050
 80026c8:	2000002c 	.word	0x2000002c

080026cc <CUSTOM_ASM330LHH_0_Init>:
/**
 * @brief  Initialize SPI bus for ASM330LHH
 * @retval BSP status
 */
static int32_t CUSTOM_ASM330LHH_0_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80026d2:	f06f 0305 	mvn.w	r3, #5
 80026d6:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ASM330LHH_0_SPI_Init() == BSP_ERROR_NONE)
 80026d8:	f7fe fafa 	bl	8000cd0 <BSP_SPI1_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <CUSTOM_ASM330LHH_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <CUSTOM_ASM330LHH_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for ASM330LHH
 * @retval BSP status
 */
static int32_t CUSTOM_ASM330LHH_0_DeInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80026f6:	f06f 0305 	mvn.w	r3, #5
 80026fa:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ASM330LHH_0_SPI_DeInit() == BSP_ERROR_NONE)
 80026fc:	f7fe fb18 	bl	8000d30 <BSP_SPI1_DeInit>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <CUSTOM_ASM330LHH_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <CUSTOM_ASM330LHH_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_ASM330LHH_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60ba      	str	r2, [r7, #8]
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	81fb      	strh	r3, [r7, #14]
 8002722:	460b      	mov	r3, r1
 8002724:	81bb      	strh	r3, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800272e:	89bb      	ldrh	r3, [r7, #12]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ASM330LHH_0_CS_PORT, CUSTOM_ASM330LHH_0_CS_PIN, GPIO_PIN_RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800273a:	4812      	ldr	r0, [pc, #72]	; (8002784 <CUSTOM_ASM330LHH_0_WriteReg+0x70>)
 800273c:	f003 f892 	bl	8005864 <HAL_GPIO_WritePin>

  if (CUSTOM_ASM330LHH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8002740:	f107 0313 	add.w	r3, r7, #19
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fb1a 	bl	8000d80 <BSP_SPI1_Send>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <CUSTOM_ASM330LHH_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002752:	f06f 0305 	mvn.w	r3, #5
 8002756:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ASM330LHH_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	4619      	mov	r1, r3
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7fe fb0f 	bl	8000d80 <BSP_SPI1_Send>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <CUSTOM_ASM330LHH_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002768:	f06f 0305 	mvn.w	r3, #5
 800276c:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ASM330LHH_0_CS_PORT, CUSTOM_ASM330LHH_0_CS_PIN, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <CUSTOM_ASM330LHH_0_WriteReg+0x70>)
 8002776:	f003 f875 	bl	8005864 <HAL_GPIO_WritePin>

  return ret;
 800277a:	697b      	ldr	r3, [r7, #20]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	48000400 	.word	0x48000400

08002788 <CUSTOM_ASM330LHH_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_ASM330LHH_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60ba      	str	r2, [r7, #8]
 8002790:	461a      	mov	r2, r3
 8002792:	4603      	mov	r3, r0
 8002794:	81fb      	strh	r3, [r7, #14]
 8002796:	460b      	mov	r3, r1
 8002798:	81bb      	strh	r3, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 80027a2:	89bb      	ldrh	r3, [r7, #12]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ASM330LHH_0_CS_PORT, CUSTOM_ASM330LHH_0_CS_PIN, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b8:	4812      	ldr	r0, [pc, #72]	; (8002804 <CUSTOM_ASM330LHH_0_ReadReg+0x7c>)
 80027ba:	f003 f853 	bl	8005864 <HAL_GPIO_WritePin>

  if (CUSTOM_ASM330LHH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 80027be:	f107 0313 	add.w	r3, r7, #19
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fadb 	bl	8000d80 <BSP_SPI1_Send>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <CUSTOM_ASM330LHH_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80027d0:	f06f 0305 	mvn.w	r3, #5
 80027d4:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ASM330LHH_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4619      	mov	r1, r3
 80027da:	68b8      	ldr	r0, [r7, #8]
 80027dc:	f7fe faec 	bl	8000db8 <BSP_SPI1_Recv>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <CUSTOM_ASM330LHH_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80027e6:	f06f 0305 	mvn.w	r3, #5
 80027ea:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ASM330LHH_0_CS_PORT, CUSTOM_ASM330LHH_0_CS_PIN, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f2:	4804      	ldr	r0, [pc, #16]	; (8002804 <CUSTOM_ASM330LHH_0_ReadReg+0x7c>)
 80027f4:	f003 f836 	bl	8005864 <HAL_GPIO_WritePin>

  return ret;
 80027f8:	697b      	ldr	r3, [r7, #20]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	48000400 	.word	0x48000400

08002808 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	795a      	ldrb	r2, [r3, #5]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2232      	movs	r2, #50	; 0x32
 800281c:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	799b      	ldrb	r3, [r3, #6]
 8002822:	3b80      	subs	r3, #128	; 0x80
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	719a      	strb	r2, [r3, #6]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <INIT_STREAMING_HEADER+0x30>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2232      	movs	r2, #50	; 0x32
 800284e:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2208      	movs	r2, #8
 8002854:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	601a      	str	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20000018 	.word	0x20000018

0800286c <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b098      	sub	sp, #96	; 0x60
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8002874:	2301      	movs	r3, #1
 8002876:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d801      	bhi.n	8002888 <HandleMSG+0x1c>
  {
    return 0;
 8002884:	2300      	movs	r3, #0
 8002886:	e351      	b.n	8002f2c <HandleMSG+0x6c0>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	791b      	ldrb	r3, [r3, #4]
 800288c:	2b32      	cmp	r3, #50	; 0x32
 800288e:	d001      	beq.n	8002894 <HandleMSG+0x28>
  {
    return 0;
 8002890:	2300      	movs	r3, #0
 8002892:	e34b      	b.n	8002f2c <HandleMSG+0x6c0>
  }

  switch (Msg->Data[2])   /* CMD */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	799b      	ldrb	r3, [r3, #6]
 8002898:	2b12      	cmp	r3, #18
 800289a:	dc6b      	bgt.n	8002974 <HandleMSG+0x108>
 800289c:	2b00      	cmp	r3, #0
 800289e:	dc3d      	bgt.n	800291c <HandleMSG+0xb0>
 80028a0:	e340      	b.n	8002f24 <HandleMSG+0x6b8>
 80028a2:	3b60      	subs	r3, #96	; 0x60
 80028a4:	2b1a      	cmp	r3, #26
 80028a6:	f200 833d 	bhi.w	8002f24 <HandleMSG+0x6b8>
 80028aa:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HandleMSG+0x44>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	08002a17 	.word	0x08002a17
 80028b4:	08002f25 	.word	0x08002f25
 80028b8:	08002a45 	.word	0x08002a45
 80028bc:	08002f25 	.word	0x08002f25
 80028c0:	08002f25 	.word	0x08002f25
 80028c4:	08002f25 	.word	0x08002f25
 80028c8:	08002f25 	.word	0x08002f25
 80028cc:	08002f25 	.word	0x08002f25
 80028d0:	08002f25 	.word	0x08002f25
 80028d4:	08002f25 	.word	0x08002f25
 80028d8:	08002f25 	.word	0x08002f25
 80028dc:	08002f25 	.word	0x08002f25
 80028e0:	08002f25 	.word	0x08002f25
 80028e4:	08002f25 	.word	0x08002f25
 80028e8:	08002f25 	.word	0x08002f25
 80028ec:	08002f25 	.word	0x08002f25
 80028f0:	08002f25 	.word	0x08002f25
 80028f4:	08002f25 	.word	0x08002f25
 80028f8:	08002f25 	.word	0x08002f25
 80028fc:	08002f25 	.word	0x08002f25
 8002900:	08002f25 	.word	0x08002f25
 8002904:	08002f25 	.word	0x08002f25
 8002908:	08002a73 	.word	0x08002a73
 800290c:	08002f25 	.word	0x08002f25
 8002910:	08002f25 	.word	0x08002f25
 8002914:	08002f25 	.word	0x08002f25
 8002918:	08002aa1 	.word	0x08002aa1
 800291c:	3b01      	subs	r3, #1
 800291e:	2b11      	cmp	r3, #17
 8002920:	f200 8300 	bhi.w	8002f24 <HandleMSG+0x6b8>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HandleMSG+0xc0>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	08002981 	.word	0x08002981
 8002930:	080029bb 	.word	0x080029bb
 8002934:	08002f25 	.word	0x08002f25
 8002938:	08002f25 	.word	0x08002f25
 800293c:	08002f25 	.word	0x08002f25
 8002940:	08002f25 	.word	0x08002f25
 8002944:	08002f25 	.word	0x08002f25
 8002948:	08002acf 	.word	0x08002acf
 800294c:	08002b75 	.word	0x08002b75
 8002950:	08002f25 	.word	0x08002f25
 8002954:	08002f25 	.word	0x08002f25
 8002958:	08002bbf 	.word	0x08002bbf
 800295c:	08002f25 	.word	0x08002f25
 8002960:	080029a1 	.word	0x080029a1
 8002964:	08002f25 	.word	0x08002f25
 8002968:	08002c05 	.word	0x08002c05
 800296c:	08002e75 	.word	0x08002e75
 8002970:	08002ec3 	.word	0x08002ec3
 8002974:	2b7a      	cmp	r3, #122	; 0x7a
 8002976:	f300 82d5 	bgt.w	8002f24 <HandleMSG+0x6b8>
 800297a:	2b60      	cmp	r3, #96	; 0x60
 800297c:	da91      	bge.n	80028a2 <HandleMSG+0x36>
 800297e:	e2d1      	b.n	8002f24 <HandleMSG+0x6b8>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d001      	beq.n	800298c <HandleMSG+0x120>
      {
        return 0;
 8002988:	2300      	movs	r3, #0
 800298a:	e2cf      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff3b 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff f9e1 	bl	8001d60 <UART_SendMsg>
      break;
 800299e:	e2c4      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d001      	beq.n	80029ac <HandleMSG+0x140>
      {
        return 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e2bf      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff2b 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	601a      	str	r2, [r3, #0]
      break;
 80029b8:	e2b7      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d001      	beq.n	80029c6 <HandleMSG+0x15a>
      {
        return 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e2b2      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff1e 	bl	8002808 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 80029cc:	f107 020c 	add.w	r2, r7, #12
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fb02 	bl	8002fe0 <Get_PresentationString>

      i = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80029e0:	e00d      	b.n	80029fe <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 80029e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e4:	3303      	adds	r3, #3
 80029e6:	f107 0110 	add.w	r1, r7, #16
 80029ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ec:	440a      	add	r2, r1
 80029ee:	7811      	ldrb	r1, [r2, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	460a      	mov	r2, r1
 80029f6:	711a      	strb	r2, [r3, #4]
        i++;
 80029f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fa:	3301      	adds	r3, #1
 80029fc:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3ed      	bcc.n	80029e2 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8002a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a08:	1cda      	adds	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff f9a6 	bl	8001d60 <UART_SendMsg>
      break;
 8002a14:	e289      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d801      	bhi.n	8002a22 <HandleMSG+0x1b6>
      {
        return 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e284      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fef0 	bl	8002808 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	21ff      	movs	r1, #255	; 0xff
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fc32 	bl	800329a <Serialize_s32>
      Msg->Len = 3 + 4;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff f98f 	bl	8001d60 <UART_SendMsg>
      break;
 8002a42:	e272      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d801      	bhi.n	8002a50 <HandleMSG+0x1e4>
      {
        return 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e26d      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fed9 	bl	8002808 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3307      	adds	r3, #7
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	21ff      	movs	r1, #255	; 0xff
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fc1b 	bl	800329a <Serialize_s32>
      Msg->Len = 3 + 4;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2207      	movs	r2, #7
 8002a68:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff f978 	bl	8001d60 <UART_SendMsg>
      break;
 8002a70:	e25b      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d801      	bhi.n	8002a7e <HandleMSG+0x212>
      {
        return 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e256      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fec2 	bl	8002808 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3307      	adds	r3, #7
 8002a88:	2204      	movs	r2, #4
 8002a8a:	210e      	movs	r1, #14
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fc04 	bl	800329a <Serialize_s32>
      Msg->Len = 3 + 4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff f961 	bl	8001d60 <UART_SendMsg>
      break;
 8002a9e:	e244      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d801      	bhi.n	8002aac <HandleMSG+0x240>
      {
        return 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e23f      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff feab 	bl	8002808 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3307      	adds	r3, #7
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	21ff      	movs	r1, #255	; 0xff
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fbed 	bl	800329a <Serialize_s32>
      Msg->Len = 3 + 4;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff f94a 	bl	8001d60 <UART_SendMsg>
      break;
 8002acc:	e22d      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d801      	bhi.n	8002ada <HandleMSG+0x26e>
      {
        return 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e228      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3307      	adds	r3, #7
 8002ade:	2104      	movs	r1, #4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fbb4 	bl	800324e <Deserialize>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HandleMSG+0x3b4>)
 8002aea:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HandleMSG+0x3b4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 8002af8:	f7ff faaa 	bl	8002050 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8002afc:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <HandleMSG+0x3b4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d101      	bne.n	8002b0c <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 8002b08:	f7ff faa9 	bl	800205e <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HandleMSG+0x3b4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d101      	bne.n	8002b1c <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 8002b18:	f7ff faa8 	bl	800206c <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <HandleMSG+0x3b4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d101      	bne.n	8002b2c <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 8002b28:	f7ff fa7b 	bl	8002022 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <HandleMSG+0x3b4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d101      	bne.n	8002b3c <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 8002b38:	f7ff fa7b 	bl	8002032 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8002b3c:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HandleMSG+0x3b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d101      	bne.n	8002b4c <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 8002b48:	f7ff fa7b 	bl	8002042 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8002b4c:	4835      	ldr	r0, [pc, #212]	; (8002c24 <HandleMSG+0x3b8>)
 8002b4e:	f005 fe81 	bl	8008854 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8002b52:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <HandleMSG+0x3bc>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	795a      	ldrb	r2, [r3, #5]
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HandleMSG+0x3c0>)
 8002b5e:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fe51 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff f8f7 	bl	8001d60 <UART_SendMsg>
      break;
 8002b72:	e1da      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d801      	bhi.n	8002b80 <HandleMSG+0x314>
      {
        return 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e1d5      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      DataLoggerActive = 0;
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HandleMSG+0x3bc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8002b86:	4827      	ldr	r0, [pc, #156]	; (8002c24 <HandleMSG+0x3b8>)
 8002b88:	f005 fed4 	bl	8008934 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 8002b8c:	f7ff fa75 	bl	800207a <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 8002b90:	f7ff fa7b 	bl	800208a <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8002b94:	f7ff fa81 	bl	800209a <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 8002b98:	f7ff fa86 	bl	80020a8 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 8002b9c:	f7ff fa8b 	bl	80020b6 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 8002ba0:	f7ff fa90 	bl	80020c4 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <HandleMSG+0x3b4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HandleMSG+0x3c4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fe29 	bl	8002808 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff f8d2 	bl	8001d60 <UART_SendMsg>
      break;
 8002bbc:	e1b5      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d801      	bhi.n	8002bca <HandleMSG+0x35e>
      {
        return 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e1b0      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      BUILD_REPLY_HEADER(Msg);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fe1c 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	79d8      	ldrb	r0, [r3, #7]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7a19      	ldrb	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7a5b      	ldrb	r3, [r3, #9]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f000 f9d2 	bl	8002f8c <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7a98      	ldrb	r0, [r3, #10]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7ad9      	ldrb	r1, [r3, #11]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7b1a      	ldrb	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7b5b      	ldrb	r3, [r3, #13]
 8002bf8:	f000 f99e 	bl	8002f38 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff f8af 	bl	8001d60 <UART_SendMsg>
      break;
 8002c02:	e192      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b36      	cmp	r3, #54	; 0x36
 8002c0a:	d801      	bhi.n	8002c10 <HandleMSG+0x3a4>
      {
        return 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e18d      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      msg_offset = 4;
 8002c10:	2304      	movs	r3, #4
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	79db      	ldrb	r3, [r3, #7]
 8002c18:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c1e:	e11a      	b.n	8002e56 <HandleMSG+0x5ea>
 8002c20:	20000c38 	.word	0x20000c38
 8002c24:	20000be4 	.word	0x20000be4
 8002c28:	20000c34 	.word	0x20000c34
 8002c2c:	20000018 	.word	0x20000018
 8002c30:	20000c65 	.word	0x20000c65
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8002c34:	4ba6      	ldr	r3, [pc, #664]	; (8002ed0 <HandleMSG+0x664>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2234      	movs	r2, #52	; 0x34
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	4aa5      	ldr	r2, [pc, #660]	; (8002ed4 <HandleMSG+0x668>)
 8002c40:	4413      	add	r3, r2
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c46:	440a      	add	r2, r1
 8002c48:	3204      	adds	r2, #4
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8002c4e:	4ba0      	ldr	r3, [pc, #640]	; (8002ed0 <HandleMSG+0x664>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2234      	movs	r2, #52	; 0x34
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	4a9e      	ldr	r2, [pc, #632]	; (8002ed4 <HandleMSG+0x668>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c60:	3201      	adds	r2, #1
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	440a      	add	r2, r1
 8002c66:	3204      	adds	r2, #4
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8002c6c:	4b98      	ldr	r3, [pc, #608]	; (8002ed0 <HandleMSG+0x664>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2234      	movs	r2, #52	; 0x34
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a97      	ldr	r2, [pc, #604]	; (8002ed4 <HandleMSG+0x668>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c7e:	3202      	adds	r2, #2
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	440a      	add	r2, r1
 8002c84:	3204      	adds	r2, #4
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HandleMSG+0x664>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2234      	movs	r2, #52	; 0x34
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	4a8f      	ldr	r2, [pc, #572]	; (8002ed4 <HandleMSG+0x668>)
 8002c96:	4413      	add	r3, r2
 8002c98:	3303      	adds	r3, #3
 8002c9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c9c:	3203      	adds	r2, #3
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	3204      	adds	r2, #4
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8002ca8:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <HandleMSG+0x664>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2234      	movs	r2, #52	; 0x34
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a88      	ldr	r2, [pc, #544]	; (8002ed4 <HandleMSG+0x668>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cba:	3204      	adds	r2, #4
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	3204      	adds	r2, #4
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HandleMSG+0x664>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2234      	movs	r2, #52	; 0x34
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <HandleMSG+0x668>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cda:	3208      	adds	r2, #8
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	440a      	add	r2, r1
 8002ce0:	3204      	adds	r2, #4
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <HandleMSG+0x664>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2234      	movs	r2, #52	; 0x34
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	4a78      	ldr	r2, [pc, #480]	; (8002ed4 <HandleMSG+0x668>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cf8:	320c      	adds	r2, #12
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	3204      	adds	r2, #4
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 8002d04:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HandleMSG+0x664>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2234      	movs	r2, #52	; 0x34
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	3310      	adds	r3, #16
 8002d10:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <HandleMSG+0x668>)
 8002d12:	4413      	add	r3, r2
 8002d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d16:	3210      	adds	r2, #16
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	3204      	adds	r2, #4
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 8002d22:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <HandleMSG+0x664>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2234      	movs	r2, #52	; 0x34
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	3310      	adds	r3, #16
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <HandleMSG+0x668>)
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d36:	3214      	adds	r2, #20
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	440a      	add	r2, r1
 8002d3c:	3204      	adds	r2, #4
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HandleMSG+0x664>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2234      	movs	r2, #52	; 0x34
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <HandleMSG+0x668>)
 8002d50:	4413      	add	r3, r2
 8002d52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d54:	3218      	adds	r2, #24
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	440a      	add	r2, r1
 8002d5a:	3204      	adds	r2, #4
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8002d60:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HandleMSG+0x664>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2234      	movs	r2, #52	; 0x34
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	3318      	adds	r3, #24
 8002d6c:	4a59      	ldr	r2, [pc, #356]	; (8002ed4 <HandleMSG+0x668>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d74:	321c      	adds	r2, #28
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	440a      	add	r2, r1
 8002d7a:	3204      	adds	r2, #4
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HandleMSG+0x664>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2234      	movs	r2, #52	; 0x34
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	3320      	adds	r3, #32
 8002d8c:	4a51      	ldr	r2, [pc, #324]	; (8002ed4 <HandleMSG+0x668>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d92:	3220      	adds	r2, #32
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	440a      	add	r2, r1
 8002d98:	3204      	adds	r2, #4
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 8002d9e:	4b4c      	ldr	r3, [pc, #304]	; (8002ed0 <HandleMSG+0x664>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2234      	movs	r2, #52	; 0x34
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	3320      	adds	r3, #32
 8002daa:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <HandleMSG+0x668>)
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002db2:	3224      	adds	r2, #36	; 0x24
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	440a      	add	r2, r1
 8002db8:	3204      	adds	r2, #4
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 8002dbe:	4b44      	ldr	r3, [pc, #272]	; (8002ed0 <HandleMSG+0x664>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2234      	movs	r2, #52	; 0x34
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	3328      	adds	r3, #40	; 0x28
 8002dca:	4a42      	ldr	r2, [pc, #264]	; (8002ed4 <HandleMSG+0x668>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dd0:	3228      	adds	r2, #40	; 0x28
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	3204      	adds	r2, #4
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 8002ddc:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HandleMSG+0x664>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2234      	movs	r2, #52	; 0x34
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	3328      	adds	r3, #40	; 0x28
 8002de8:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <HandleMSG+0x668>)
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df0:	322c      	adds	r2, #44	; 0x2c
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	440a      	add	r2, r1
 8002df6:	3204      	adds	r2, #4
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HandleMSG+0x664>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2234      	movs	r2, #52	; 0x34
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	3330      	adds	r3, #48	; 0x30
 8002e08:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HandleMSG+0x668>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e0e:	3230      	adds	r2, #48	; 0x30
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	440a      	add	r2, r1
 8002e14:	3204      	adds	r2, #4
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	3334      	adds	r3, #52	; 0x34
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HandleMSG+0x66c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <HandleMSG+0x66c>)
 8002e28:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HandleMSG+0x66c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	dd02      	ble.n	8002e38 <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HandleMSG+0x66c>)
 8002e34:	2208      	movs	r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HandleMSG+0x664>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HandleMSG+0x664>)
 8002e40:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HandleMSG+0x664>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b07      	cmp	r3, #7
 8002e48:	dd02      	ble.n	8002e50 <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HandleMSG+0x664>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8002e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e52:	3301      	adds	r3, #1
 8002e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	f4ff aeea 	bcc.w	8002c34 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HandleMSG+0x670>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fcce 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	601a      	str	r2, [r3, #0]
      break;
 8002e72:	e05a      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d801      	bhi.n	8002e80 <HandleMSG+0x614>
      {
        return 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e055      	b.n	8002f2c <HandleMSG+0x6c0>
      }

      if (Msg->Data[3] == 1U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	79db      	ldrb	r3, [r3, #7]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10e      	bne.n	8002ea6 <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HandleMSG+0x674>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HandleMSG+0x678>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <HandleMSG+0x67c>)
 8002e94:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HandleMSG+0x678>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8002e9e:	4813      	ldr	r0, [pc, #76]	; (8002eec <HandleMSG+0x680>)
 8002ea0:	f005 fd48 	bl	8008934 <HAL_TIM_Base_Stop_IT>
 8002ea4:	e006      	b.n	8002eb4 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HandleMSG+0x674>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HandleMSG+0x67c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <HandleMSG+0x678>)
 8002eb2:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fca7 	bl	8002808 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe ff50 	bl	8001d60 <UART_SendMsg>
      break;
 8002ec0:	e033      	b.n	8002f2a <HandleMSG+0x6be>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d812      	bhi.n	8002ef0 <HandleMSG+0x684>
      {
        return 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e02e      	b.n	8002f2c <HandleMSG+0x6c0>
 8002ece:	bf00      	nop
 8002ed0:	20000e0c 	.word	0x20000e0c
 8002ed4:	20000c68 	.word	0x20000c68
 8002ed8:	20000e10 	.word	0x20000e10
 8002edc:	20000c64 	.word	0x20000c64
 8002ee0:	20000c65 	.word	0x20000c65
 8002ee4:	20000c38 	.word	0x20000c38
 8002ee8:	200014ac 	.word	0x200014ac
 8002eec:	20000be4 	.word	0x20000be4
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3307      	adds	r3, #7
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HandleMSG+0x6c8>)
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	2204      	movs	r2, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f9cc 	bl	800329a <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	330b      	adds	r3, #11
 8002f06:	2201      	movs	r2, #1
 8002f08:	2110      	movs	r1, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f9c5 	bl	800329a <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fc79 	bl	8002808 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe ff1f 	bl	8001d60 <UART_SendMsg>
      break;
 8002f22:	e002      	b.n	8002f2a <HandleMSG+0x6be>

    default:
      ret = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8002f28:	bf00      	nop
  }

  return ret;
 8002f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3760      	adds	r7, #96	; 0x60
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000000 	.word	0x20000000

08002f38 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	71fb      	strb	r3, [r7, #7]
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71bb      	strb	r3, [r7, #6]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	717b      	strb	r3, [r7, #5]
 8002f52:	4613      	mov	r3, r2
 8002f54:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 8002f5e:	797b      	ldrb	r3, [r7, #5]
 8002f60:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 8002f62:	793b      	ldrb	r3, [r7, #4]
 8002f64:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4806      	ldr	r0, [pc, #24]	; (8002f88 <RTC_DateRegulate+0x50>)
 8002f70:	f004 fb18 	bl	80075a4 <HAL_RTC_SetDate>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8002f7a:	f7fe f93b 	bl	80011f4 <Error_Handler>
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000bc0 	.word	0x20000bc0

08002f8c <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
 8002f96:	460b      	mov	r3, r1
 8002f98:	71bb      	strb	r3, [r7, #6]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8002fa6:	797b      	ldrb	r3, [r7, #5]
 8002fa8:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <RTC_TimeRegulate+0x50>)
 8002fc4:	f004 f9f5 	bl	80073b2 <HAL_RTC_SetTime>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8002fce:	f7fe f911 	bl	80011f4 <Error_Handler>
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000bc0 	.word	0x20000bc0

08002fe0 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b09e      	sub	sp, #120	; 0x78
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 8002fea:	230d      	movs	r3, #13
 8002fec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,3,"FW_VERSION",%s,"BOARD_NAME};
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <Get_PresentationString+0x7c>)
 8002ff6:	f107 0408 	add.w	r4, r7, #8
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	8022      	strh	r2, [r4, #0]
 800300a:	3402      	adds	r4, #2
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	7023      	strb	r3, [r4, #0]

  MotionPM_manager_get_version(lib_version_string, &lib_version_len);
 8003010:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f833 	bl	8003086 <MotionPM_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 8003020:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	429a      	cmp	r2, r3
 8003028:	da06      	bge.n	8003038 <Get_PresentationString+0x58>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800302a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800302e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003032:	4413      	add	r3, r2
 8003034:	677b      	str	r3, [r7, #116]	; 0x74
 8003036:	e002      	b.n	800303e <Get_PresentationString+0x5e>
  }
  else
  {
    lib_version_num = lib_version_string;
 8003038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800303c:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800303e:	f107 0208 	add.w	r2, r7, #8
 8003042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f009 f8ce 	bl	800c1e8 <sniprintf>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	3778      	adds	r7, #120	; 0x78
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	0800cbb8 	.word	0x0800cbb8

08003060 <MotionPM_manager_init>:
 * @brief  Initialize the MotionPM engine
 * @param  None
 * @retval None
 */
void MotionPM_manager_init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  MotionPM_Initialize();
 8003064:	f007 f880 	bl	800a168 <MotionPM_Initialize>
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <MotionPM_manager_run>:
 * @param  data_in  Structure containing input data
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionPM_manager_run(MPM_input_t *data_in, MPM_output_t *data_out)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  MotionPM_Update(data_in, data_out);
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f007 fadd 	bl	800a638 <MotionPM_Update>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <MotionPM_manager_get_version>:
 * @param  version Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionPM_manager_get_version(char *version, int *length)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  *length = (int)MotionPM_GetLibVersion(version);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f009 f82b 	bl	800c0ec <MotionPM_GetLibVersion>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 80030b2:	2302      	movs	r3, #2
 80030b4:	60fb      	str	r3, [r7, #12]

  switch (Source)
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	2bf0      	cmp	r3, #240	; 0xf0
 80030ba:	d002      	beq.n	80030c2 <ByteStuffCopyByte+0x1c>
 80030bc:	2bf1      	cmp	r3, #241	; 0xf1
 80030be:	d008      	beq.n	80030d2 <ByteStuffCopyByte+0x2c>
 80030c0:	e00f      	b.n	80030e2 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	22f1      	movs	r2, #241	; 0xf1
 80030c6:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3301      	adds	r3, #1
 80030cc:	22f2      	movs	r2, #242	; 0xf2
 80030ce:	701a      	strb	r2, [r3, #0]
      break;
 80030d0:	e00d      	b.n	80030ee <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	22f1      	movs	r2, #241	; 0xf1
 80030d6:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3301      	adds	r3, #1
 80030dc:	22f1      	movs	r2, #241	; 0xf1
 80030de:	701a      	strb	r2, [r3, #0]
      break;
 80030e0:	e005      	b.n	80030ee <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	701a      	strb	r2, [r3, #0]
      ret = 1;
 80030e8:	2301      	movs	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
      break;
 80030ec:	bf00      	nop
  }

  return ret;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e011      	b.n	8003134 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	18d0      	adds	r0, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4619      	mov	r1, r3
 8003122:	f7ff ffc0 	bl	80030a6 <ByteStuffCopyByte>
 8003126:	4602      	mov	r2, r0
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4413      	add	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3301      	adds	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3e8      	bcc.n	8003110 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	22f0      	movs	r2, #240	; 0xf0
 8003146:	701a      	strb	r2, [r3, #0]
  count++;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
  return count;
 800314e:	68bb      	ldr	r3, [r7, #8]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	603a      	str	r2, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
 8003164:	460b      	mov	r3, r1
 8003166:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2bf1      	cmp	r3, #241	; 0xf1
 800316c:	d111      	bne.n	8003192 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800316e:	79bb      	ldrb	r3, [r7, #6]
 8003170:	2bf1      	cmp	r3, #241	; 0xf1
 8003172:	d104      	bne.n	800317e <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	22f1      	movs	r2, #241	; 0xf1
 8003178:	701a      	strb	r2, [r3, #0]
      return 2;
 800317a:	2302      	movs	r3, #2
 800317c:	e00d      	b.n	800319a <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	2bf2      	cmp	r3, #242	; 0xf2
 8003182:	d104      	bne.n	800318e <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	22f0      	movs	r2, #240	; 0xf0
 8003188:	701a      	strb	r2, [r3, #0]
      return 2;
 800318a:	2302      	movs	r3, #2
 800318c:	e005      	b.n	800319a <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800318e:	2300      	movs	r3, #0
 8003190:	e003      	b.n	800319a <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	79fa      	ldrb	r2, [r7, #7]
 8003196:	701a      	strb	r2, [r3, #0]
    return 1;
 8003198:	2301      	movs	r3, #1
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	e00a      	b.n	80031ce <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3ef      	bcc.n	80031b8 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	e00a      	b.n	8003222 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	4413      	add	r3, r2
 800321a:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3301      	adds	r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	429a      	cmp	r2, r3
 800322a:	d3ef      	bcc.n	800320c <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3b01      	subs	r3, #1
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8003268:	e00d      	b.n	8003286 <Deserialize+0x38>
  {
    app <<= 8;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3b01      	subs	r3, #1
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <Deserialize+0x1c>
  }

  return app;
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e00f      	b.n	80032cc <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3eb      	bcc.n	80032ac <Serialize_s32+0x12>
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800331c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032e8:	f001 fd04 	bl	8004cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032ec:	480c      	ldr	r0, [pc, #48]	; (8003320 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ee:	490d      	ldr	r1, [pc, #52]	; (8003324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <LoopForever+0xe>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f4:	e002      	b.n	80032fc <LoopCopyDataInit>

080032f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fa:	3304      	adds	r3, #4

080032fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003300:	d3f9      	bcc.n	80032f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003304:	4c0a      	ldr	r4, [pc, #40]	; (8003330 <LoopForever+0x16>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003308:	e001      	b.n	800330e <LoopFillZerobss>

0800330a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800330a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800330c:	3204      	adds	r2, #4

0800330e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003310:	d3fb      	bcc.n	800330a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003312:	f008 ff15 	bl	800c140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003316:	f7fd fe27 	bl	8000f68 <main>

0800331a <LoopForever>:

LoopForever:
    b LoopForever
 800331a:	e7fe      	b.n	800331a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800331c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003324:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8003328:	0800ccb8 	.word	0x0800ccb8
  ldr r2, =_sbss
 800332c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003330:	20001554 	.word	0x20001554

08003334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC1_IRQHandler>
	...

08003338 <ASM330LHH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_RegisterBusIO(ASM330LHH_Object_t *pObj, ASM330LHH_IO_t *pIO)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <ASM330LHH_RegisterBusIO+0x1c>
  {
    ret = ASM330LHH_ERROR;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e051      	b.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7b1a      	ldrb	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <ASM330LHH_RegisterBusIO+0xcc>)
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <ASM330LHH_RegisterBusIO+0xd0>)
 8003396:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <ASM330LHH_RegisterBusIO+0x7e>
    {
      ret = ASM330LHH_ERROR;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e020      	b.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ASM330LHH_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4798      	blx	r3
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <ASM330LHH_RegisterBusIO+0x92>
    {
      ret = ASM330LHH_ERROR;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e016      	b.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ASM330LHH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d112      	bne.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80033dc:	230c      	movs	r3, #12
 80033de:	72fb      	strb	r3, [r7, #11]

          if (ASM330LHH_Write_Reg(pObj, ASM330LHH_CTRL3_C, data) != ASM330LHH_OK)
 80033e0:	7afb      	ldrb	r3, [r7, #11]
 80033e2:	461a      	mov	r2, r3
 80033e4:	2112      	movs	r1, #18
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fd55 	bl	8003e96 <ASM330LHH_Write_Reg>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <ASM330LHH_RegisterBusIO+0xc0>
          {
            ret = ASM330LHH_ERROR;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08004305 	.word	0x08004305
 8003408:	0800433b 	.word	0x0800433b

0800340c <ASM330LHH_Init>:
  * @brief  Initialize the ASM330LHH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_Init(ASM330LHH_Object_t *pObj)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (asm330lhh_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ASM330LHH_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3320      	adds	r3, #32
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fa7a 	bl	8004914 <asm330lhh_device_conf_set>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <ASM330LHH_Init+0x20>
  {
    return ASM330LHH_ERROR;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	e060      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (asm330lhh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ASM330LHH_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3320      	adds	r3, #32
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f001 faa5 	bl	8004982 <asm330lhh_auto_increment_set>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <ASM330LHH_Init+0x38>
  {
    return ASM330LHH_ERROR;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e054      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Enable BDU */
  if (asm330lhh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ASM330LHH_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3320      	adds	r3, #32
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 f9a6 	bl	800479c <asm330lhh_block_data_update_set>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <ASM330LHH_Init+0x50>
  {
    return ASM330LHH_ERROR;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e048      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* FIFO mode selection */
  if (asm330lhh_fifo_mode_set(&(pObj->Ctx), ASM330LHH_BYPASS_MODE) != ASM330LHH_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3320      	adds	r3, #32
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fab3 	bl	80049ce <asm330lhh_fifo_mode_set>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <ASM330LHH_Init+0x68>
  {
    return ASM330LHH_ERROR;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	e03c      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ASM330LHH_XL_ODR_104Hz;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2204      	movs	r2, #4
 8003478:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (asm330lhh_xl_data_rate_set(&(pObj->Ctx), ASM330LHH_XL_ODR_OFF) != ASM330LHH_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3320      	adds	r3, #32
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f802 	bl	800448c <asm330lhh_xl_data_rate_set>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <ASM330LHH_Init+0x88>
  {
    return ASM330LHH_ERROR;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	e02c      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Full scale selection. */
  if (asm330lhh_xl_full_scale_set(&(pObj->Ctx), ASM330LHH_2g) != ASM330LHH_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3320      	adds	r3, #32
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f000 ff98 	bl	80043d0 <asm330lhh_xl_full_scale_set>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <ASM330LHH_Init+0xa0>
  {
    return ASM330LHH_ERROR;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e020      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ASM330LHH_GY_ODR_104Hz;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2204      	movs	r2, #4
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (asm330lhh_gy_data_rate_set(&(pObj->Ctx), ASM330LHH_GY_ODR_OFF) != ASM330LHH_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3320      	adds	r3, #32
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f8e6 	bl	800468c <asm330lhh_gy_data_rate_set>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <ASM330LHH_Init+0xc0>
  {
    return ASM330LHH_ERROR;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	e010      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  /* Full scale selection. */
  if (asm330lhh_gy_full_scale_set(&(pObj->Ctx), ASM330LHH_2000dps) != ASM330LHH_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	210c      	movs	r1, #12
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f862 	bl	800459c <asm330lhh_gy_full_scale_set>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <ASM330LHH_Init+0xd8>
  {
    return ASM330LHH_ERROR;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e004      	b.n	80034ee <ASM330LHH_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ASM330LHH_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <ASM330LHH_DeInit>:
  * @brief  Deinitialize the ASM330LHH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_DeInit(ASM330LHH_Object_t *pObj)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ASM330LHH_ACC_Disable(pObj) != ASM330LHH_OK)
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f888 	bl	8003614 <ASM330LHH_ACC_Disable>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <ASM330LHH_DeInit+0x1a>
  {
    return ASM330LHH_ERROR;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e015      	b.n	800353c <ASM330LHH_DeInit+0x46>
  }

  if (ASM330LHH_GYRO_Disable(pObj) != ASM330LHH_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa92 	bl	8003a3a <ASM330LHH_GYRO_Disable>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <ASM330LHH_DeInit+0x2c>
  {
    return ASM330LHH_ERROR;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	e00c      	b.n	800353c <ASM330LHH_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ASM330LHH_XL_ODR_OFF;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ASM330LHH_GY_ODR_OFF;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ASM330LHH_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <ASM330LHH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ReadID(ASM330LHH_Object_t *pObj, uint8_t *Id)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  if (asm330lhh_device_id_get(&(pObj->Ctx), Id) != ASM330LHH_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fa03 	bl	8004960 <asm330lhh_device_id_get>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <ASM330LHH_ReadID+0x22>
  {
    return ASM330LHH_ERROR;
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	e000      	b.n	8003568 <ASM330LHH_ReadID+0x24>
  }

  return ASM330LHH_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <ASM330LHH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ASM330LHH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GetCapabilities(ASM330LHH_Object_t *pObj, ASM330LHH_Capabilities_t *Capabilities)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003598:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <ASM330LHH_GetCapabilities+0x58>)
 80035aa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <ASM330LHH_GetCapabilities+0x58>)
 80035b0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  return ASM330LHH_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	45d02000 	.word	0x45d02000

080035cc <ASM330LHH_ACC_Enable>:
  * @brief  Enable the ASM330LHH accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_Enable(ASM330LHH_Object_t *pObj)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <ASM330LHH_ACC_Enable+0x16>
  {
    return ASM330LHH_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e014      	b.n	800360c <ASM330LHH_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (asm330lhh_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ASM330LHH_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 0220 	add.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 ff4b 	bl	800448c <asm330lhh_xl_data_rate_set>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <ASM330LHH_ACC_Enable+0x36>
  {
    return ASM330LHH_ERROR;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	e004      	b.n	800360c <ASM330LHH_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ASM330LHH_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <ASM330LHH_ACC_Disable>:
  * @brief  Disable the ASM330LHH accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_Disable(ASM330LHH_Object_t *pObj)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <ASM330LHH_ACC_Disable+0x16>
  {
    return ASM330LHH_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e01f      	b.n	800366a <ASM330LHH_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (asm330lhh_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ASM330LHH_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f103 0220 	add.w	r2, r3, #32
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3333      	adds	r3, #51	; 0x33
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 ff4e 	bl	80044d8 <asm330lhh_xl_data_rate_get>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <ASM330LHH_ACC_Disable+0x34>
  {
    return ASM330LHH_ERROR;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e010      	b.n	800366a <ASM330LHH_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (asm330lhh_xl_data_rate_set(&(pObj->Ctx), ASM330LHH_XL_ODR_OFF) != ASM330LHH_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 ff1c 	bl	800448c <asm330lhh_xl_data_rate_set>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <ASM330LHH_ACC_Disable+0x4c>
  {
    return ASM330LHH_ERROR;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e004      	b.n	800366a <ASM330LHH_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ASM330LHH_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <ASM330LHH_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_GetSensitivity(ASM330LHH_Object_t *pObj, float *Sensitivity)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  asm330lhh_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (asm330lhh_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ASM330LHH_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	f107 020b 	add.w	r2, r7, #11
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fec5 	bl	800441c <asm330lhh_xl_full_scale_get>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <ASM330LHH_ACC_GetSensitivity+0x2a>
  {
    return ASM330LHH_ERROR;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	e023      	b.n	80036e6 <ASM330LHH_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d81b      	bhi.n	80036dc <ASM330LHH_ACC_GetSensitivity+0x68>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <ASM330LHH_ACC_GetSensitivity+0x38>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036cd 	.word	0x080036cd
  {
    case ASM330LHH_2g:
      *Sensitivity = ASM330LHH_ACC_SENSITIVITY_FS_2G;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <ASM330LHH_ACC_GetSensitivity+0x7c>)
 80036c0:	601a      	str	r2, [r3, #0]
      break;
 80036c2:	e00f      	b.n	80036e4 <ASM330LHH_ACC_GetSensitivity+0x70>

    case ASM330LHH_4g:
      *Sensitivity = ASM330LHH_ACC_SENSITIVITY_FS_4G;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <ASM330LHH_ACC_GetSensitivity+0x80>)
 80036c8:	601a      	str	r2, [r3, #0]
      break;
 80036ca:	e00b      	b.n	80036e4 <ASM330LHH_ACC_GetSensitivity+0x70>

    case ASM330LHH_8g:
      *Sensitivity = ASM330LHH_ACC_SENSITIVITY_FS_8G;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <ASM330LHH_ACC_GetSensitivity+0x84>)
 80036d0:	601a      	str	r2, [r3, #0]
      break;
 80036d2:	e007      	b.n	80036e4 <ASM330LHH_ACC_GetSensitivity+0x70>

    case ASM330LHH_16g:
      *Sensitivity = ASM330LHH_ACC_SENSITIVITY_FS_16G;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <ASM330LHH_ACC_GetSensitivity+0x88>)
 80036d8:	601a      	str	r2, [r3, #0]
      break;
 80036da:	e003      	b.n	80036e4 <ASM330LHH_ACC_GetSensitivity+0x70>

    default:
      ret = ASM330LHH_ERROR;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	60fb      	str	r3, [r7, #12]
      break;
 80036e2:	bf00      	nop
  }

  return ret;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	3d79db23 	.word	0x3d79db23
 80036f4:	3df9db23 	.word	0x3df9db23
 80036f8:	3e79db23 	.word	0x3e79db23
 80036fc:	3ef9db23 	.word	0x3ef9db23

08003700 <ASM330LHH_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_GetOutputDataRate(ASM330LHH_Object_t *pObj, float *Odr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  asm330lhh_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (asm330lhh_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ASM330LHH_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3320      	adds	r3, #32
 8003712:	f107 020b 	add.w	r2, r7, #11
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fedd 	bl	80044d8 <asm330lhh_xl_data_rate_get>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <ASM330LHH_ACC_GetOutputDataRate+0x2a>
  {
    return ASM330LHH_ERROR;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	e04e      	b.n	80037c8 <ASM330LHH_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	2b0a      	cmp	r3, #10
 800372e:	d846      	bhi.n	80037be <ASM330LHH_ACC_GetOutputDataRate+0xbe>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <ASM330LHH_ACC_GetOutputDataRate+0x38>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003765 	.word	0x08003765
 800373c:	0800376f 	.word	0x0800376f
 8003740:	08003777 	.word	0x08003777
 8003744:	0800377f 	.word	0x0800377f
 8003748:	08003787 	.word	0x08003787
 800374c:	0800378f 	.word	0x0800378f
 8003750:	08003797 	.word	0x08003797
 8003754:	0800379f 	.word	0x0800379f
 8003758:	080037a7 	.word	0x080037a7
 800375c:	080037af 	.word	0x080037af
 8003760:	080037b7 	.word	0x080037b7
  {
    case ASM330LHH_XL_ODR_OFF:
      *Odr = 0.0f;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
      break;
 800376c:	e02b      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <ASM330LHH_ACC_GetOutputDataRate+0xd0>)
 8003772:	601a      	str	r2, [r3, #0]
      break;
 8003774:	e027      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <ASM330LHH_ACC_GetOutputDataRate+0xd4>)
 800377a:	601a      	str	r2, [r3, #0]
      break;
 800377c:	e023      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_52Hz:
      *Odr = 52.0f;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <ASM330LHH_ACC_GetOutputDataRate+0xd8>)
 8003782:	601a      	str	r2, [r3, #0]
      break;
 8003784:	e01f      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <ASM330LHH_ACC_GetOutputDataRate+0xdc>)
 800378a:	601a      	str	r2, [r3, #0]
      break;
 800378c:	e01b      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_208Hz:
      *Odr = 208.0f;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <ASM330LHH_ACC_GetOutputDataRate+0xe0>)
 8003792:	601a      	str	r2, [r3, #0]
      break;
 8003794:	e017      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <ASM330LHH_ACC_GetOutputDataRate+0xe4>)
 800379a:	601a      	str	r2, [r3, #0]
      break;
 800379c:	e013      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_833Hz:
      *Odr = 833.0f;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <ASM330LHH_ACC_GetOutputDataRate+0xe8>)
 80037a2:	601a      	str	r2, [r3, #0]
      break;
 80037a4:	e00f      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4a10      	ldr	r2, [pc, #64]	; (80037ec <ASM330LHH_ACC_GetOutputDataRate+0xec>)
 80037aa:	601a      	str	r2, [r3, #0]
      break;
 80037ac:	e00b      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <ASM330LHH_ACC_GetOutputDataRate+0xf0>)
 80037b2:	601a      	str	r2, [r3, #0]
      break;
 80037b4:	e007      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    case ASM330LHH_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <ASM330LHH_ACC_GetOutputDataRate+0xf4>)
 80037ba:	601a      	str	r2, [r3, #0]
      break;
 80037bc:	e003      	b.n	80037c6 <ASM330LHH_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ASM330LHH_ERROR;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	60fb      	str	r3, [r7, #12]
      break;
 80037c4:	bf00      	nop
  }

  return ret;
 80037c6:	68fb      	ldr	r3, [r7, #12]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	41480000 	.word	0x41480000
 80037d4:	41d00000 	.word	0x41d00000
 80037d8:	42500000 	.word	0x42500000
 80037dc:	42d00000 	.word	0x42d00000
 80037e0:	43500000 	.word	0x43500000
 80037e4:	43d08000 	.word	0x43d08000
 80037e8:	44504000 	.word	0x44504000
 80037ec:	44d06000 	.word	0x44d06000
 80037f0:	45505000 	.word	0x45505000
 80037f4:	45d05800 	.word	0x45d05800

080037f8 <ASM330LHH_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_SetOutputDataRate(ASM330LHH_Object_t *pObj, float Odr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800380a:	2b01      	cmp	r3, #1
 800380c:	d106      	bne.n	800381c <ASM330LHH_ACC_SetOutputDataRate+0x24>
  {
    return ASM330LHH_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800380e:	ed97 0a00 	vldr	s0, [r7]
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb5a 	bl	8003ecc <ASM330LHH_ACC_SetOutputDataRate_When_Enabled>
 8003818:	4603      	mov	r3, r0
 800381a:	e005      	b.n	8003828 <ASM330LHH_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ASM330LHH_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800381c:	ed97 0a00 	vldr	s0, [r7]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fbdf 	bl	8003fe4 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled>
 8003826:	4603      	mov	r3, r0
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <ASM330LHH_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_GetFullScale(ASM330LHH_Object_t *pObj, int32_t *FullScale)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
  asm330lhh_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (asm330lhh_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ASM330LHH_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3320      	adds	r3, #32
 8003842:	f107 020b 	add.w	r2, r7, #11
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fde7 	bl	800441c <asm330lhh_xl_full_scale_get>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <ASM330LHH_ACC_GetFullScale+0x2a>
  {
    return ASM330LHH_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	e023      	b.n	80038a2 <ASM330LHH_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800385a:	7afb      	ldrb	r3, [r7, #11]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d81b      	bhi.n	8003898 <ASM330LHH_ACC_GetFullScale+0x68>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <ASM330LHH_ACC_GetFullScale+0x38>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	08003891 	.word	0x08003891
 8003870:	08003881 	.word	0x08003881
 8003874:	08003889 	.word	0x08003889
  {
    case ASM330LHH_2g:
      *FullScale =  2;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2202      	movs	r2, #2
 800387c:	601a      	str	r2, [r3, #0]
      break;
 800387e:	e00f      	b.n	80038a0 <ASM330LHH_ACC_GetFullScale+0x70>

    case ASM330LHH_4g:
      *FullScale =  4;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2204      	movs	r2, #4
 8003884:	601a      	str	r2, [r3, #0]
      break;
 8003886:	e00b      	b.n	80038a0 <ASM330LHH_ACC_GetFullScale+0x70>

    case ASM330LHH_8g:
      *FullScale =  8;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2208      	movs	r2, #8
 800388c:	601a      	str	r2, [r3, #0]
      break;
 800388e:	e007      	b.n	80038a0 <ASM330LHH_ACC_GetFullScale+0x70>

    case ASM330LHH_16g:
      *FullScale = 16;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2210      	movs	r2, #16
 8003894:	601a      	str	r2, [r3, #0]
      break;
 8003896:	e003      	b.n	80038a0 <ASM330LHH_ACC_GetFullScale+0x70>

    default:
      ret = ASM330LHH_ERROR;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	60fb      	str	r3, [r7, #12]
      break;
 800389e:	bf00      	nop
  }

  return ret;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <ASM330LHH_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_SetFullScale(ASM330LHH_Object_t *pObj, int32_t FullScale)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  asm330lhh_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ASM330LHH_2g
           : (FullScale <= 4) ? ASM330LHH_4g
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	dd0b      	ble.n	80038d4 <ASM330LHH_ACC_SetFullScale+0x28>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b04      	cmp	r3, #4
 80038c0:	dd06      	ble.n	80038d0 <ASM330LHH_ACC_SetFullScale+0x24>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	dc01      	bgt.n	80038cc <ASM330LHH_ACC_SetFullScale+0x20>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e004      	b.n	80038d6 <ASM330LHH_ACC_SetFullScale+0x2a>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e002      	b.n	80038d6 <ASM330LHH_ACC_SetFullScale+0x2a>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e000      	b.n	80038d6 <ASM330LHH_ACC_SetFullScale+0x2a>
 80038d4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ASM330LHH_2g
 80038d6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ASM330LHH_8g
           :                    ASM330LHH_16g;

  if (asm330lhh_xl_full_scale_set(&(pObj->Ctx), new_fs) != ASM330LHH_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3320      	adds	r3, #32
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd75 	bl	80043d0 <asm330lhh_xl_full_scale_set>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <ASM330LHH_ACC_SetFullScale+0x46>
  {
    return ASM330LHH_ERROR;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295
 80038f0:	e000      	b.n	80038f4 <ASM330LHH_ACC_SetFullScale+0x48>
  }

  return ASM330LHH_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <ASM330LHH_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_GetAxesRaw(ASM330LHH_Object_t *pObj, ASM330LHH_AxesRaw_t *Value)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  asm330lhh_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (asm330lhh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ASM330LHH_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3320      	adds	r3, #32
 800390a:	f107 0208 	add.w	r2, r7, #8
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 ffb4 	bl	800487e <asm330lhh_acceleration_raw_get>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <ASM330LHH_ACC_GetAxesRaw+0x26>
  {
    return ASM330LHH_ERROR;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	e00c      	b.n	800393c <ASM330LHH_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003922:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800392a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003932:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	809a      	strh	r2, [r3, #4]

  return ASM330LHH_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <ASM330LHH_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_ACC_GetAxes(ASM330LHH_Object_t *pObj, ASM330LHH_Axes_t *Acceleration)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  asm330lhh_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (asm330lhh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ASM330LHH_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3320      	adds	r3, #32
 8003958:	f107 0210 	add.w	r2, r7, #16
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f000 ff8d 	bl	800487e <asm330lhh_acceleration_raw_get>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <ASM330LHH_ACC_GetAxes+0x2c>
  {
    return ASM330LHH_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e03c      	b.n	80039ea <ASM330LHH_ACC_GetAxes+0xa6>
  }

  /* Get ASM330LHH actual sensitivity. */
  if (ASM330LHH_ACC_GetSensitivity(pObj, &sensitivity) != ASM330LHH_OK)
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe7c 	bl	8003674 <ASM330LHH_ACC_GetSensitivity>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <ASM330LHH_ACC_GetAxes+0x44>
  {
    return ASM330LHH_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e030      	b.n	80039ea <ASM330LHH_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003988:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003994:	edd7 7a03 	vldr	s15, [r7, #12]
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a0:	ee17 2a90 	vmov	r2, s15
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80039a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c0:	ee17 2a90 	vmov	r2, s15
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80039c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e0:	ee17 2a90 	vmov	r2, s15
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	609a      	str	r2, [r3, #8]

  return ASM330LHH_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <ASM330LHH_GYRO_Enable>:
  * @brief  Enable the ASM330LHH gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_Enable(ASM330LHH_Object_t *pObj)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <ASM330LHH_GYRO_Enable+0x16>
  {
    return ASM330LHH_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e014      	b.n	8003a32 <ASM330LHH_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (asm330lhh_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ASM330LHH_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f103 0220 	add.w	r2, r3, #32
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f000 fe38 	bl	800468c <asm330lhh_gy_data_rate_set>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <ASM330LHH_GYRO_Enable+0x36>
  {
    return ASM330LHH_ERROR;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	e004      	b.n	8003a32 <ASM330LHH_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ASM330LHH_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <ASM330LHH_GYRO_Disable>:
  * @brief  Disable the ASM330LHH gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_Disable(ASM330LHH_Object_t *pObj)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <ASM330LHH_GYRO_Disable+0x16>
  {
    return ASM330LHH_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e01f      	b.n	8003a90 <ASM330LHH_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (asm330lhh_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ASM330LHH_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0220 	add.w	r2, r3, #32
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3334      	adds	r3, #52	; 0x34
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fe3b 	bl	80046d8 <asm330lhh_gy_data_rate_get>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <ASM330LHH_GYRO_Disable+0x34>
  {
    return ASM330LHH_ERROR;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	e010      	b.n	8003a90 <ASM330LHH_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (asm330lhh_gy_data_rate_set(&(pObj->Ctx), ASM330LHH_GY_ODR_OFF) != ASM330LHH_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fe09 	bl	800468c <asm330lhh_gy_data_rate_set>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <ASM330LHH_GYRO_Disable+0x4c>
  {
    return ASM330LHH_ERROR;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	e004      	b.n	8003a90 <ASM330LHH_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ASM330LHH_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <ASM330LHH_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_GetSensitivity(ASM330LHH_Object_t *pObj, float *Sensitivity)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  asm330lhh_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (asm330lhh_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ASM330LHH_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3320      	adds	r3, #32
 8003aaa:	f107 020b 	add.w	r2, r7, #11
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd99 	bl	80045e8 <asm330lhh_gy_full_scale_get>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <ASM330LHH_GYRO_GetSensitivity+0x2a>
  {
    return ASM330LHH_ERROR;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	e039      	b.n	8003b36 <ASM330LHH_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	d831      	bhi.n	8003b2c <ASM330LHH_GYRO_GetSensitivity+0x94>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <ASM330LHH_GYRO_GetSensitivity+0x38>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b2d 	.word	0x08003b2d
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b2d 	.word	0x08003b2d
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b25 	.word	0x08003b25
  {
    case ASM330LHH_125dps:
      *Sensitivity = ASM330LHH_GYRO_SENSITIVITY_FS_125DPS;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <ASM330LHH_GYRO_GetSensitivity+0xa8>)
 8003b08:	601a      	str	r2, [r3, #0]
      break;
 8003b0a:	e013      	b.n	8003b34 <ASM330LHH_GYRO_GetSensitivity+0x9c>

    case ASM330LHH_250dps:
      *Sensitivity = ASM330LHH_GYRO_SENSITIVITY_FS_250DPS;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <ASM330LHH_GYRO_GetSensitivity+0xac>)
 8003b10:	601a      	str	r2, [r3, #0]
      break;
 8003b12:	e00f      	b.n	8003b34 <ASM330LHH_GYRO_GetSensitivity+0x9c>

    case ASM330LHH_500dps:
      *Sensitivity = ASM330LHH_GYRO_SENSITIVITY_FS_500DPS;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <ASM330LHH_GYRO_GetSensitivity+0xb0>)
 8003b18:	601a      	str	r2, [r3, #0]
      break;
 8003b1a:	e00b      	b.n	8003b34 <ASM330LHH_GYRO_GetSensitivity+0x9c>

    case ASM330LHH_1000dps:
      *Sensitivity = ASM330LHH_GYRO_SENSITIVITY_FS_1000DPS;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <ASM330LHH_GYRO_GetSensitivity+0xb4>)
 8003b20:	601a      	str	r2, [r3, #0]
      break;
 8003b22:	e007      	b.n	8003b34 <ASM330LHH_GYRO_GetSensitivity+0x9c>

    case ASM330LHH_2000dps:
      *Sensitivity = ASM330LHH_GYRO_SENSITIVITY_FS_2000DPS;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <ASM330LHH_GYRO_GetSensitivity+0xb8>)
 8003b28:	601a      	str	r2, [r3, #0]
      break;
 8003b2a:	e003      	b.n	8003b34 <ASM330LHH_GYRO_GetSensitivity+0x9c>

    default:
      ret = ASM330LHH_ERROR;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	60fb      	str	r3, [r7, #12]
      break;
 8003b32:	bf00      	nop
  }

  return ret;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	408c0000 	.word	0x408c0000
 8003b44:	410c0000 	.word	0x410c0000
 8003b48:	418c0000 	.word	0x418c0000
 8003b4c:	420c0000 	.word	0x420c0000
 8003b50:	428c0000 	.word	0x428c0000

08003b54 <ASM330LHH_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_GetOutputDataRate(ASM330LHH_Object_t *pObj, float *Odr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  asm330lhh_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (asm330lhh_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ASM330LHH_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3320      	adds	r3, #32
 8003b66:	f107 020b 	add.w	r2, r7, #11
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fdb3 	bl	80046d8 <asm330lhh_gy_data_rate_get>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <ASM330LHH_GYRO_GetOutputDataRate+0x2a>
  {
    return ASM330LHH_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e04e      	b.n	8003c1c <ASM330LHH_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	2b0a      	cmp	r3, #10
 8003b82:	d846      	bhi.n	8003c12 <ASM330LHH_GYRO_GetOutputDataRate+0xbe>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <ASM330LHH_GYRO_GetOutputDataRate+0x38>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bd3 	.word	0x08003bd3
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003be3 	.word	0x08003be3
 8003ba4:	08003beb 	.word	0x08003beb
 8003ba8:	08003bf3 	.word	0x08003bf3
 8003bac:	08003bfb 	.word	0x08003bfb
 8003bb0:	08003c03 	.word	0x08003c03
 8003bb4:	08003c0b 	.word	0x08003c0b
  {
    case ASM330LHH_GY_ODR_OFF:
      *Odr = 0.0f;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
      break;
 8003bc0:	e02b      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <ASM330LHH_GYRO_GetOutputDataRate+0xd0>)
 8003bc6:	601a      	str	r2, [r3, #0]
      break;
 8003bc8:	e027      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <ASM330LHH_GYRO_GetOutputDataRate+0xd4>)
 8003bce:	601a      	str	r2, [r3, #0]
      break;
 8003bd0:	e023      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <ASM330LHH_GYRO_GetOutputDataRate+0xd8>)
 8003bd6:	601a      	str	r2, [r3, #0]
      break;
 8003bd8:	e01f      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <ASM330LHH_GYRO_GetOutputDataRate+0xdc>)
 8003bde:	601a      	str	r2, [r3, #0]
      break;
 8003be0:	e01b      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <ASM330LHH_GYRO_GetOutputDataRate+0xe0>)
 8003be6:	601a      	str	r2, [r3, #0]
      break;
 8003be8:	e017      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <ASM330LHH_GYRO_GetOutputDataRate+0xe4>)
 8003bee:	601a      	str	r2, [r3, #0]
      break;
 8003bf0:	e013      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <ASM330LHH_GYRO_GetOutputDataRate+0xe8>)
 8003bf6:	601a      	str	r2, [r3, #0]
      break;
 8003bf8:	e00f      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <ASM330LHH_GYRO_GetOutputDataRate+0xec>)
 8003bfe:	601a      	str	r2, [r3, #0]
      break;
 8003c00:	e00b      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <ASM330LHH_GYRO_GetOutputDataRate+0xf0>)
 8003c06:	601a      	str	r2, [r3, #0]
      break;
 8003c08:	e007      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    case ASM330LHH_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <ASM330LHH_GYRO_GetOutputDataRate+0xf4>)
 8003c0e:	601a      	str	r2, [r3, #0]
      break;
 8003c10:	e003      	b.n	8003c1a <ASM330LHH_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ASM330LHH_ERROR;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	60fb      	str	r3, [r7, #12]
      break;
 8003c18:	bf00      	nop
  }

  return ret;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	41480000 	.word	0x41480000
 8003c28:	41d00000 	.word	0x41d00000
 8003c2c:	42500000 	.word	0x42500000
 8003c30:	42d00000 	.word	0x42d00000
 8003c34:	43500000 	.word	0x43500000
 8003c38:	43d08000 	.word	0x43d08000
 8003c3c:	44504000 	.word	0x44504000
 8003c40:	44d06000 	.word	0x44d06000
 8003c44:	45505000 	.word	0x45505000
 8003c48:	45d05800 	.word	0x45d05800

08003c4c <ASM330LHH_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_SetOutputDataRate(ASM330LHH_Object_t *pObj, float Odr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d106      	bne.n	8003c70 <ASM330LHH_GYRO_SetOutputDataRate+0x24>
  {
    return ASM330LHH_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003c62:	ed97 0a00 	vldr	s0, [r7]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa3e 	bl	80040e8 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	e005      	b.n	8003c7c <ASM330LHH_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ASM330LHH_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c70:	ed97 0a00 	vldr	s0, [r7]
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fac3 	bl	8004200 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled>
 8003c7a:	4603      	mov	r3, r0
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <ASM330LHH_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_GetFullScale(ASM330LHH_Object_t *pObj, int32_t  *FullScale)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  int32_t ret = ASM330LHH_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  asm330lhh_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (asm330lhh_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ASM330LHH_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3320      	adds	r3, #32
 8003c96:	f107 020b 	add.w	r2, r7, #11
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fca3 	bl	80045e8 <asm330lhh_gy_full_scale_get>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <ASM330LHH_GYRO_GetFullScale+0x2a>
  {
    return ASM330LHH_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e041      	b.n	8003d32 <ASM330LHH_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d839      	bhi.n	8003d28 <ASM330LHH_GYRO_GetFullScale+0xa4>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <ASM330LHH_GYRO_GetFullScale+0x38>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003cf9 	.word	0x08003cf9
 8003cc0:	08003d1f 	.word	0x08003d1f
 8003cc4:	08003cf1 	.word	0x08003cf1
 8003cc8:	08003d29 	.word	0x08003d29
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d29 	.word	0x08003d29
 8003cd8:	08003d29 	.word	0x08003d29
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d29 	.word	0x08003d29
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d15 	.word	0x08003d15
  {
    case ASM330LHH_125dps:
      *FullScale =  125;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	227d      	movs	r2, #125	; 0x7d
 8003cf4:	601a      	str	r2, [r3, #0]
      break;
 8003cf6:	e01b      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    case ASM330LHH_250dps:
      *FullScale =  250;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	22fa      	movs	r2, #250	; 0xfa
 8003cfc:	601a      	str	r2, [r3, #0]
      break;
 8003cfe:	e017      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    case ASM330LHH_500dps:
      *FullScale =  500;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d06:	601a      	str	r2, [r3, #0]
      break;
 8003d08:	e012      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    case ASM330LHH_1000dps:
      *FullScale = 1000;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d10:	601a      	str	r2, [r3, #0]
      break;
 8003d12:	e00d      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    case ASM330LHH_2000dps:
      *FullScale = 2000;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d1a:	601a      	str	r2, [r3, #0]
      break;
 8003d1c:	e008      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    case ASM330LHH_4000dps:
      *FullScale = 4000;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d24:	601a      	str	r2, [r3, #0]
      break;
 8003d26:	e003      	b.n	8003d30 <ASM330LHH_GYRO_GetFullScale+0xac>

    default:
      ret = ASM330LHH_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	60fb      	str	r3, [r7, #12]
      break;
 8003d2e:	bf00      	nop
  }

  return ret;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop

08003d3c <ASM330LHH_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_SetFullScale(ASM330LHH_Object_t *pObj, int32_t FullScale)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  asm330lhh_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ASM330LHH_125dps
           : (FullScale <= 250)  ? ASM330LHH_250dps
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b7d      	cmp	r3, #125	; 0x7d
 8003d4a:	dd18      	ble.n	8003d7e <ASM330LHH_GYRO_SetFullScale+0x42>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2bfa      	cmp	r3, #250	; 0xfa
 8003d50:	dd13      	ble.n	8003d7a <ASM330LHH_GYRO_SetFullScale+0x3e>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d58:	dd0d      	ble.n	8003d76 <ASM330LHH_GYRO_SetFullScale+0x3a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d60:	dd07      	ble.n	8003d72 <ASM330LHH_GYRO_SetFullScale+0x36>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d68:	dc01      	bgt.n	8003d6e <ASM330LHH_GYRO_SetFullScale+0x32>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	e008      	b.n	8003d80 <ASM330LHH_GYRO_SetFullScale+0x44>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e006      	b.n	8003d80 <ASM330LHH_GYRO_SetFullScale+0x44>
 8003d72:	2308      	movs	r3, #8
 8003d74:	e004      	b.n	8003d80 <ASM330LHH_GYRO_SetFullScale+0x44>
 8003d76:	2304      	movs	r3, #4
 8003d78:	e002      	b.n	8003d80 <ASM330LHH_GYRO_SetFullScale+0x44>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <ASM330LHH_GYRO_SetFullScale+0x44>
 8003d7e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ASM330LHH_125dps
 8003d80:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ASM330LHH_500dps
           : (FullScale <= 1000) ? ASM330LHH_1000dps
           : (FullScale <= 2000) ? ASM330LHH_2000dps
           :                       ASM330LHH_4000dps;

  if (asm330lhh_gy_full_scale_set(&(pObj->Ctx), new_fs) != ASM330LHH_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3320      	adds	r3, #32
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fc06 	bl	800459c <asm330lhh_gy_full_scale_set>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <ASM330LHH_GYRO_SetFullScale+0x60>
  {
    return ASM330LHH_ERROR;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	e000      	b.n	8003d9e <ASM330LHH_GYRO_SetFullScale+0x62>
  }

  return ASM330LHH_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ASM330LHH_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_GetAxesRaw(ASM330LHH_Object_t *pObj, ASM330LHH_AxesRaw_t *Value)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  asm330lhh_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (asm330lhh_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ASM330LHH_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3320      	adds	r3, #32
 8003db4:	f107 0208 	add.w	r2, r7, #8
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fd14 	bl	80047e8 <asm330lhh_angular_rate_raw_get>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <ASM330LHH_GYRO_GetAxesRaw+0x26>
  {
    return ASM330LHH_ERROR;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	e00c      	b.n	8003de6 <ASM330LHH_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003dcc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003dd4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ddc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	809a      	strh	r2, [r3, #4]

  return ASM330LHH_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <ASM330LHH_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_GYRO_GetAxes(ASM330LHH_Object_t *pObj, ASM330LHH_Axes_t *AngularRate)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  asm330lhh_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (asm330lhh_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ASM330LHH_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	f107 0210 	add.w	r2, r7, #16
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fcf0 	bl	80047e8 <asm330lhh_angular_rate_raw_get>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <ASM330LHH_GYRO_GetAxes+0x26>
  {
    return ASM330LHH_ERROR;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e03c      	b.n	8003e8e <ASM330LHH_GYRO_GetAxes+0xa0>
  }

  /* Get ASM330LHH actual sensitivity. */
  if (ASM330LHH_GYRO_GetSensitivity(pObj, &sensitivity) != ASM330LHH_OK)
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe3c 	bl	8003a98 <ASM330LHH_GYRO_GetSensitivity>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <ASM330LHH_GYRO_GetAxes+0x3e>
  {
    return ASM330LHH_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e030      	b.n	8003e8e <ASM330LHH_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e44:	ee17 2a90 	vmov	r2, s15
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e64:	ee17 2a90 	vmov	r2, s15
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e84:	ee17 2a90 	vmov	r2, s15
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	609a      	str	r2, [r3, #8]

  return ASM330LHH_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ASM330LHH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ASM330LHH_Write_Reg(ASM330LHH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	70bb      	strb	r3, [r7, #2]
  if (asm330lhh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ASM330LHH_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 0020 	add.w	r0, r3, #32
 8003eac:	1cba      	adds	r2, r7, #2
 8003eae:	78f9      	ldrb	r1, [r7, #3]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f000 fa75 	bl	80043a0 <asm330lhh_write_reg>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <ASM330LHH_Write_Reg+0x2c>
  {
    return ASM330LHH_ERROR;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	e000      	b.n	8003ec4 <ASM330LHH_Write_Reg+0x2e>
  }

  return ASM330LHH_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <ASM330LHH_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ASM330LHH_ACC_SetOutputDataRate_When_Enabled(ASM330LHH_Object_t *pObj, float Odr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	ed87 0a00 	vstr	s0, [r7]
  asm330lhh_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ASM330LHH_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ASM330LHH_XL_ODR_26Hz
 8003ed8:	edd7 7a00 	vldr	s15, [r7]
 8003edc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	d801      	bhi.n	8003eee <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e058      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003eee:	edd7 7a00 	vldr	s15, [r7]
 8003ef2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	d801      	bhi.n	8003f04 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e04d      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f04:	edd7 7a00 	vldr	s15, [r7]
 8003f08:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003fc8 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	d801      	bhi.n	8003f1a <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e042      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f1a:	edd7 7a00 	vldr	s15, [r7]
 8003f1e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fcc <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2a:	d801      	bhi.n	8003f30 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e037      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f30:	edd7 7a00 	vldr	s15, [r7]
 8003f34:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003fd0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	d801      	bhi.n	8003f46 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e02c      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f46:	edd7 7a00 	vldr	s15, [r7]
 8003f4a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003fd4 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d801      	bhi.n	8003f5c <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003f58:	2306      	movs	r3, #6
 8003f5a:	e021      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f5c:	edd7 7a00 	vldr	s15, [r7]
 8003f60:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003fd8 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6c:	d801      	bhi.n	8003f72 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e016      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f72:	edd7 7a00 	vldr	s15, [r7]
 8003f76:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003fdc <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d801      	bhi.n	8003f88 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003f84:	2308      	movs	r3, #8
 8003f86:	e00b      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f88:	edd7 7a00 	vldr	s15, [r7]
 8003f8c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003fe0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	d801      	bhi.n	8003f9e <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003f9a:	2309      	movs	r3, #9
 8003f9c:	e000      	b.n	8003fa0 <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003f9e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ASM330LHH_XL_ODR_12Hz5
 8003fa0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? ASM330LHH_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? ASM330LHH_XL_ODR_3333Hz
            :                    ASM330LHH_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (asm330lhh_xl_data_rate_set(&(pObj->Ctx), new_odr) != ASM330LHH_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3320      	adds	r3, #32
 8003fa6:	7bfa      	ldrb	r2, [r7, #15]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fa6e 	bl	800448c <asm330lhh_xl_data_rate_set>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ASM330LHH_ERROR;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	e000      	b.n	8003fbe <ASM330LHH_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ASM330LHH_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	42500000 	.word	0x42500000
 8003fcc:	42d00000 	.word	0x42d00000
 8003fd0:	43500000 	.word	0x43500000
 8003fd4:	43d08000 	.word	0x43d08000
 8003fd8:	44504000 	.word	0x44504000
 8003fdc:	44d06000 	.word	0x44d06000
 8003fe0:	45505000 	.word	0x45505000

08003fe4 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ASM330LHH_ACC_SetOutputDataRate_When_Disabled(ASM330LHH_Object_t *pObj, float Odr)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ASM330LHH_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ASM330LHH_XL_ODR_26Hz
 8003ff0:	edd7 7a00 	vldr	s15, [r7]
 8003ff4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	d801      	bhi.n	8004006 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004002:	2301      	movs	r3, #1
 8004004:	e058      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004006:	edd7 7a00 	vldr	s15, [r7]
 800400a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800400e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004016:	d801      	bhi.n	800401c <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004018:	2302      	movs	r3, #2
 800401a:	e04d      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800401c:	edd7 7a00 	vldr	s15, [r7]
 8004020:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80040cc <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d801      	bhi.n	8004032 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800402e:	2303      	movs	r3, #3
 8004030:	e042      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004032:	edd7 7a00 	vldr	s15, [r7]
 8004036:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80040d0 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xec>
 800403a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d801      	bhi.n	8004048 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004044:	2304      	movs	r3, #4
 8004046:	e037      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004048:	edd7 7a00 	vldr	s15, [r7]
 800404c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80040d4 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d801      	bhi.n	800405e <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800405a:	2305      	movs	r3, #5
 800405c:	e02c      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800405e:	edd7 7a00 	vldr	s15, [r7]
 8004062:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80040d8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d801      	bhi.n	8004074 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004070:	2306      	movs	r3, #6
 8004072:	e021      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004074:	edd7 7a00 	vldr	s15, [r7]
 8004078:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80040dc <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800407c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004084:	d801      	bhi.n	800408a <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004086:	2307      	movs	r3, #7
 8004088:	e016      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800408a:	edd7 7a00 	vldr	s15, [r7]
 800408e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80040e0 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d801      	bhi.n	80040a0 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800409c:	2308      	movs	r3, #8
 800409e:	e00b      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80040a0:	edd7 7a00 	vldr	s15, [r7]
 80040a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80040e4 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0x100>
 80040a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	d801      	bhi.n	80040b6 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80040b2:	2309      	movs	r3, #9
 80040b4:	e000      	b.n	80040b8 <ASM330LHH_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80040b6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ASM330LHH_XL_ODR_12Hz5
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ASM330LHH_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? ASM330LHH_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? ASM330LHH_XL_ODR_3333Hz
                  :                    ASM330LHH_XL_ODR_6667Hz;

  return ASM330LHH_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	42500000 	.word	0x42500000
 80040d0:	42d00000 	.word	0x42d00000
 80040d4:	43500000 	.word	0x43500000
 80040d8:	43d08000 	.word	0x43d08000
 80040dc:	44504000 	.word	0x44504000
 80040e0:	44d06000 	.word	0x44d06000
 80040e4:	45505000 	.word	0x45505000

080040e8 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ASM330LHH_GYRO_SetOutputDataRate_When_Enabled(ASM330LHH_Object_t *pObj, float Odr)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	ed87 0a00 	vstr	s0, [r7]
  asm330lhh_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ASM330LHH_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ASM330LHH_GY_ODR_26Hz
 80040f4:	edd7 7a00 	vldr	s15, [r7]
 80040f8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80040fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	d801      	bhi.n	800410a <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004106:	2301      	movs	r3, #1
 8004108:	e058      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800410a:	edd7 7a00 	vldr	s15, [r7]
 800410e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d801      	bhi.n	8004120 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800411c:	2302      	movs	r3, #2
 800411e:	e04d      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004120:	edd7 7a00 	vldr	s15, [r7]
 8004124:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80041e4 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	d801      	bhi.n	8004136 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004132:	2303      	movs	r3, #3
 8004134:	e042      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004136:	edd7 7a00 	vldr	s15, [r7]
 800413a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80041e8 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800413e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d801      	bhi.n	800414c <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004148:	2304      	movs	r3, #4
 800414a:	e037      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800414c:	edd7 7a00 	vldr	s15, [r7]
 8004150:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80041ec <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	d801      	bhi.n	8004162 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800415e:	2305      	movs	r3, #5
 8004160:	e02c      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004162:	edd7 7a00 	vldr	s15, [r7]
 8004166:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80041f0 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800416a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004172:	d801      	bhi.n	8004178 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004174:	2306      	movs	r3, #6
 8004176:	e021      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004178:	edd7 7a00 	vldr	s15, [r7]
 800417c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80041f4 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	d801      	bhi.n	800418e <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800418a:	2307      	movs	r3, #7
 800418c:	e016      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800418e:	edd7 7a00 	vldr	s15, [r7]
 8004192:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80041f8 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	d801      	bhi.n	80041a4 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80041a0:	2308      	movs	r3, #8
 80041a2:	e00b      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80041a4:	edd7 7a00 	vldr	s15, [r7]
 80041a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80041fc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80041ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	d801      	bhi.n	80041ba <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80041b6:	2309      	movs	r3, #9
 80041b8:	e000      	b.n	80041bc <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80041ba:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ASM330LHH_GY_ODR_12Hz5
 80041bc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? ASM330LHH_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? ASM330LHH_GY_ODR_3333Hz
            :                    ASM330LHH_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (asm330lhh_gy_data_rate_set(&(pObj->Ctx), new_odr) != ASM330LHH_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3320      	adds	r3, #32
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fa60 	bl	800468c <asm330lhh_gy_data_rate_set>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ASM330LHH_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e000      	b.n	80041da <ASM330LHH_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ASM330LHH_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	42500000 	.word	0x42500000
 80041e8:	42d00000 	.word	0x42d00000
 80041ec:	43500000 	.word	0x43500000
 80041f0:	43d08000 	.word	0x43d08000
 80041f4:	44504000 	.word	0x44504000
 80041f8:	44d06000 	.word	0x44d06000
 80041fc:	45505000 	.word	0x45505000

08004200 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ASM330LHH_GYRO_SetOutputDataRate_When_Disabled(ASM330LHH_Object_t *pObj, float Odr)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ASM330LHH_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ASM330LHH_GY_ODR_26Hz
 800420c:	edd7 7a00 	vldr	s15, [r7]
 8004210:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d801      	bhi.n	8004222 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800421e:	2301      	movs	r3, #1
 8004220:	e058      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004222:	edd7 7a00 	vldr	s15, [r7]
 8004226:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800422a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004232:	d801      	bhi.n	8004238 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004234:	2302      	movs	r3, #2
 8004236:	e04d      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004238:	edd7 7a00 	vldr	s15, [r7]
 800423c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80042e8 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	d801      	bhi.n	800424e <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800424a:	2303      	movs	r3, #3
 800424c:	e042      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800424e:	edd7 7a00 	vldr	s15, [r7]
 8004252:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80042ec <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d801      	bhi.n	8004264 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004260:	2304      	movs	r3, #4
 8004262:	e037      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004264:	edd7 7a00 	vldr	s15, [r7]
 8004268:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80042f0 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800426c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004274:	d801      	bhi.n	800427a <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004276:	2305      	movs	r3, #5
 8004278:	e02c      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800427a:	edd7 7a00 	vldr	s15, [r7]
 800427e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80042f4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428a:	d801      	bhi.n	8004290 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800428c:	2306      	movs	r3, #6
 800428e:	e021      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004290:	edd7 7a00 	vldr	s15, [r7]
 8004294:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80042f8 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a0:	d801      	bhi.n	80042a6 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80042a2:	2307      	movs	r3, #7
 80042a4:	e016      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80042a6:	edd7 7a00 	vldr	s15, [r7]
 80042aa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80042fc <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80042ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	d801      	bhi.n	80042bc <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80042b8:	2308      	movs	r3, #8
 80042ba:	e00b      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80042bc:	edd7 7a00 	vldr	s15, [r7]
 80042c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004300 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	d801      	bhi.n	80042d2 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80042ce:	2309      	movs	r3, #9
 80042d0:	e000      	b.n	80042d4 <ASM330LHH_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80042d2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ASM330LHH_GY_ODR_12Hz5
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ASM330LHH_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? ASM330LHH_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? ASM330LHH_GY_ODR_3333Hz
                   :                    ASM330LHH_GY_ODR_6667Hz;

  return ASM330LHH_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	42500000 	.word	0x42500000
 80042ec:	42d00000 	.word	0x42d00000
 80042f0:	43500000 	.word	0x43500000
 80042f4:	43d08000 	.word	0x43d08000
 80042f8:	44504000 	.word	0x44504000
 80042fc:	44d06000 	.word	0x44d06000
 8004300:	45505000 	.word	0x45505000

08004304 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	460b      	mov	r3, r1
 8004312:	72fb      	strb	r3, [r7, #11]
 8004314:	4613      	mov	r3, r2
 8004316:	813b      	strh	r3, [r7, #8]
  ASM330LHH_Object_t *pObj = (ASM330LHH_Object_t *)Handle;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	695c      	ldr	r4, [r3, #20]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	7b1b      	ldrb	r3, [r3, #12]
 8004324:	b298      	uxth	r0, r3
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	b299      	uxth	r1, r3
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	47a0      	blx	r4
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd90      	pop	{r4, r7, pc}

0800433a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800433a:	b590      	push	{r4, r7, lr}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	460b      	mov	r3, r1
 8004348:	72fb      	strb	r3, [r7, #11]
 800434a:	4613      	mov	r3, r2
 800434c:	813b      	strh	r3, [r7, #8]
  ASM330LHH_Object_t *pObj = (ASM330LHH_Object_t *)Handle;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	691c      	ldr	r4, [r3, #16]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	7b1b      	ldrb	r3, [r3, #12]
 800435a:	b298      	uxth	r0, r3
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	b299      	uxth	r1, r3
 8004360:	893b      	ldrh	r3, [r7, #8]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	47a0      	blx	r4
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}

08004370 <asm330lhh_read_reg>:
  *
  */
int32_t asm330lhh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	460b      	mov	r3, r1
 800437e:	72fb      	strb	r3, [r7, #11]
 8004380:	4613      	mov	r3, r2
 8004382:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68d8      	ldr	r0, [r3, #12]
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	7af9      	ldrb	r1, [r7, #11]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	47a0      	blx	r4
 8004394:	6178      	str	r0, [r7, #20]

  return ret;
 8004396:	697b      	ldr	r3, [r7, #20]
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}

080043a0 <asm330lhh_write_reg>:
  *
  */
int32_t asm330lhh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	461a      	mov	r2, r3
 80043ac:	460b      	mov	r3, r1
 80043ae:	72fb      	strb	r3, [r7, #11]
 80043b0:	4613      	mov	r3, r2
 80043b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681c      	ldr	r4, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68d8      	ldr	r0, [r3, #12]
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	7af9      	ldrb	r1, [r7, #11]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	47a0      	blx	r4
 80043c4:	6178      	str	r0, [r7, #20]

  return ret;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <asm330lhh_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    asm330lhh_fs_xl_t val)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL,
 80043dc:	f107 0208 	add.w	r2, r7, #8
 80043e0:	2301      	movs	r3, #1
 80043e2:	2110      	movs	r1, #16
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ffc3 	bl	8004370 <asm330lhh_read_reg>
 80043ea:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <asm330lhh_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	7a3b      	ldrb	r3, [r7, #8]
 80043fc:	f362 0383 	bfi	r3, r2, #2, #2
 8004400:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL,
 8004402:	f107 0208 	add.w	r2, r7, #8
 8004406:	2301      	movs	r3, #1
 8004408:	2110      	movs	r1, #16
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ffc8 	bl	80043a0 <asm330lhh_write_reg>
 8004410:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <asm330lhh_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    asm330lhh_fs_xl_t *val)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL,
 8004426:	f107 0208 	add.w	r2, r7, #8
 800442a:	2301      	movs	r3, #1
 800442c:	2110      	movs	r1, #16
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ff9e 	bl	8004370 <asm330lhh_read_reg>
 8004434:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8004436:	7a3b      	ldrb	r3, [r7, #8]
 8004438:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b03      	cmp	r3, #3
 8004440:	d81a      	bhi.n	8004478 <asm330lhh_xl_full_scale_get+0x5c>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <asm330lhh_xl_full_scale_get+0x2c>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004459 	.word	0x08004459
 800444c:	08004461 	.word	0x08004461
 8004450:	08004469 	.word	0x08004469
 8004454:	08004471 	.word	0x08004471
  {
    case ASM330LHH_2g:
      *val = ASM330LHH_2g;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
      break;
 800445e:	e00f      	b.n	8004480 <asm330lhh_xl_full_scale_get+0x64>

    case ASM330LHH_16g:
      *val = ASM330LHH_16g;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
      break;
 8004466:	e00b      	b.n	8004480 <asm330lhh_xl_full_scale_get+0x64>

    case ASM330LHH_4g:
      *val = ASM330LHH_4g;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e007      	b.n	8004480 <asm330lhh_xl_full_scale_get+0x64>

    case ASM330LHH_8g:
      *val = ASM330LHH_8g;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2203      	movs	r2, #3
 8004474:	701a      	strb	r2, [r3, #0]
      break;
 8004476:	e003      	b.n	8004480 <asm330lhh_xl_full_scale_get+0x64>

    default:
      *val = ASM330LHH_2g;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
      break;
 800447e:	bf00      	nop
  }

  return ret;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop

0800448c <asm330lhh_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   asm330lhh_odr_xl_t val)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL,
 8004498:	f107 0208 	add.w	r2, r7, #8
 800449c:	2301      	movs	r3, #1
 800449e:	2110      	movs	r1, #16
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff65 	bl	8004370 <asm330lhh_read_reg>
 80044a6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <asm330lhh_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	7a3b      	ldrb	r3, [r7, #8]
 80044b8:	f362 1307 	bfi	r3, r2, #4, #4
 80044bc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL1_XL,
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	2301      	movs	r3, #1
 80044c4:	2110      	movs	r1, #16
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ff6a 	bl	80043a0 <asm330lhh_write_reg>
 80044cc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <asm330lhh_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   asm330lhh_odr_xl_t *val)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL1_XL,
 80044e2:	f107 0208 	add.w	r2, r7, #8
 80044e6:	2301      	movs	r3, #1
 80044e8:	2110      	movs	r1, #16
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff40 	bl	8004370 <asm330lhh_read_reg>
 80044f0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 80044f2:	7a3b      	ldrb	r3, [r7, #8]
 80044f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b0a      	cmp	r3, #10
 80044fc:	d844      	bhi.n	8004588 <asm330lhh_xl_data_rate_get+0xb0>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <asm330lhh_xl_data_rate_get+0x2c>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004531 	.word	0x08004531
 8004508:	08004539 	.word	0x08004539
 800450c:	08004541 	.word	0x08004541
 8004510:	08004549 	.word	0x08004549
 8004514:	08004551 	.word	0x08004551
 8004518:	08004559 	.word	0x08004559
 800451c:	08004561 	.word	0x08004561
 8004520:	08004569 	.word	0x08004569
 8004524:	08004571 	.word	0x08004571
 8004528:	08004579 	.word	0x08004579
 800452c:	08004581 	.word	0x08004581
  {
    case ASM330LHH_XL_ODR_OFF:
      *val = ASM330LHH_XL_ODR_OFF;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
      break;
 8004536:	e02b      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_12Hz5:
      *val = ASM330LHH_XL_ODR_12Hz5;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
      break;
 800453e:	e027      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_26Hz:
      *val = ASM330LHH_XL_ODR_26Hz;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2202      	movs	r2, #2
 8004544:	701a      	strb	r2, [r3, #0]
      break;
 8004546:	e023      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_52Hz:
      *val = ASM330LHH_XL_ODR_52Hz;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2203      	movs	r2, #3
 800454c:	701a      	strb	r2, [r3, #0]
      break;
 800454e:	e01f      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_104Hz:
      *val = ASM330LHH_XL_ODR_104Hz;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2204      	movs	r2, #4
 8004554:	701a      	strb	r2, [r3, #0]
      break;
 8004556:	e01b      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_208Hz:
      *val = ASM330LHH_XL_ODR_208Hz;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2205      	movs	r2, #5
 800455c:	701a      	strb	r2, [r3, #0]
      break;
 800455e:	e017      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_417Hz:
      *val = ASM330LHH_XL_ODR_417Hz;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2206      	movs	r2, #6
 8004564:	701a      	strb	r2, [r3, #0]
      break;
 8004566:	e013      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_833Hz:
      *val = ASM330LHH_XL_ODR_833Hz;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2207      	movs	r2, #7
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e00f      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_1667Hz:
      *val = ASM330LHH_XL_ODR_1667Hz;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e00b      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_3333Hz:
      *val = ASM330LHH_XL_ODR_3333Hz;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2209      	movs	r2, #9
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e007      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    case ASM330LHH_XL_ODR_6667Hz:
      *val = ASM330LHH_XL_ODR_6667Hz;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	220a      	movs	r2, #10
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e003      	b.n	8004590 <asm330lhh_xl_data_rate_get+0xb8>

    default:
      *val = ASM330LHH_XL_ODR_OFF;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	bf00      	nop
  }

  return ret;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop

0800459c <asm330lhh_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    asm330lhh_fs_g_t val)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80045a8:	f107 0208 	add.w	r2, r7, #8
 80045ac:	2301      	movs	r3, #1
 80045ae:	2111      	movs	r1, #17
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fedd 	bl	8004370 <asm330lhh_read_reg>
 80045b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <asm330lhh_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	7a3b      	ldrb	r3, [r7, #8]
 80045c8:	f362 0303 	bfi	r3, r2, #0, #4
 80045cc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80045ce:	f107 0208 	add.w	r2, r7, #8
 80045d2:	2301      	movs	r3, #1
 80045d4:	2111      	movs	r1, #17
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fee2 	bl	80043a0 <asm330lhh_write_reg>
 80045dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <asm330lhh_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_gy_full_scale_get(stmdev_ctx_t *ctx,
                                    asm330lhh_fs_g_t *val)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80045f2:	f107 0208 	add.w	r2, r7, #8
 80045f6:	2301      	movs	r3, #1
 80045f8:	2111      	movs	r1, #17
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff feb8 	bl	8004370 <asm330lhh_read_reg>
 8004600:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 8004602:	7a3b      	ldrb	r3, [r7, #8]
 8004604:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d834      	bhi.n	8004678 <asm330lhh_gy_full_scale_get+0x90>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <asm330lhh_gy_full_scale_get+0x2c>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004651 	.word	0x08004651
 8004618:	08004671 	.word	0x08004671
 800461c:	08004649 	.word	0x08004649
 8004620:	08004679 	.word	0x08004679
 8004624:	08004659 	.word	0x08004659
 8004628:	08004679 	.word	0x08004679
 800462c:	08004679 	.word	0x08004679
 8004630:	08004679 	.word	0x08004679
 8004634:	08004661 	.word	0x08004661
 8004638:	08004679 	.word	0x08004679
 800463c:	08004679 	.word	0x08004679
 8004640:	08004679 	.word	0x08004679
 8004644:	08004669 	.word	0x08004669
  {
    case ASM330LHH_125dps:
      *val = ASM330LHH_125dps;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
      break;
 800464e:	e017      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    case ASM330LHH_250dps:
      *val = ASM330LHH_250dps;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
      break;
 8004656:	e013      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    case ASM330LHH_500dps:
      *val = ASM330LHH_500dps;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2204      	movs	r2, #4
 800465c:	701a      	strb	r2, [r3, #0]
      break;
 800465e:	e00f      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    case ASM330LHH_1000dps:
      *val = ASM330LHH_1000dps;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2208      	movs	r2, #8
 8004664:	701a      	strb	r2, [r3, #0]
      break;
 8004666:	e00b      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    case ASM330LHH_2000dps:
      *val = ASM330LHH_2000dps;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	220c      	movs	r2, #12
 800466c:	701a      	strb	r2, [r3, #0]
      break;
 800466e:	e007      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    case ASM330LHH_4000dps:
      *val = ASM330LHH_4000dps;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e003      	b.n	8004680 <asm330lhh_gy_full_scale_get+0x98>

    default:
      *val = ASM330LHH_125dps;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
      break;
 800467e:	bf00      	nop
  }

  return ret;
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <asm330lhh_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   asm330lhh_odr_g_t val)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004698:	f107 0208 	add.w	r2, r7, #8
 800469c:	2301      	movs	r3, #1
 800469e:	2111      	movs	r1, #17
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff fe65 	bl	8004370 <asm330lhh_read_reg>
 80046a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <asm330lhh_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	7a3b      	ldrb	r3, [r7, #8]
 80046b8:	f362 1307 	bfi	r3, r2, #4, #4
 80046bc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80046be:	f107 0208 	add.w	r2, r7, #8
 80046c2:	2301      	movs	r3, #1
 80046c4:	2111      	movs	r1, #17
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fe6a 	bl	80043a0 <asm330lhh_write_reg>
 80046cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <asm330lhh_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_gy_data_rate_get(stmdev_ctx_t *ctx,
                                   asm330lhh_odr_g_t *val)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  asm330lhh_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80046e2:	f107 0208 	add.w	r2, r7, #8
 80046e6:	2301      	movs	r3, #1
 80046e8:	2111      	movs	r1, #17
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe40 	bl	8004370 <asm330lhh_read_reg>
 80046f0:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 80046f2:	7a3b      	ldrb	r3, [r7, #8]
 80046f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b0a      	cmp	r3, #10
 80046fc:	d844      	bhi.n	8004788 <asm330lhh_gy_data_rate_get+0xb0>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <asm330lhh_gy_data_rate_get+0x2c>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004731 	.word	0x08004731
 8004708:	08004739 	.word	0x08004739
 800470c:	08004741 	.word	0x08004741
 8004710:	08004749 	.word	0x08004749
 8004714:	08004751 	.word	0x08004751
 8004718:	08004759 	.word	0x08004759
 800471c:	08004761 	.word	0x08004761
 8004720:	08004769 	.word	0x08004769
 8004724:	08004771 	.word	0x08004771
 8004728:	08004779 	.word	0x08004779
 800472c:	08004781 	.word	0x08004781
  {
    case ASM330LHH_GY_ODR_OFF:
      *val = ASM330LHH_GY_ODR_OFF;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
      break;
 8004736:	e02b      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_12Hz5:
      *val = ASM330LHH_GY_ODR_12Hz5;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
      break;
 800473e:	e027      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_26Hz:
      *val = ASM330LHH_GY_ODR_26Hz;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2202      	movs	r2, #2
 8004744:	701a      	strb	r2, [r3, #0]
      break;
 8004746:	e023      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_52Hz:
      *val = ASM330LHH_GY_ODR_52Hz;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2203      	movs	r2, #3
 800474c:	701a      	strb	r2, [r3, #0]
      break;
 800474e:	e01f      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_104Hz:
      *val = ASM330LHH_GY_ODR_104Hz;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2204      	movs	r2, #4
 8004754:	701a      	strb	r2, [r3, #0]
      break;
 8004756:	e01b      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_208Hz:
      *val = ASM330LHH_GY_ODR_208Hz;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2205      	movs	r2, #5
 800475c:	701a      	strb	r2, [r3, #0]
      break;
 800475e:	e017      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_417Hz:
      *val = ASM330LHH_GY_ODR_417Hz;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2206      	movs	r2, #6
 8004764:	701a      	strb	r2, [r3, #0]
      break;
 8004766:	e013      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_833Hz:
      *val = ASM330LHH_GY_ODR_833Hz;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2207      	movs	r2, #7
 800476c:	701a      	strb	r2, [r3, #0]
      break;
 800476e:	e00f      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_1667Hz:
      *val = ASM330LHH_GY_ODR_1667Hz;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2208      	movs	r2, #8
 8004774:	701a      	strb	r2, [r3, #0]
      break;
 8004776:	e00b      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_3333Hz:
      *val = ASM330LHH_GY_ODR_3333Hz;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2209      	movs	r2, #9
 800477c:	701a      	strb	r2, [r3, #0]
      break;
 800477e:	e007      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    case ASM330LHH_GY_ODR_6667Hz:
      *val = ASM330LHH_GY_ODR_6667Hz;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	220a      	movs	r2, #10
 8004784:	701a      	strb	r2, [r3, #0]
      break;
 8004786:	e003      	b.n	8004790 <asm330lhh_gy_data_rate_get+0xb8>

    default:
      *val = ASM330LHH_GY_ODR_OFF;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
      break;
 800478e:	bf00      	nop
  }

  return ret;
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop

0800479c <asm330lhh_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047a8:	f107 0208 	add.w	r2, r7, #8
 80047ac:	2301      	movs	r3, #1
 80047ae:	2112      	movs	r1, #18
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fddd 	bl	8004370 <asm330lhh_read_reg>
 80047b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <asm330lhh_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	7a3b      	ldrb	r3, [r7, #8]
 80047c8:	f362 1386 	bfi	r3, r2, #6, #1
 80047cc:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	2301      	movs	r3, #1
 80047d4:	2112      	movs	r1, #18
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fde2 	bl	80043a0 <asm330lhh_write_reg>
 80047dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <asm330lhh_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_G, buff, 6);
 80047f2:	f107 020c 	add.w	r2, r7, #12
 80047f6:	2306      	movs	r3, #6
 80047f8:	2122      	movs	r1, #34	; 0x22
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fdb8 	bl	8004370 <asm330lhh_read_reg>
 8004800:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004802:	7b7b      	ldrb	r3, [r7, #13]
 8004804:	b21a      	sxth	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004810:	b29b      	uxth	r3, r3
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	b29a      	uxth	r2, r3
 8004816:	7b3b      	ldrb	r3, [r7, #12]
 8004818:	b29b      	uxth	r3, r3
 800481a:	4413      	add	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	b21a      	sxth	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3302      	adds	r3, #2
 800482a:	b212      	sxth	r2, r2
 800482c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	3302      	adds	r3, #2
 8004832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004836:	b29b      	uxth	r3, r3
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b29a      	uxth	r2, r3
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	b29b      	uxth	r3, r3
 8004840:	4413      	add	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	3302      	adds	r3, #2
 8004848:	b212      	sxth	r2, r2
 800484a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800484c:	7c7a      	ldrb	r2, [r7, #17]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	3304      	adds	r3, #4
 8004852:	b212      	sxth	r2, r2
 8004854:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800485e:	b29b      	uxth	r3, r3
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	b29a      	uxth	r2, r3
 8004864:	7c3b      	ldrb	r3, [r7, #16]
 8004866:	b29b      	uxth	r3, r3
 8004868:	4413      	add	r3, r2
 800486a:	b29a      	uxth	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	3304      	adds	r3, #4
 8004870:	b212      	sxth	r2, r2
 8004872:	801a      	strh	r2, [r3, #0]

  return ret;
 8004874:	697b      	ldr	r3, [r7, #20]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <asm330lhh_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_OUTX_L_A, buff, 6);
 8004888:	f107 020c 	add.w	r2, r7, #12
 800488c:	2306      	movs	r3, #6
 800488e:	2128      	movs	r1, #40	; 0x28
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fd6d 	bl	8004370 <asm330lhh_read_reg>
 8004896:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004898:	7b7b      	ldrb	r3, [r7, #13]
 800489a:	b21a      	sxth	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	7b3b      	ldrb	r3, [r7, #12]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	b21a      	sxth	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	3302      	adds	r3, #2
 80048c0:	b212      	sxth	r2, r2
 80048c2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	3302      	adds	r3, #2
 80048c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	b29a      	uxth	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	3302      	adds	r3, #2
 80048de:	b212      	sxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80048e2:	7c7a      	ldrb	r2, [r7, #17]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	3304      	adds	r3, #4
 80048e8:	b212      	sxth	r2, r2
 80048ea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3304      	adds	r3, #4
 80048f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	7c3b      	ldrb	r3, [r7, #16]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4413      	add	r3, r2
 8004900:	b29a      	uxth	r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	3304      	adds	r3, #4
 8004906:	b212      	sxth	r2, r2
 8004908:	801a      	strh	r2, [r3, #0]

  return ret;
 800490a:	697b      	ldr	r3, [r7, #20]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <asm330lhh_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL9_XL,
 8004920:	f107 0208 	add.w	r2, r7, #8
 8004924:	2301      	movs	r3, #1
 8004926:	2118      	movs	r1, #24
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fd21 	bl	8004370 <asm330lhh_read_reg>
 800492e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <asm330lhh_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	7a3b      	ldrb	r3, [r7, #8]
 8004940:	f362 0341 	bfi	r3, r2, #1, #1
 8004944:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL9_XL,
 8004946:	f107 0208 	add.w	r2, r7, #8
 800494a:	2301      	movs	r3, #1
 800494c:	2118      	movs	r1, #24
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fd26 	bl	80043a0 <asm330lhh_write_reg>
 8004954:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <asm330lhh_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_WHO_AM_I, buff, 1);
 800496a:	2301      	movs	r3, #1
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	210f      	movs	r1, #15
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fcfd 	bl	8004370 <asm330lhh_read_reg>
 8004976:	60f8      	str	r0, [r7, #12]

  return ret;
 8004978:	68fb      	ldr	r3, [r7, #12]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <asm330lhh_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  asm330lhh_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	2301      	movs	r3, #1
 8004994:	2112      	movs	r1, #18
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fcea 	bl	8004370 <asm330lhh_read_reg>
 800499c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10f      	bne.n	80049c4 <asm330lhh_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	7a3b      	ldrb	r3, [r7, #8]
 80049ae:	f362 0382 	bfi	r3, r2, #2, #1
 80049b2:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80049b4:	f107 0208 	add.w	r2, r7, #8
 80049b8:	2301      	movs	r3, #1
 80049ba:	2112      	movs	r1, #18
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fcef 	bl	80043a0 <asm330lhh_write_reg>
 80049c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <asm330lhh_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t asm330lhh_fifo_mode_set(stmdev_ctx_t *ctx,
                                asm330lhh_fifo_mode_t val)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	70fb      	strb	r3, [r7, #3]
  asm330lhh_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = asm330lhh_read_reg(ctx, ASM330LHH_FIFO_CTRL4,
 80049da:	f107 0208 	add.w	r2, r7, #8
 80049de:	2301      	movs	r3, #1
 80049e0:	210a      	movs	r1, #10
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fcc4 	bl	8004370 <asm330lhh_read_reg>
 80049e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10f      	bne.n	8004a10 <asm330lhh_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	7a3b      	ldrb	r3, [r7, #8]
 80049fa:	f362 0302 	bfi	r3, r2, #0, #3
 80049fe:	723b      	strb	r3, [r7, #8]
    ret = asm330lhh_write_reg(ctx, ASM330LHH_FIFO_CTRL4,
 8004a00:	f107 0208 	add.w	r2, r7, #8
 8004a04:	2301      	movs	r3, #1
 8004a06:	210a      	movs	r1, #10
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fcc9 	bl	80043a0 <asm330lhh_write_reg>
 8004a0e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <BSP_LED_Init+0x20>)
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	0800cc00 	.word	0x0800cc00

08004a40 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <BSP_LED_On+0x28>)
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a56:	2201      	movs	r2, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ff03 	bl	8005864 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000074 	.word	0x20000074

08004a6c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <BSP_LED_Off+0x28>)
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a82:	2200      	movs	r2, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 feed 	bl	8005864 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000074 	.word	0x20000074

08004a98 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004aa4:	f043 0320 	orr.w	r3, r3, #32
 8004aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004acc:	f043 0320 	orr.w	r3, r3, #32
 8004ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <LED_USER_GPIO_Init+0x78>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ae4:	480b      	ldr	r0, [pc, #44]	; (8004b14 <LED_USER_GPIO_Init+0x7c>)
 8004ae6:	f000 febd 	bl	8005864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8004aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af0:	2301      	movs	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	4619      	mov	r1, r3
 8004b02:	4804      	ldr	r0, [pc, #16]	; (8004b14 <LED_USER_GPIO_Init+0x7c>)
 8004b04:	f000 fc2a 	bl	800535c <HAL_GPIO_Init>

}
 8004b08:	bf00      	nop
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	48001400 	.word	0x48001400

08004b18 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d903      	bls.n	8004b34 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b2c:	f06f 0301 	mvn.w	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e025      	b.n	8004b80 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	79fa      	ldrb	r2, [r7, #7]
 8004b38:	4914      	ldr	r1, [pc, #80]	; (8004b8c <BSP_COM_Init+0x74>)
 8004b3a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b3e:	4814      	ldr	r0, [pc, #80]	; (8004b90 <BSP_COM_Init+0x78>)
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	4403      	add	r3, r0
 8004b4a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8004b4c:	79fa      	ldrb	r2, [r7, #7]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <BSP_COM_Init+0x78>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f86c 	bl	8004c38 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8004b60:	79fa      	ldrb	r2, [r7, #7]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <BSP_COM_Init+0x78>)
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f810 	bl	8004b94 <MX_USART1_UART_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b7a:	f06f 0303 	mvn.w	r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000078 	.word	0x20000078
 8004b90:	200014b0 	.word	0x200014b0

08004b94 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <MX_USART1_UART_Init+0xa0>)
 8004ba4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bac:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	220c      	movs	r2, #12
 8004bc4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f004 f959 	bl	8008e9c <HAL_UART_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f005 f9eb 	bl	8009fd2 <HAL_UARTEx_SetTxFifoThreshold>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f005 fa20 	bl	800a04e <HAL_UARTEx_SetRxFifoThreshold>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f005 f9a1 	bl	8009f60 <HAL_UARTEx_DisableFifoMode>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40013800 	.word	0x40013800

08004c38 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0b0      	sub	sp, #192	; 0xc0
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c40:	f107 0310 	add.w	r3, r7, #16
 8004c44:	229c      	movs	r2, #156	; 0x9c
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f007 fac5 	bl	800c1d8 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c52:	2300      	movs	r3, #0
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004c56:	f107 0310 	add.w	r3, r7, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 fdb6 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c60:	4b22      	ldr	r3, [pc, #136]	; (8004cec <USART1_MspInit+0xb4>)
 8004c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c64:	4a21      	ldr	r2, [pc, #132]	; (8004cec <USART1_MspInit+0xb4>)
 8004c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8004c6c:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <USART1_MspInit+0xb4>)
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <USART1_MspInit+0xb4>)
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <USART1_MspInit+0xb4>)
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <USART1_MspInit+0xb4>)
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8004ca8:	2307      	movs	r3, #7
 8004caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8004cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	480e      	ldr	r0, [pc, #56]	; (8004cf0 <USART1_MspInit+0xb8>)
 8004cb6:	f000 fb51 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8004cd2:	2307      	movs	r3, #7
 8004cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8004cd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4804      	ldr	r0, [pc, #16]	; (8004cf0 <USART1_MspInit+0xb8>)
 8004ce0:	f000 fb3c 	bl	800535c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8004ce4:	bf00      	nop
 8004ce6:	37c0      	adds	r7, #192	; 0xc0
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	48000400 	.word	0x48000400

08004cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <SystemInit+0x20>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <SystemInit+0x20>)
 8004d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d22:	2003      	movs	r0, #3
 8004d24:	f000 f942 	bl	8004fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d28:	200f      	movs	r0, #15
 8004d2a:	f000 f80d 	bl	8004d48 <HAL_InitTick>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	71fb      	strb	r3, [r7, #7]
 8004d38:	e001      	b.n	8004d3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d3a:	f7fc fa61 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <HAL_InitTick+0x6c>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d023      	beq.n	8004da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_InitTick+0x70>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <HAL_InitTick+0x6c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f941 	bl	8004ffa <HAL_SYSTICK_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b0f      	cmp	r3, #15
 8004d82:	d809      	bhi.n	8004d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d84:	2200      	movs	r2, #0
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f000 f919 	bl	8004fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_InitTick+0x74>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e007      	b.n	8004da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e004      	b.n	8004da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	e001      	b.n	8004da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000084 	.word	0x20000084
 8004db8:	2000007c 	.word	0x2000007c
 8004dbc:	20000080 	.word	0x20000080

08004dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_IncTick+0x20>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_IncTick+0x24>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <HAL_IncTick+0x24>)
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000084 	.word	0x20000084
 8004de4:	20001540 	.word	0x20001540

08004de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return uwTick;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_GetTick+0x14>)
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20001540 	.word	0x20001540

08004e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e08:	f7ff ffee 	bl	8004de8 <HAL_GetTick>
 8004e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d005      	beq.n	8004e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_Delay+0x44>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e26:	bf00      	nop
 8004e28:	f7ff ffde 	bl	8004de8 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d8f7      	bhi.n	8004e28 <HAL_Delay+0x28>
  {
  }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000084 	.word	0x20000084

08004e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	60d3      	str	r3, [r2, #12]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 0307 	and.w	r3, r3, #7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db0a      	blt.n	8004ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	490c      	ldr	r1, [pc, #48]	; (8004ef8 <__NVIC_SetPriority+0x4c>)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	440b      	add	r3, r1
 8004ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ed4:	e00a      	b.n	8004eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4908      	ldr	r1, [pc, #32]	; (8004efc <__NVIC_SetPriority+0x50>)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	0112      	lsls	r2, r2, #4
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	440b      	add	r3, r1
 8004eea:	761a      	strb	r2, [r3, #24]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	e000e100 	.word	0xe000e100
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f1c3 0307 	rsb	r3, r3, #7
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	bf28      	it	cs
 8004f1e:	2304      	movcs	r3, #4
 8004f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3304      	adds	r3, #4
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d902      	bls.n	8004f30 <NVIC_EncodePriority+0x30>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3b03      	subs	r3, #3
 8004f2e:	e000      	b.n	8004f32 <NVIC_EncodePriority+0x32>
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	401a      	ands	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f48:	f04f 31ff 	mov.w	r1, #4294967295
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	43d9      	mvns	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f58:	4313      	orrs	r3, r2
         );
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f78:	d301      	bcc.n	8004f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00f      	b.n	8004f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <SysTick_Config+0x40>)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f86:	210f      	movs	r1, #15
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f7ff ff8e 	bl	8004eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <SysTick_Config+0x40>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <SysTick_Config+0x40>)
 8004f98:	2207      	movs	r2, #7
 8004f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	e000e010 	.word	0xe000e010

08004fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff47 	bl	8004e48 <__NVIC_SetPriorityGrouping>
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	4603      	mov	r3, r0
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd4:	f7ff ff5c 	bl	8004e90 <__NVIC_GetPriorityGrouping>
 8004fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	6978      	ldr	r0, [r7, #20]
 8004fe0:	f7ff ff8e 	bl	8004f00 <NVIC_EncodePriority>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff5d 	bl	8004eac <__NVIC_SetPriority>
}
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ffb0 	bl	8004f68 <SysTick_Config>
 8005008:	4603      	mov	r3, r0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e054      	b.n	80050d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7f5b      	ldrb	r3, [r3, #29]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc f906 	bl	8001248 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	791b      	ldrb	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <HAL_CRC_Init+0xc4>)
 8005050:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0218 	bic.w	r2, r2, #24
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	e00c      	b.n	800507e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	461a      	mov	r2, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f834 	bl	80050dc <HAL_CRCEx_Polynomial_Set>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e028      	b.n	80050d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	795b      	ldrb	r3, [r3, #5]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	611a      	str	r2, [r3, #16]
 8005090:	e004      	b.n	800509c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6912      	ldr	r2, [r2, #16]
 800509a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	04c11db7 	.word	0x04c11db7

080050dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80050ec:	231f      	movs	r3, #31
 80050ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80050f0:	bf00      	nop
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	613a      	str	r2, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <HAL_CRCEx_Polynomial_Set+0x34>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b18      	cmp	r3, #24
 8005114:	d846      	bhi.n	80051a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	080051ab 	.word	0x080051ab
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080051a5 	.word	0x080051a5
 8005128:	080051a5 	.word	0x080051a5
 800512c:	080051a5 	.word	0x080051a5
 8005130:	080051a5 	.word	0x080051a5
 8005134:	080051a5 	.word	0x080051a5
 8005138:	080051a5 	.word	0x080051a5
 800513c:	08005199 	.word	0x08005199
 8005140:	080051a5 	.word	0x080051a5
 8005144:	080051a5 	.word	0x080051a5
 8005148:	080051a5 	.word	0x080051a5
 800514c:	080051a5 	.word	0x080051a5
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080051a5 	.word	0x080051a5
 8005158:	080051a5 	.word	0x080051a5
 800515c:	0800518d 	.word	0x0800518d
 8005160:	080051a5 	.word	0x080051a5
 8005164:	080051a5 	.word	0x080051a5
 8005168:	080051a5 	.word	0x080051a5
 800516c:	080051a5 	.word	0x080051a5
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080051a5 	.word	0x080051a5
 8005178:	080051a5 	.word	0x080051a5
 800517c:	08005181 	.word	0x08005181
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b06      	cmp	r3, #6
 8005184:	d913      	bls.n	80051ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800518a:	e010      	b.n	80051ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b07      	cmp	r3, #7
 8005190:	d90f      	bls.n	80051b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005196:	e00c      	b.n	80051b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d90b      	bls.n	80051b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051a2:	e008      	b.n	80051b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	e006      	b.n	80051b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051aa:	bf00      	nop
 80051ac:	e004      	b.n	80051b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051ae:	bf00      	nop
 80051b0:	e002      	b.n	80051b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 0118 	bic.w	r1, r3, #24
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_DMA_Start_IT+0x20>
 8005204:	2302      	movs	r3, #2
 8005206:	e066      	b.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d155      	bne.n	80052c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f84c 	bl	80052de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 020e 	orr.w	r2, r2, #14
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e00f      	b.n	8005280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0204 	bic.w	r2, r2, #4
 800526e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 020a 	orr.w	r2, r2, #10
 800527e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e005      	b.n	80052d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
 80052d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052f4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005306:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f003 021c 	and.w	r2, r3, #28
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f202 	lsl.w	r2, r1, r2
 800531a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b10      	cmp	r3, #16
 800532a:	d108      	bne.n	800533e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800533c:	e007      	b.n	800534e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800536a:	e166      	b.n	800563a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8158 	beq.w	8005634 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d005      	beq.n	800539c <HAL_GPIO_Init+0x40>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d130      	bne.n	80053fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053d2:	2201      	movs	r2, #1
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4013      	ands	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0201 	and.w	r2, r3, #1
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d017      	beq.n	800543a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d123      	bne.n	800548e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	08da      	lsrs	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3208      	adds	r2, #8
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	08da      	lsrs	r2, r3, #3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3208      	adds	r2, #8
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80b2 	beq.w	8005634 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <HAL_GPIO_Init+0x2fc>)
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	4a60      	ldr	r2, [pc, #384]	; (8005658 <HAL_GPIO_Init+0x2fc>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6613      	str	r3, [r2, #96]	; 0x60
 80054dc:	4b5e      	ldr	r3, [pc, #376]	; (8005658 <HAL_GPIO_Init+0x2fc>)
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054e8:	4a5c      	ldr	r2, [pc, #368]	; (800565c <HAL_GPIO_Init+0x300>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	3302      	adds	r3, #2
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	220f      	movs	r2, #15
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005512:	d02b      	beq.n	800556c <HAL_GPIO_Init+0x210>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a52      	ldr	r2, [pc, #328]	; (8005660 <HAL_GPIO_Init+0x304>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d025      	beq.n	8005568 <HAL_GPIO_Init+0x20c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a51      	ldr	r2, [pc, #324]	; (8005664 <HAL_GPIO_Init+0x308>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01f      	beq.n	8005564 <HAL_GPIO_Init+0x208>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a50      	ldr	r2, [pc, #320]	; (8005668 <HAL_GPIO_Init+0x30c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d019      	beq.n	8005560 <HAL_GPIO_Init+0x204>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a4f      	ldr	r2, [pc, #316]	; (800566c <HAL_GPIO_Init+0x310>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_GPIO_Init+0x200>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a4e      	ldr	r2, [pc, #312]	; (8005670 <HAL_GPIO_Init+0x314>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00d      	beq.n	8005558 <HAL_GPIO_Init+0x1fc>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_GPIO_Init+0x318>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <HAL_GPIO_Init+0x1f8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_GPIO_Init+0x31c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_GPIO_Init+0x1f4>
 800554c:	2307      	movs	r3, #7
 800554e:	e00e      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005550:	2308      	movs	r3, #8
 8005552:	e00c      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005554:	2306      	movs	r3, #6
 8005556:	e00a      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005558:	2305      	movs	r3, #5
 800555a:	e008      	b.n	800556e <HAL_GPIO_Init+0x212>
 800555c:	2304      	movs	r3, #4
 800555e:	e006      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005560:	2303      	movs	r3, #3
 8005562:	e004      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005564:	2302      	movs	r3, #2
 8005566:	e002      	b.n	800556e <HAL_GPIO_Init+0x212>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_GPIO_Init+0x212>
 800556c:	2300      	movs	r3, #0
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	f002 0203 	and.w	r2, r2, #3
 8005574:	0092      	lsls	r2, r2, #2
 8005576:	4093      	lsls	r3, r2
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800557e:	4937      	ldr	r1, [pc, #220]	; (800565c <HAL_GPIO_Init+0x300>)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	089b      	lsrs	r3, r3, #2
 8005584:	3302      	adds	r3, #2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800558c:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_GPIO_Init+0x320>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055b0:	4a32      	ldr	r2, [pc, #200]	; (800567c <HAL_GPIO_Init+0x320>)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_GPIO_Init+0x320>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	43db      	mvns	r3, r3
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055da:	4a28      	ldr	r2, [pc, #160]	; (800567c <HAL_GPIO_Init+0x320>)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_GPIO_Init+0x320>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005604:	4a1d      	ldr	r2, [pc, #116]	; (800567c <HAL_GPIO_Init+0x320>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_GPIO_Init+0x320>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <HAL_GPIO_Init+0x320>)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3301      	adds	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	f47f ae91 	bne.w	800536c <HAL_GPIO_Init+0x10>
  }
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40021000 	.word	0x40021000
 800565c:	40010000 	.word	0x40010000
 8005660:	48000400 	.word	0x48000400
 8005664:	48000800 	.word	0x48000800
 8005668:	48000c00 	.word	0x48000c00
 800566c:	48001000 	.word	0x48001000
 8005670:	48001400 	.word	0x48001400
 8005674:	48001800 	.word	0x48001800
 8005678:	48001c00 	.word	0x48001c00
 800567c:	40010400 	.word	0x40010400

08005680 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800568e:	e0c9      	b.n	8005824 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005690:	2201      	movs	r2, #1
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	4013      	ands	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80bc 	beq.w	800581e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80056a6:	4a66      	ldr	r2, [pc, #408]	; (8005840 <HAL_GPIO_DeInit+0x1c0>)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	3302      	adds	r3, #2
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	220f      	movs	r2, #15
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056ce:	d02b      	beq.n	8005728 <HAL_GPIO_DeInit+0xa8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a5c      	ldr	r2, [pc, #368]	; (8005844 <HAL_GPIO_DeInit+0x1c4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d025      	beq.n	8005724 <HAL_GPIO_DeInit+0xa4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <HAL_GPIO_DeInit+0x1c8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d01f      	beq.n	8005720 <HAL_GPIO_DeInit+0xa0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a5a      	ldr	r2, [pc, #360]	; (800584c <HAL_GPIO_DeInit+0x1cc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d019      	beq.n	800571c <HAL_GPIO_DeInit+0x9c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a59      	ldr	r2, [pc, #356]	; (8005850 <HAL_GPIO_DeInit+0x1d0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_GPIO_DeInit+0x98>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a58      	ldr	r2, [pc, #352]	; (8005854 <HAL_GPIO_DeInit+0x1d4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00d      	beq.n	8005714 <HAL_GPIO_DeInit+0x94>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_GPIO_DeInit+0x1d8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <HAL_GPIO_DeInit+0x90>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a56      	ldr	r2, [pc, #344]	; (800585c <HAL_GPIO_DeInit+0x1dc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_GPIO_DeInit+0x8c>
 8005708:	2307      	movs	r3, #7
 800570a:	e00e      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 800570c:	2308      	movs	r3, #8
 800570e:	e00c      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005710:	2306      	movs	r3, #6
 8005712:	e00a      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005714:	2305      	movs	r3, #5
 8005716:	e008      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005718:	2304      	movs	r3, #4
 800571a:	e006      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 800571c:	2303      	movs	r3, #3
 800571e:	e004      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005720:	2302      	movs	r3, #2
 8005722:	e002      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_GPIO_DeInit+0xaa>
 8005728:	2300      	movs	r3, #0
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	f002 0203 	and.w	r2, r2, #3
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	4093      	lsls	r3, r2
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	429a      	cmp	r2, r3
 8005738:	d132      	bne.n	80057a0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800573a:	4b49      	ldr	r3, [pc, #292]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43db      	mvns	r3, r3
 8005742:	4947      	ldr	r1, [pc, #284]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 8005744:	4013      	ands	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	4943      	ldr	r1, [pc, #268]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 8005752:	4013      	ands	r3, r2
 8005754:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005756:	4b42      	ldr	r3, [pc, #264]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	4940      	ldr	r1, [pc, #256]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 8005760:	4013      	ands	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005764:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	43db      	mvns	r3, r3
 800576c:	493c      	ldr	r1, [pc, #240]	; (8005860 <HAL_GPIO_DeInit+0x1e0>)
 800576e:	4013      	ands	r3, r2
 8005770:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	220f      	movs	r2, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005782:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <HAL_GPIO_DeInit+0x1c0>)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	3302      	adds	r3, #2
 800578a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	43da      	mvns	r2, r3
 8005792:	482b      	ldr	r0, [pc, #172]	; (8005840 <HAL_GPIO_DeInit+0x1c0>)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	400a      	ands	r2, r1
 800579a:	3302      	adds	r3, #2
 800579c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2103      	movs	r1, #3
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	08da      	lsrs	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3208      	adds	r2, #8
 80057bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	08d2      	lsrs	r2, r2, #3
 80057d4:	4019      	ands	r1, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3208      	adds	r2, #8
 80057da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2103      	movs	r1, #3
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	2101      	movs	r1, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	2103      	movs	r1, #3
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	401a      	ands	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	3301      	adds	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f af2f 	bne.w	8005690 <HAL_GPIO_DeInit+0x10>
  }
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40010000 	.word	0x40010000
 8005844:	48000400 	.word	0x48000400
 8005848:	48000800 	.word	0x48000800
 800584c:	48000c00 	.word	0x48000c00
 8005850:	48001000 	.word	0x48001000
 8005854:	48001400 	.word	0x48001400
 8005858:	48001800 	.word	0x48001800
 800585c:	48001c00 	.word	0x48001c00
 8005860:	40010400 	.word	0x40010400

08005864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
 8005870:	4613      	mov	r3, r2
 8005872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005874:	787b      	ldrb	r3, [r7, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800587a:	887a      	ldrh	r2, [r7, #2]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005880:	e002      	b.n	8005888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005882:	887a      	ldrh	r2, [r7, #2]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a4:	d102      	bne.n	80058ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80058a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058aa:	e00b      	b.n	80058c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ba:	d102      	bne.n	80058c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80058bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c0:	e000      	b.n	80058c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80058c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d141      	bne.n	8005966 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058e2:	4b4b      	ldr	r3, [pc, #300]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d131      	bne.n	8005954 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058f0:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f6:	4a46      	ldr	r2, [pc, #280]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005908:	4a41      	ldr	r2, [pc, #260]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800590e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005910:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2232      	movs	r2, #50	; 0x32
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	0c9b      	lsrs	r3, r3, #18
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005926:	e002      	b.n	800592e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b01      	subs	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800592e:	4b38      	ldr	r3, [pc, #224]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d102      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f2      	bne.n	8005928 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005942:	4b33      	ldr	r3, [pc, #204]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594e:	d158      	bne.n	8005a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e057      	b.n	8005a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005954:	4b2e      	ldr	r3, [pc, #184]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595a:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005964:	e04d      	b.n	8005a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d141      	bne.n	80059f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800596e:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d131      	bne.n	80059e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005982:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800598c:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800599a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2232      	movs	r2, #50	; 0x32
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	0c9b      	lsrs	r3, r3, #18
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059b2:	e002      	b.n	80059ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d102      	bne.n	80059ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f2      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ce:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059da:	d112      	bne.n	8005a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e011      	b.n	8005a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80059f0:	e007      	b.n	8005a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059fa:	4a05      	ldr	r2, [pc, #20]	; (8005a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40007000 	.word	0x40007000
 8005a14:	2000007c 	.word	0x2000007c
 8005a18:	431bde83 	.word	0x431bde83

08005a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f000 bc08 	b.w	8006240 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a30:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a3a:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80e4 	beq.w	8005c1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_RCC_OscConfig+0x4c>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	f040 808b 	bne.w	8005b76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	f040 8087 	bne.w	8005b76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a68:	4b88      	ldr	r3, [pc, #544]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x64>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e3df      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_RCC_OscConfig+0x7e>
 8005a90:	4b7e      	ldr	r3, [pc, #504]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a98:	e005      	b.n	8005aa6 <HAL_RCC_OscConfig+0x8a>
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d223      	bcs.n	8005af2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fdcc 	bl	800664c <RCC_SetFlashLatencyFromMSIRange>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e3c0      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005abe:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a72      	ldr	r2, [pc, #456]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005ac4:	f043 0308 	orr.w	r3, r3, #8
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b70      	ldr	r3, [pc, #448]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	496d      	ldr	r1, [pc, #436]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005adc:	4b6b      	ldr	r3, [pc, #428]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	4968      	ldr	r1, [pc, #416]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]
 8005af0:	e025      	b.n	8005b3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005af2:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a65      	ldr	r2, [pc, #404]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b63      	ldr	r3, [pc, #396]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4960      	ldr	r1, [pc, #384]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b10:	4b5e      	ldr	r3, [pc, #376]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	495b      	ldr	r1, [pc, #364]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fd8c 	bl	800664c <RCC_SetFlashLatencyFromMSIRange>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e380      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b3e:	f000 fcc1 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 8005b42:	4602      	mov	r2, r0
 8005b44:	4b51      	ldr	r3, [pc, #324]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4950      	ldr	r1, [pc, #320]	; (8005c90 <HAL_RCC_OscConfig+0x274>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	4a4e      	ldr	r2, [pc, #312]	; (8005c94 <HAL_RCC_OscConfig+0x278>)
 8005b5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <HAL_RCC_OscConfig+0x27c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f8f0 	bl	8004d48 <HAL_InitTick>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d052      	beq.n	8005c18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	e364      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d032      	beq.n	8005be4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b7e:	4b43      	ldr	r3, [pc, #268]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a42      	ldr	r2, [pc, #264]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b8a:	f7ff f92d 	bl	8004de8 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b92:	f7ff f929 	bl	8004de8 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e34d      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bb0:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a35      	ldr	r2, [pc, #212]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bb6:	f043 0308 	orr.w	r3, r3, #8
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	4930      	ldr	r1, [pc, #192]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	492b      	ldr	r1, [pc, #172]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	604b      	str	r3, [r1, #4]
 8005be2:	e01a      	b.n	8005c1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005be4:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bf0:	f7ff f8fa 	bl	8004de8 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bf8:	f7ff f8f6 	bl	8004de8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e31a      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x1dc>
 8005c16:	e000      	b.n	8005c1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d073      	beq.n	8005d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_OscConfig+0x21c>
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b0c      	cmp	r3, #12
 8005c30:	d10e      	bne.n	8005c50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d10b      	bne.n	8005c50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c38:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d063      	beq.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d15f      	bne.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e2f7      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d106      	bne.n	8005c68 <HAL_RCC_OscConfig+0x24c>
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0b      	ldr	r2, [pc, #44]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e025      	b.n	8005cb4 <HAL_RCC_OscConfig+0x298>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c70:	d114      	bne.n	8005c9c <HAL_RCC_OscConfig+0x280>
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a05      	ldr	r2, [pc, #20]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a02      	ldr	r2, [pc, #8]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e013      	b.n	8005cb4 <HAL_RCC_OscConfig+0x298>
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	0800cc04 	.word	0x0800cc04
 8005c94:	2000007c 	.word	0x2000007c
 8005c98:	20000080 	.word	0x20000080
 8005c9c:	4ba0      	ldr	r3, [pc, #640]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a9f      	ldr	r2, [pc, #636]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	4b9d      	ldr	r3, [pc, #628]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a9c      	ldr	r2, [pc, #624]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d013      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7ff f894 	bl	8004de8 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7ff f890 	bl	8004de8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e2b4      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cd6:	4b92      	ldr	r3, [pc, #584]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x2a8>
 8005ce2:	e014      	b.n	8005d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7ff f880 	bl	8004de8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cec:	f7ff f87c 	bl	8004de8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b64      	cmp	r3, #100	; 0x64
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e2a0      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cfe:	4b88      	ldr	r3, [pc, #544]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x2d0>
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d060      	beq.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_OscConfig+0x310>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d119      	bne.n	8005d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d116      	bne.n	8005d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2c:	4b7c      	ldr	r3, [pc, #496]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_OscConfig+0x328>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e27d      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d44:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	4973      	ldr	r1, [pc, #460]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d58:	e040      	b.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d023      	beq.n	8005daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d62:	4b6f      	ldr	r3, [pc, #444]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a6e      	ldr	r2, [pc, #440]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6e:	f7ff f83b 	bl	8004de8 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d76:	f7ff f837 	bl	8004de8 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e25b      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d88:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d94:	4b62      	ldr	r3, [pc, #392]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	495f      	ldr	r1, [pc, #380]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	e018      	b.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005daa:	4b5d      	ldr	r3, [pc, #372]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a5c      	ldr	r2, [pc, #368]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7ff f817 	bl	8004de8 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dbe:	f7ff f813 	bl	8004de8 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e237      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dd0:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03c      	beq.n	8005e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005df0:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df6:	4a4a      	ldr	r2, [pc, #296]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fe fff2 	bl	8004de8 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e08:	f7fe ffee 	bl	8004de8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e212      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e1a:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ef      	beq.n	8005e08 <HAL_RCC_OscConfig+0x3ec>
 8005e28:	e01b      	b.n	8005e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e2a:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e30:	4a3b      	ldr	r2, [pc, #236]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fe ffd5 	bl	8004de8 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fe ffd1 	bl	8004de8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e1f5      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e54:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1ef      	bne.n	8005e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80a6 	beq.w	8005fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e74:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e80:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8c:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e9c:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <HAL_RCC_OscConfig+0x508>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d118      	bne.n	8005eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <HAL_RCC_OscConfig+0x508>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <HAL_RCC_OscConfig+0x508>)
 8005eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb4:	f7fe ff98 	bl	8004de8 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ebc:	f7fe ff94 	bl	8004de8 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1b8      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <HAL_RCC_OscConfig+0x508>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d108      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x4d8>
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef2:	e029      	b.n	8005f48 <HAL_RCC_OscConfig+0x52c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d115      	bne.n	8005f28 <HAL_RCC_OscConfig+0x50c>
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005f04:	f043 0304 	orr.w	r3, r3, #4
 8005f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	4a03      	ldr	r2, [pc, #12]	; (8005f20 <HAL_RCC_OscConfig+0x504>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_OscConfig+0x52c>
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40007000 	.word	0x40007000
 8005f28:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	4a9c      	ldr	r2, [pc, #624]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f38:	4b99      	ldr	r3, [pc, #612]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	4a98      	ldr	r2, [pc, #608]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f40:	f023 0304 	bic.w	r3, r3, #4
 8005f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d016      	beq.n	8005f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f50:	f7fe ff4a 	bl	8004de8 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f58:	f7fe ff46 	bl	8004de8 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e168      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6e:	4b8c      	ldr	r3, [pc, #560]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ed      	beq.n	8005f58 <HAL_RCC_OscConfig+0x53c>
 8005f7c:	e015      	b.n	8005faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7e:	f7fe ff33 	bl	8004de8 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fe ff2f 	bl	8004de8 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e151      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f9c:	4b80      	ldr	r3, [pc, #512]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1ed      	bne.n	8005f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005faa:	7ffb      	ldrb	r3, [r7, #31]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb0:	4b7b      	ldr	r3, [pc, #492]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	4a7a      	ldr	r2, [pc, #488]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d03c      	beq.n	8006042 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01c      	beq.n	800600a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fd0:	4b73      	ldr	r3, [pc, #460]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fd6:	4a72      	ldr	r2, [pc, #456]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fe ff02 	bl	8004de8 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fe8:	f7fe fefe 	bl	8004de8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e122      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ffa:	4b69      	ldr	r3, [pc, #420]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8005ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ef      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x5cc>
 8006008:	e01b      	b.n	8006042 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800600c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006010:	4a63      	ldr	r2, [pc, #396]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601a:	f7fe fee5 	bl	8004de8 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006022:	f7fe fee1 	bl	8004de8 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e105      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006034:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ef      	bne.n	8006022 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80f9 	beq.w	800623e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	2b02      	cmp	r3, #2
 8006052:	f040 80cf 	bne.w	80061f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006056:	4b52      	ldr	r3, [pc, #328]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0203 	and.w	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	429a      	cmp	r2, r3
 8006068:	d12c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	3b01      	subs	r3, #1
 8006076:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006078:	429a      	cmp	r2, r3
 800607a:	d123      	bne.n	80060c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d11b      	bne.n	80060c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d113      	bne.n	80060c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	3b01      	subs	r3, #1
 80060aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d109      	bne.n	80060c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	3b01      	subs	r3, #1
 80060be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d071      	beq.n	80061a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b0c      	cmp	r3, #12
 80060c8:	d068      	beq.n	800619c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060ca:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80060d6:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e0ac      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060e6:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2d      	ldr	r2, [pc, #180]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 80060ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060f2:	f7fe fe79 	bl	8004de8 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fe fe75 	bl	8004de8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e099      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006118:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <HAL_RCC_OscConfig+0x788>)
 800611e:	4013      	ands	r3, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006128:	3a01      	subs	r2, #1
 800612a:	0112      	lsls	r2, r2, #4
 800612c:	4311      	orrs	r1, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006132:	0212      	lsls	r2, r2, #8
 8006134:	4311      	orrs	r1, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800613a:	0852      	lsrs	r2, r2, #1
 800613c:	3a01      	subs	r2, #1
 800613e:	0552      	lsls	r2, r2, #21
 8006140:	4311      	orrs	r1, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006146:	0852      	lsrs	r2, r2, #1
 8006148:	3a01      	subs	r2, #1
 800614a:	0652      	lsls	r2, r2, #25
 800614c:	4311      	orrs	r1, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006152:	06d2      	lsls	r2, r2, #27
 8006154:	430a      	orrs	r2, r1
 8006156:	4912      	ldr	r1, [pc, #72]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006158:	4313      	orrs	r3, r2
 800615a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006168:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 800616e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006174:	f7fe fe38 	bl	8004de8 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fe fe34 	bl	8004de8 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e058      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <HAL_RCC_OscConfig+0x784>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800619a:	e050      	b.n	800623e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e04f      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
 80061a0:	40021000 	.word	0x40021000
 80061a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061a8:	4b27      	ldr	r3, [pc, #156]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d144      	bne.n	800623e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c0:	4b21      	ldr	r3, [pc, #132]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061cc:	f7fe fe0c 	bl	8004de8 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fe fe08 	bl	8004de8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e02c      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x7b8>
 80061f2:	e024      	b.n	800623e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d01f      	beq.n	800623a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 8006200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fe fdef 	bl	8004de8 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620e:	f7fe fdeb 	bl	8004de8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e00f      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	4905      	ldr	r1, [pc, #20]	; (8006248 <HAL_RCC_OscConfig+0x82c>)
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_RCC_OscConfig+0x830>)
 8006234:	4013      	ands	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
 8006238:	e001      	b.n	800623e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000
 800624c:	feeefffc 	.word	0xfeeefffc

08006250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e11d      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006268:	4b90      	ldr	r3, [pc, #576]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d910      	bls.n	8006298 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	4b8d      	ldr	r3, [pc, #564]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f023 020f 	bic.w	r2, r3, #15
 800627e:	498b      	ldr	r1, [pc, #556]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b89      	ldr	r3, [pc, #548]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e105      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	4b81      	ldr	r3, [pc, #516]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d908      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b7e      	ldr	r3, [pc, #504]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	497b      	ldr	r1, [pc, #492]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d079      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d11e      	bne.n	8006318 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062da:	4b75      	ldr	r3, [pc, #468]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e0dc      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80062ea:	f000 fa09 	bl	8006700 <RCC_GetSysClockFreqFromPLLSource>
 80062ee:	4603      	mov	r3, r0
 80062f0:	4a70      	ldr	r2, [pc, #448]	; (80064b4 <HAL_RCC_ClockConfig+0x264>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d946      	bls.n	8006384 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80062f6:	4b6e      	ldr	r3, [pc, #440]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d140      	bne.n	8006384 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006302:	4b6b      	ldr	r3, [pc, #428]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630a:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e035      	b.n	8006384 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d107      	bne.n	8006330 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006320:	4b63      	ldr	r3, [pc, #396]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0b9      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d107      	bne.n	8006348 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006338:	4b5d      	ldr	r3, [pc, #372]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0ad      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006348:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0a5      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006358:	f000 f8b4 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 800635c:	4603      	mov	r3, r0
 800635e:	4a55      	ldr	r2, [pc, #340]	; (80064b4 <HAL_RCC_ClockConfig+0x264>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d90f      	bls.n	8006384 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006364:	4b52      	ldr	r3, [pc, #328]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006370:	4b4f      	ldr	r3, [pc, #316]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006378:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006384:	4b4a      	ldr	r3, [pc, #296]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 0203 	bic.w	r2, r3, #3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4947      	ldr	r1, [pc, #284]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006396:	f7fe fd27 	bl	8004de8 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639c:	e00a      	b.n	80063b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800639e:	f7fe fd23 	bl	8004de8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e077      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b4:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 020c 	and.w	r2, r3, #12
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d1eb      	bne.n	800639e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d105      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4a37      	ldr	r2, [pc, #220]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d208      	bcs.n	8006406 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f4:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	492b      	ldr	r1, [pc, #172]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006406:	4b29      	ldr	r3, [pc, #164]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d210      	bcs.n	8006436 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006414:	4b25      	ldr	r3, [pc, #148]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 020f 	bic.w	r2, r3, #15
 800641c:	4923      	ldr	r1, [pc, #140]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006424:	4b21      	ldr	r3, [pc, #132]	; (80064ac <HAL_RCC_ClockConfig+0x25c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d001      	beq.n	8006436 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e036      	b.n	80064a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006442:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4918      	ldr	r1, [pc, #96]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4910      	ldr	r1, [pc, #64]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006474:	f000 f826 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_RCC_ClockConfig+0x260>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	490c      	ldr	r1, [pc, #48]	; (80064b8 <HAL_RCC_ClockConfig+0x268>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <HAL_RCC_ClockConfig+0x26c>)
 8006492:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <HAL_RCC_ClockConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fc55 	bl	8004d48 <HAL_InitTick>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40022000 	.word	0x40022000
 80064b0:	40021000 	.word	0x40021000
 80064b4:	04c4b400 	.word	0x04c4b400
 80064b8:	0800cc04 	.word	0x0800cc04
 80064bc:	2000007c 	.word	0x2000007c
 80064c0:	20000080 	.word	0x20000080

080064c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d2:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064dc:	4b3b      	ldr	r3, [pc, #236]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x34>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b0c      	cmp	r3, #12
 80064f0:	d121      	bne.n	8006536 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d11e      	bne.n	8006536 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064f8:	4b34      	ldr	r3, [pc, #208]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006504:	4b31      	ldr	r3, [pc, #196]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e005      	b.n	8006520 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006514:	4b2d      	ldr	r3, [pc, #180]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006528:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006534:	e00a      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d102      	bne.n	8006542 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800653c:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e004      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b08      	cmp	r3, #8
 8006546:	d101      	bne.n	800654c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800654a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b0c      	cmp	r3, #12
 8006550:	d134      	bne.n	80065bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d003      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0xa6>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d003      	beq.n	8006570 <HAL_RCC_GetSysClockFreq+0xac>
 8006568:	e005      	b.n	8006576 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800656c:	617b      	str	r3, [r7, #20]
      break;
 800656e:	e005      	b.n	800657c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006570:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006572:	617b      	str	r3, [r7, #20]
      break;
 8006574:	e002      	b.n	800657c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	617b      	str	r3, [r7, #20]
      break;
 800657a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	3301      	adds	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	fb03 f202 	mul.w	r2, r3, r2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <HAL_RCC_GetSysClockFreq+0x108>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	0e5b      	lsrs	r3, r3, #25
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	3301      	adds	r3, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065bc:	69bb      	ldr	r3, [r7, #24]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3724      	adds	r7, #36	; 0x24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	0800cc1c 	.word	0x0800cc1c
 80065d4:	00f42400 	.word	0x00f42400
 80065d8:	007a1200 	.word	0x007a1200

080065dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	2000007c 	.word	0x2000007c

080065f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065f8:	f7ff fff0 	bl	80065dc <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4904      	ldr	r1, [pc, #16]	; (800661c <HAL_RCC_GetPCLK1Freq+0x28>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40021000 	.word	0x40021000
 800661c:	0800cc14 	.word	0x0800cc14

08006620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006624:	f7ff ffda 	bl	80065dc <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0adb      	lsrs	r3, r3, #11
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4904      	ldr	r1, [pc, #16]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40021000 	.word	0x40021000
 8006648:	0800cc14 	.word	0x0800cc14

0800664c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006658:	4b27      	ldr	r3, [pc, #156]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800665a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006664:	f7ff f916 	bl	8005894 <HAL_PWREx_GetVoltageRange>
 8006668:	6178      	str	r0, [r7, #20]
 800666a:	e014      	b.n	8006696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006676:	6593      	str	r3, [r2, #88]	; 0x58
 8006678:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006684:	f7ff f906 	bl	8005894 <HAL_PWREx_GetVoltageRange>
 8006688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	4a1a      	ldr	r2, [pc, #104]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d10b      	bne.n	80066b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d913      	bls.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2ba0      	cmp	r3, #160	; 0xa0
 80066a8:	d902      	bls.n	80066b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066aa:	2302      	movs	r3, #2
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e00d      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066b0:	2301      	movs	r3, #1
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	e00a      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ba:	d902      	bls.n	80066c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80066bc:	2302      	movs	r3, #2
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	e004      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b70      	cmp	r3, #112	; 0x70
 80066c6:	d101      	bne.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066c8:	2301      	movs	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 020f 	bic.w	r2, r3, #15
 80066d4:	4909      	ldr	r1, [pc, #36]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d001      	beq.n	80066ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021000 	.word	0x40021000
 80066fc:	40022000 	.word	0x40022000

08006700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006706:	4b2d      	ldr	r3, [pc, #180]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d00b      	beq.n	800672e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d825      	bhi.n	8006768 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d008      	beq.n	8006734 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d11f      	bne.n	8006768 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800672a:	613b      	str	r3, [r7, #16]
    break;
 800672c:	e01f      	b.n	800676e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800672e:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006730:	613b      	str	r3, [r7, #16]
    break;
 8006732:	e01c      	b.n	800676e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006734:	4b21      	ldr	r3, [pc, #132]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d107      	bne.n	8006750 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006740:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006746:	0a1b      	lsrs	r3, r3, #8
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e005      	b.n	800675c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006750:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800675c:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006764:	613b      	str	r3, [r7, #16]
    break;
 8006766:	e002      	b.n	800676e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
    break;
 800676c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	3301      	adds	r3, #1
 800677a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800677c:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	fb03 f202 	mul.w	r2, r3, r2
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006794:	4b09      	ldr	r3, [pc, #36]	; (80067bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	0e5b      	lsrs	r3, r3, #25
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	3301      	adds	r3, #1
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80067ae:	683b      	ldr	r3, [r7, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40021000 	.word	0x40021000
 80067c0:	00f42400 	.word	0x00f42400
 80067c4:	007a1200 	.word	0x007a1200
 80067c8:	0800cc1c 	.word	0x0800cc1c

080067cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067d4:	2300      	movs	r3, #0
 80067d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067d8:	2300      	movs	r3, #0
 80067da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d040      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d02a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d825      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80067f4:	2b60      	cmp	r3, #96	; 0x60
 80067f6:	d026      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067f8:	2b60      	cmp	r3, #96	; 0x60
 80067fa:	d821      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d006      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d81d      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d010      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800680c:	e018      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800680e:	4b89      	ldr	r3, [pc, #548]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4a88      	ldr	r2, [pc, #544]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800681a:	e015      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fb62 	bl	8006eec <RCCEx_PLLSAI1_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800682c:	e00c      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3320      	adds	r3, #32
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fc4d 	bl	80070d4 <RCCEx_PLLSAI2_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	74fb      	strb	r3, [r7, #19]
      break;
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800684e:	4b79      	ldr	r3, [pc, #484]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006854:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685c:	4975      	ldr	r1, [pc, #468]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006864:	e001      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006866:	7cfb      	ldrb	r3, [r7, #19]
 8006868:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d047      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d030      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006884:	d82a      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	d02a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006890:	d824      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d008      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d81e      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d010      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80068a8:	e018      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068aa:	4b62      	ldr	r3, [pc, #392]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4a61      	ldr	r2, [pc, #388]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068b6:	e015      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb14 	bl	8006eec <RCCEx_PLLSAI1_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3320      	adds	r3, #32
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fbff 	bl	80070d4 <RCCEx_PLLSAI2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	74fb      	strb	r3, [r7, #19]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80068e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068ea:	4b52      	ldr	r3, [pc, #328]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	494e      	ldr	r1, [pc, #312]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006900:	e001      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	7cfb      	ldrb	r3, [r7, #19]
 8006904:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 809f 	beq.w	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006914:	2300      	movs	r3, #0
 8006916:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006918:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00d      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800692e:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006932:	4a40      	ldr	r2, [pc, #256]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006938:	6593      	str	r3, [r2, #88]	; 0x58
 800693a:	4b3e      	ldr	r3, [pc, #248]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006946:	2301      	movs	r3, #1
 8006948:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800694a:	4b3b      	ldr	r3, [pc, #236]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3a      	ldr	r2, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006956:	f7fe fa47 	bl	8004de8 <HAL_GetTick>
 800695a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800695c:	e009      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695e:	f7fe fa43 	bl	8004de8 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d902      	bls.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	74fb      	strb	r3, [r7, #19]
        break;
 8006970:	e005      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006972:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0ef      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800697e:	7cfb      	ldrb	r3, [r7, #19]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d15b      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01f      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d019      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ae:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d016      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fe fa02 	bl	8004de8 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e6:	e00b      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fe f9fe 	bl	8004de8 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d902      	bls.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	74fb      	strb	r3, [r7, #19]
            break;
 80069fe:	e006      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ec      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a24:	4903      	ldr	r1, [pc, #12]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a2c:	e008      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a2e:	7cfb      	ldrb	r3, [r7, #19]
 8006a30:	74bb      	strb	r3, [r7, #18]
 8006a32:	e005      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	7cfb      	ldrb	r3, [r7, #19]
 8006a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a40:	7c7b      	ldrb	r3, [r7, #17]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d105      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a46:	4ba0      	ldr	r3, [pc, #640]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	4a9f      	ldr	r2, [pc, #636]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a5e:	4b9a      	ldr	r3, [pc, #616]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f023 0203 	bic.w	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	4996      	ldr	r1, [pc, #600]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a80:	4b91      	ldr	r3, [pc, #580]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f023 020c 	bic.w	r2, r3, #12
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	498e      	ldr	r1, [pc, #568]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aa2:	4b89      	ldr	r3, [pc, #548]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	4985      	ldr	r1, [pc, #532]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ac4:	4b80      	ldr	r3, [pc, #512]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad2:	497d      	ldr	r1, [pc, #500]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ae6:	4b78      	ldr	r3, [pc, #480]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	4974      	ldr	r1, [pc, #464]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b08:	4b6f      	ldr	r3, [pc, #444]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b16:	496c      	ldr	r1, [pc, #432]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b2a:	4b67      	ldr	r3, [pc, #412]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b38:	4963      	ldr	r1, [pc, #396]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b5a:	495b      	ldr	r1, [pc, #364]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b6e:	4b56      	ldr	r3, [pc, #344]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	4952      	ldr	r1, [pc, #328]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b90:	4b4d      	ldr	r3, [pc, #308]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	494a      	ldr	r1, [pc, #296]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bb2:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	4941      	ldr	r1, [pc, #260]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bd4:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be2:	4939      	ldr	r1, [pc, #228]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d028      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bf6:	4b34      	ldr	r3, [pc, #208]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c04:	4930      	ldr	r1, [pc, #192]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c14:	d106      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c16:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c20:	60d3      	str	r3, [r2, #12]
 8006c22:	e011      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c2c:	d10c      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3304      	adds	r3, #4
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f959 	bl	8006eec <RCCEx_PLLSAI1_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c3e:	7cfb      	ldrb	r3, [r7, #19]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d04d      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5c:	d108      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c64:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006c6e:	e012      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006c70:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c8e:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c9e:	d106      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006caa:	60d3      	str	r3, [r2, #12]
 8006cac:	e020      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb6:	d109      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4a02      	ldr	r2, [pc, #8]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc2:	60d3      	str	r3, [r2, #12]
 8006cc4:	e014      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006cc6:	bf00      	nop
 8006cc8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cd4:	d10c      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2101      	movs	r1, #1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f905 	bl	8006eec <RCCEx_PLLSAI1_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ce6:	7cfb      	ldrb	r3, [r7, #19]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d028      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cfc:	4b7a      	ldr	r3, [pc, #488]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d0a:	4977      	ldr	r1, [pc, #476]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d1c:	4b72      	ldr	r3, [pc, #456]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4a71      	ldr	r2, [pc, #452]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d26:	60d3      	str	r3, [r2, #12]
 8006d28:	e011      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f8d6 	bl	8006eec <RCCEx_PLLSAI1_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006d4a:	7cfb      	ldrb	r3, [r7, #19]
 8006d4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01e      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d5a:	4b63      	ldr	r3, [pc, #396]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	495f      	ldr	r1, [pc, #380]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	2102      	movs	r1, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f8b1 	bl	8006eec <RCCEx_PLLSAI1_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006da4:	4b50      	ldr	r3, [pc, #320]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006daa:	f023 0204 	bic.w	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db4:	494c      	ldr	r1, [pc, #304]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006dc8:	4b47      	ldr	r3, [pc, #284]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dce:	f023 0218 	bic.w	r2, r3, #24
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	4943      	ldr	r1, [pc, #268]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d035      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dec:	4b3e      	ldr	r3, [pc, #248]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3d      	ldr	r2, [pc, #244]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df8:	f7fd fff6 	bl	8004de8 <HAL_GetTick>
 8006dfc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dfe:	e009      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e00:	f7fd fff2 	bl	8004de8 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d902      	bls.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	74fb      	strb	r3, [r7, #19]
        break;
 8006e12:	e005      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e14:	4b34      	ldr	r3, [pc, #208]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ef      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006e20:	7cfb      	ldrb	r3, [r7, #19]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d113      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006e26:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e36:	492c      	ldr	r1, [pc, #176]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3320      	adds	r3, #32
 8006e42:	2102      	movs	r1, #2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f945 	bl	80070d4 <RCCEx_PLLSAI2_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006e4e:	7cfb      	ldrb	r3, [r7, #19]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e74:	491c      	ldr	r1, [pc, #112]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d10c      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3320      	adds	r3, #32
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f920 	bl	80070d4 <RCCEx_PLLSAI2_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e98:	7cfb      	ldrb	r3, [r7, #19]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ebe:	490a      	ldr	r1, [pc, #40]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed0:	d105      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	4a04      	ldr	r2, [pc, #16]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006edc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ede:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021000 	.word	0x40021000

08006eec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006efa:	4b72      	ldr	r3, [pc, #456]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f06:	4b6f      	ldr	r3, [pc, #444]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f003 0203 	and.w	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d103      	bne.n	8006f1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
       ||
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d142      	bne.n	8006fa4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e03f      	b.n	8006fa4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d018      	beq.n	8006f5e <RCCEx_PLLSAI1_Config+0x72>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d825      	bhi.n	8006f7c <RCCEx_PLLSAI1_Config+0x90>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d002      	beq.n	8006f3a <RCCEx_PLLSAI1_Config+0x4e>
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d009      	beq.n	8006f4c <RCCEx_PLLSAI1_Config+0x60>
 8006f38:	e020      	b.n	8006f7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f3a:	4b62      	ldr	r3, [pc, #392]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d11d      	bne.n	8006f82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4a:	e01a      	b.n	8006f82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f4c:	4b5d      	ldr	r3, [pc, #372]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d116      	bne.n	8006f86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f5c:	e013      	b.n	8006f86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f5e:	4b59      	ldr	r3, [pc, #356]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f6a:	4b56      	ldr	r3, [pc, #344]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f7a:	e006      	b.n	8006f8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e004      	b.n	8006f8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006f82:	bf00      	nop
 8006f84:	e002      	b.n	8006f8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006f8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006f92:	4b4c      	ldr	r3, [pc, #304]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f023 0203 	bic.w	r2, r3, #3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4949      	ldr	r1, [pc, #292]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 8086 	bne.w	80070b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006fac:	4b45      	ldr	r3, [pc, #276]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a44      	ldr	r2, [pc, #272]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb8:	f7fd ff16 	bl	8004de8 <HAL_GetTick>
 8006fbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fbe:	e009      	b.n	8006fd4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fc0:	f7fd ff12 	bl	8004de8 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d902      	bls.n	8006fd4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8006fd2:	e005      	b.n	8006fe0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fd4:	4b3b      	ldr	r3, [pc, #236]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ef      	bne.n	8006fc0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d168      	bne.n	80070b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d113      	bne.n	8007014 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	4b35      	ldr	r3, [pc, #212]	; (80070c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	0211      	lsls	r1, r2, #8
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68d2      	ldr	r2, [r2, #12]
 8006ffe:	06d2      	lsls	r2, r2, #27
 8007000:	4311      	orrs	r1, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6852      	ldr	r2, [r2, #4]
 8007006:	3a01      	subs	r2, #1
 8007008:	0112      	lsls	r2, r2, #4
 800700a:	430a      	orrs	r2, r1
 800700c:	492d      	ldr	r1, [pc, #180]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	610b      	str	r3, [r1, #16]
 8007012:	e02d      	b.n	8007070 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d115      	bne.n	8007046 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800701a:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	4b2b      	ldr	r3, [pc, #172]	; (80070cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6892      	ldr	r2, [r2, #8]
 8007026:	0211      	lsls	r1, r2, #8
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6912      	ldr	r2, [r2, #16]
 800702c:	0852      	lsrs	r2, r2, #1
 800702e:	3a01      	subs	r2, #1
 8007030:	0552      	lsls	r2, r2, #21
 8007032:	4311      	orrs	r1, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6852      	ldr	r2, [r2, #4]
 8007038:	3a01      	subs	r2, #1
 800703a:	0112      	lsls	r2, r2, #4
 800703c:	430a      	orrs	r2, r1
 800703e:	4921      	ldr	r1, [pc, #132]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007040:	4313      	orrs	r3, r2
 8007042:	610b      	str	r3, [r1, #16]
 8007044:	e014      	b.n	8007070 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007046:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6892      	ldr	r2, [r2, #8]
 8007052:	0211      	lsls	r1, r2, #8
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6952      	ldr	r2, [r2, #20]
 8007058:	0852      	lsrs	r2, r2, #1
 800705a:	3a01      	subs	r2, #1
 800705c:	0652      	lsls	r2, r2, #25
 800705e:	4311      	orrs	r1, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6852      	ldr	r2, [r2, #4]
 8007064:	3a01      	subs	r2, #1
 8007066:	0112      	lsls	r2, r2, #4
 8007068:	430a      	orrs	r2, r1
 800706a:	4916      	ldr	r1, [pc, #88]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007070:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800707a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707c:	f7fd feb4 	bl	8004de8 <HAL_GetTick>
 8007080:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007082:	e009      	b.n	8007098 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007084:	f7fd feb0 	bl	8004de8 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d902      	bls.n	8007098 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
          break;
 8007096:	e005      	b.n	80070a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ef      	beq.n	8007084 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	4904      	ldr	r1, [pc, #16]	; (80070c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40021000 	.word	0x40021000
 80070c8:	07ff800f 	.word	0x07ff800f
 80070cc:	ff9f800f 	.word	0xff9f800f
 80070d0:	f9ff800f 	.word	0xf9ff800f

080070d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070e2:	4b72      	ldr	r3, [pc, #456]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80070ee:	4b6f      	ldr	r3, [pc, #444]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 0203 	and.w	r2, r3, #3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d103      	bne.n	8007106 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
       ||
 8007102:	2b00      	cmp	r3, #0
 8007104:	d142      	bne.n	800718c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	e03f      	b.n	800718c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d018      	beq.n	8007146 <RCCEx_PLLSAI2_Config+0x72>
 8007114:	2b03      	cmp	r3, #3
 8007116:	d825      	bhi.n	8007164 <RCCEx_PLLSAI2_Config+0x90>
 8007118:	2b01      	cmp	r3, #1
 800711a:	d002      	beq.n	8007122 <RCCEx_PLLSAI2_Config+0x4e>
 800711c:	2b02      	cmp	r3, #2
 800711e:	d009      	beq.n	8007134 <RCCEx_PLLSAI2_Config+0x60>
 8007120:	e020      	b.n	8007164 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007122:	4b62      	ldr	r3, [pc, #392]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d11d      	bne.n	800716a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007132:	e01a      	b.n	800716a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007134:	4b5d      	ldr	r3, [pc, #372]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713c:	2b00      	cmp	r3, #0
 800713e:	d116      	bne.n	800716e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007144:	e013      	b.n	800716e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007146:	4b59      	ldr	r3, [pc, #356]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10f      	bne.n	8007172 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007152:	4b56      	ldr	r3, [pc, #344]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007162:	e006      	b.n	8007172 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
      break;
 8007168:	e004      	b.n	8007174 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800716a:	bf00      	nop
 800716c:	e002      	b.n	8007174 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007172:	bf00      	nop
    }

    if(status == HAL_OK)
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d108      	bne.n	800718c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800717a:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f023 0203 	bic.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4949      	ldr	r1, [pc, #292]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 8086 	bne.w	80072a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007194:	4b45      	ldr	r3, [pc, #276]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a44      	ldr	r2, [pc, #272]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800719a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a0:	f7fd fe22 	bl	8004de8 <HAL_GetTick>
 80071a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071a6:	e009      	b.n	80071bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071a8:	f7fd fe1e 	bl	8004de8 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d902      	bls.n	80071bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
        break;
 80071ba:	e005      	b.n	80071c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071bc:	4b3b      	ldr	r3, [pc, #236]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1ef      	bne.n	80071a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d168      	bne.n	80072a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d113      	bne.n	80071fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	4b35      	ldr	r3, [pc, #212]	; (80072b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80071da:	4013      	ands	r3, r2
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6892      	ldr	r2, [r2, #8]
 80071e0:	0211      	lsls	r1, r2, #8
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68d2      	ldr	r2, [r2, #12]
 80071e6:	06d2      	lsls	r2, r2, #27
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	3a01      	subs	r2, #1
 80071f0:	0112      	lsls	r2, r2, #4
 80071f2:	430a      	orrs	r2, r1
 80071f4:	492d      	ldr	r1, [pc, #180]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	614b      	str	r3, [r1, #20]
 80071fa:	e02d      	b.n	8007258 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d115      	bne.n	800722e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007202:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6892      	ldr	r2, [r2, #8]
 800720e:	0211      	lsls	r1, r2, #8
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6912      	ldr	r2, [r2, #16]
 8007214:	0852      	lsrs	r2, r2, #1
 8007216:	3a01      	subs	r2, #1
 8007218:	0552      	lsls	r2, r2, #21
 800721a:	4311      	orrs	r1, r2
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6852      	ldr	r2, [r2, #4]
 8007220:	3a01      	subs	r2, #1
 8007222:	0112      	lsls	r2, r2, #4
 8007224:	430a      	orrs	r2, r1
 8007226:	4921      	ldr	r1, [pc, #132]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007228:	4313      	orrs	r3, r2
 800722a:	614b      	str	r3, [r1, #20]
 800722c:	e014      	b.n	8007258 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6892      	ldr	r2, [r2, #8]
 800723a:	0211      	lsls	r1, r2, #8
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6952      	ldr	r2, [r2, #20]
 8007240:	0852      	lsrs	r2, r2, #1
 8007242:	3a01      	subs	r2, #1
 8007244:	0652      	lsls	r2, r2, #25
 8007246:	4311      	orrs	r1, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6852      	ldr	r2, [r2, #4]
 800724c:	3a01      	subs	r2, #1
 800724e:	0112      	lsls	r2, r2, #4
 8007250:	430a      	orrs	r2, r1
 8007252:	4916      	ldr	r1, [pc, #88]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007254:	4313      	orrs	r3, r2
 8007256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007258:	4b14      	ldr	r3, [pc, #80]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fd fdc0 	bl	8004de8 <HAL_GetTick>
 8007268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800726a:	e009      	b.n	8007280 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800726c:	f7fd fdbc 	bl	8004de8 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d902      	bls.n	8007280 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	73fb      	strb	r3, [r7, #15]
          break;
 800727e:	e005      	b.n	800728c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8007294:	695a      	ldr	r2, [r3, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	4904      	ldr	r1, [pc, #16]	; (80072ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800729c:	4313      	orrs	r3, r2
 800729e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40021000 	.word	0x40021000
 80072b0:	07ff800f 	.word	0x07ff800f
 80072b4:	ff9f800f 	.word	0xff9f800f
 80072b8:	f9ff800f 	.word	0xf9ff800f

080072bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d06c      	beq.n	80073a8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7f9 ffd0 	bl	8001288 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	22ca      	movs	r2, #202	; 0xca
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2253      	movs	r2, #83	; 0x53
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fa49 	bl	8007798 <RTC_EnterInitMode>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d14b      	bne.n	80073a8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800731e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007322:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68d2      	ldr	r2, [r2, #12]
 800734a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6919      	ldr	r1, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	041a      	lsls	r2, r3, #16
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa4d 	bl	8007800 <RTC_ExitInitMode>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11b      	bne.n	80073a8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0203 	bic.w	r2, r2, #3
 800737e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69da      	ldr	r2, [r3, #28]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	22ff      	movs	r2, #255	; 0xff
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073b2:	b590      	push	{r4, r7, lr}
 80073b4:	b087      	sub	sp, #28
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_RTC_SetTime+0x1a>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e08b      	b.n	80074e4 <HAL_RTC_SetTime+0x132>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	22ca      	movs	r2, #202	; 0xca
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2253      	movs	r2, #83	; 0x53
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f9d3 	bl	8007798 <RTC_EnterInitMode>
 80073f2:	4603      	mov	r3, r0
 80073f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073f6:	7cfb      	ldrb	r3, [r7, #19]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d163      	bne.n	80074c4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d126      	bne.n	8007450 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fa2e 	bl	800787c <RTC_ByteToBcd2>
 8007420:	4603      	mov	r3, r0
 8007422:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fa27 	bl	800787c <RTC_ByteToBcd2>
 800742e:	4603      	mov	r3, r0
 8007430:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007432:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	789b      	ldrb	r3, [r3, #2]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fa1f 	bl	800787c <RTC_ByteToBcd2>
 800743e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007440:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	78db      	ldrb	r3, [r3, #3]
 8007448:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e018      	b.n	8007482 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007470:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007476:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	78db      	ldrb	r3, [r3, #3]
 800747c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800748c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007490:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6899      	ldr	r1, [r3, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f9a0 	bl	8007800 <RTC_ExitInitMode>
 80074c0:	4603      	mov	r3, r0
 80074c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80074e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd90      	pop	{r4, r7, pc}

080074ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800751a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800751e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	0c1b      	lsrs	r3, r3, #16
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007548:	b2da      	uxtb	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0d9b      	lsrs	r3, r3, #22
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11a      	bne.n	800759a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f9a7 	bl	80078bc <RTC_Bcd2ToByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f99e 	bl	80078bc <RTC_Bcd2ToByte>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	789b      	ldrb	r3, [r3, #2]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f995 	bl	80078bc <RTC_Bcd2ToByte>
 8007592:	4603      	mov	r3, r0
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_RTC_SetDate+0x1a>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e075      	b.n	80076aa <HAL_RTC_SetDate+0x106>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10e      	bne.n	80075f2 <HAL_RTC_SetDate+0x4e>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	f023 0310 	bic.w	r3, r3, #16
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	330a      	adds	r3, #10
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11c      	bne.n	8007632 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	78db      	ldrb	r3, [r3, #3]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f93d 	bl	800787c <RTC_ByteToBcd2>
 8007602:	4603      	mov	r3, r0
 8007604:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f936 	bl	800787c <RTC_ByteToBcd2>
 8007610:	4603      	mov	r3, r0
 8007612:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007614:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	789b      	ldrb	r3, [r3, #2]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f92e 	bl	800787c <RTC_ByteToBcd2>
 8007620:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007622:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e00e      	b.n	8007650 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800763e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007644:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	22ca      	movs	r2, #202	; 0xca
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2253      	movs	r2, #83	; 0x53
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f899 	bl	8007798 <RTC_EnterInitMode>
 8007666:	4603      	mov	r3, r0
 8007668:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10c      	bne.n	800768a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800767a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800767e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f8bd 	bl	8007800 <RTC_ExitInitMode>
 8007686:	4603      	mov	r3, r0
 8007688:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	22ff      	movs	r2, #255	; 0xff
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007692:	7cfb      	ldrb	r3, [r7, #19]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d103      	bne.n	80076a0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80076a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd90      	pop	{r4, r7, pc}

080076b2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	0b5b      	lsrs	r3, r3, #13
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	b2da      	uxtb	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d11a      	bne.n	8007742 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	78db      	ldrb	r3, [r3, #3]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f8d3 	bl	80078bc <RTC_Bcd2ToByte>
 8007716:	4603      	mov	r3, r0
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f8ca 	bl	80078bc <RTC_Bcd2ToByte>
 8007728:	4603      	mov	r3, r0
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	789b      	ldrb	r3, [r3, #2]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 f8c1 	bl	80078bc <RTC_Bcd2ToByte>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007762:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007764:	f7fd fb40 	bl	8004de8 <HAL_GetTick>
 8007768:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800776a:	e009      	b.n	8007780 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800776c:	f7fd fb3c 	bl	8004de8 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800777a:	d901      	bls.n	8007780 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e007      	b.n	8007790 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0ee      	beq.n	800776c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d120      	bne.n	80077f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077bc:	f7fd fb14 	bl	8004de8 <HAL_GetTick>
 80077c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077c2:	e00d      	b.n	80077e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80077c4:	f7fd fb10 	bl	8004de8 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d2:	d905      	bls.n	80077e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2203      	movs	r2, #3
 80077dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d102      	bne.n	80077f4 <RTC_EnterInitMode+0x5c>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d1e7      	bne.n	80077c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <RTC_ExitInitMode+0x78>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a19      	ldr	r2, [pc, #100]	; (8007878 <RTC_ExitInitMode+0x78>)
 8007812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007816:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <RTC_ExitInitMode+0x78>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10c      	bne.n	800783e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff91 	bl	800774c <HAL_RTC_WaitForSynchro>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01e      	beq.n	800786e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2203      	movs	r2, #3
 8007834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e017      	b.n	800786e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <RTC_ExitInitMode+0x78>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	4a0d      	ldr	r2, [pc, #52]	; (8007878 <RTC_ExitInitMode+0x78>)
 8007844:	f023 0320 	bic.w	r3, r3, #32
 8007848:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ff7e 	bl	800774c <HAL_RTC_WaitForSynchro>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2203      	movs	r2, #3
 800785a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <RTC_ExitInitMode+0x78>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <RTC_ExitInitMode+0x78>)
 8007868:	f043 0320 	orr.w	r3, r3, #32
 800786c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40002800 	.word	0x40002800

0800787c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800788e:	e005      	b.n	800789c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	3b0a      	subs	r3, #10
 800789a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d8f6      	bhi.n	8007890 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b2db      	uxtb	r3, r3
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	0092      	lsls	r2, r2, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	4413      	add	r3, r2
 80078e2:	b2db      	uxtb	r3, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e095      	b.n	8007a2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b00      	cmp	r3, #0
 8007908:	d108      	bne.n	800791c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007912:	d009      	beq.n	8007928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	61da      	str	r2, [r3, #28]
 800791a:	e005      	b.n	8007928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f89f 	bl	8007a86 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007968:	d902      	bls.n	8007970 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e002      	b.n	8007976 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007974:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800797e:	d007      	beq.n	8007990 <HAL_SPI_Init+0xa0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007988:	d002      	beq.n	8007990 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	ea42 0103 	orr.w	r1, r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	f003 0204 	and.w	r2, r3, #4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a0c:	ea42 0103 	orr.w	r1, r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e01a      	b.n	8007a7e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f81a 	bl	8007a9a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b088      	sub	sp, #32
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_SPI_Transmit+0x22>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e158      	b.n	8007d82 <HAL_SPI_Transmit+0x2d4>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ad8:	f7fd f986 	bl	8004de8 <HAL_GetTick>
 8007adc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d002      	beq.n	8007af4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007af2:	e13d      	b.n	8007d70 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_SPI_Transmit+0x52>
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b04:	e134      	b.n	8007d70 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b50:	d10f      	bne.n	8007b72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d007      	beq.n	8007b90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b98:	d94b      	bls.n	8007c32 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_SPI_Transmit+0xfa>
 8007ba2:	8afb      	ldrh	r3, [r7, #22]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d13e      	bne.n	8007c26 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	1c9a      	adds	r2, r3, #2
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bcc:	e02b      	b.n	8007c26 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d112      	bne.n	8007c02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	881a      	ldrh	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c00:	e011      	b.n	8007c26 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c02:	f7fd f8f1 	bl	8004de8 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d803      	bhi.n	8007c1a <HAL_SPI_Transmit+0x16c>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d102      	bne.n	8007c20 <HAL_SPI_Transmit+0x172>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c24:	e0a4      	b.n	8007d70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1ce      	bne.n	8007bce <HAL_SPI_Transmit+0x120>
 8007c30:	e07c      	b.n	8007d2c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SPI_Transmit+0x192>
 8007c3a:	8afb      	ldrh	r3, [r7, #22]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d170      	bne.n	8007d22 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d912      	bls.n	8007c70 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	881a      	ldrh	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	1c9a      	adds	r2, r3, #2
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b02      	subs	r3, #2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c6e:	e058      	b.n	8007d22 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007c96:	e044      	b.n	8007d22 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d12b      	bne.n	8007cfe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d912      	bls.n	8007cd6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	881a      	ldrh	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	1c9a      	adds	r2, r3, #2
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b02      	subs	r3, #2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cd4:	e025      	b.n	8007d22 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	7812      	ldrb	r2, [r2, #0]
 8007ce2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cfc:	e011      	b.n	8007d22 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cfe:	f7fd f873 	bl	8004de8 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d803      	bhi.n	8007d16 <HAL_SPI_Transmit+0x268>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d14:	d102      	bne.n	8007d1c <HAL_SPI_Transmit+0x26e>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d20:	e026      	b.n	8007d70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1b5      	bne.n	8007c98 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 fcf1 	bl	8008718 <SPI_EndRxTxTransaction>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e000      	b.n	8007d70 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b088      	sub	sp, #32
 8007d8e:	af02      	add	r7, sp, #8
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	4613      	mov	r3, r2
 8007d98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da6:	d112      	bne.n	8007dce <HAL_SPI_Receive+0x44>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10e      	bne.n	8007dce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2204      	movs	r2, #4
 8007db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f910 	bl	8007fea <HAL_SPI_TransmitReceive>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	e109      	b.n	8007fe2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_SPI_Receive+0x52>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e102      	b.n	8007fe2 <HAL_SPI_Receive+0x258>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de4:	f7fd f800 	bl	8004de8 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d002      	beq.n	8007dfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
 8007df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dfa:	e0e9      	b.n	8007fd0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_Receive+0x7e>
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e0c:	e0e0      	b.n	8007fd0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2204      	movs	r2, #4
 8007e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	88fa      	ldrh	r2, [r7, #6]
 8007e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	88fa      	ldrh	r2, [r7, #6]
 8007e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e58:	d908      	bls.n	8007e6c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e007      	b.n	8007e7c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e84:	d10f      	bne.n	8007ea6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ea4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d007      	beq.n	8007ec4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ec2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ecc:	d867      	bhi.n	8007f9e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ece:	e030      	b.n	8007f32 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d117      	bne.n	8007f0e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f103 020c 	add.w	r2, r3, #12
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007f0c:	e011      	b.n	8007f32 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f0e:	f7fc ff6b 	bl	8004de8 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d803      	bhi.n	8007f26 <HAL_SPI_Receive+0x19c>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f24:	d102      	bne.n	8007f2c <HAL_SPI_Receive+0x1a2>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f30:	e04e      	b.n	8007fd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1c8      	bne.n	8007ed0 <HAL_SPI_Receive+0x146>
 8007f3e:	e034      	b.n	8007faa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d115      	bne.n	8007f7a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	1c9a      	adds	r2, r3, #2
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007f78:	e011      	b.n	8007f9e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f7a:	f7fc ff35 	bl	8004de8 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d803      	bhi.n	8007f92 <HAL_SPI_Receive+0x208>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f90:	d102      	bne.n	8007f98 <HAL_SPI_Receive+0x20e>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f9c:	e018      	b.n	8007fd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1ca      	bne.n	8007f40 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fb5a 	bl	8008668 <SPI_EndRxTransaction>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
 8007fcc:	e000      	b.n	8007fd0 <HAL_SPI_Receive+0x246>
  }

error :
 8007fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08a      	sub	sp, #40	; 0x28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x26>
 800800c:	2302      	movs	r3, #2
 800800e:	e1fb      	b.n	8008408 <HAL_SPI_TransmitReceive+0x41e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008018:	f7fc fee6 	bl	8004de8 <HAL_GetTick>
 800801c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008024:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800802c:	887b      	ldrh	r3, [r7, #2]
 800802e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008030:	887b      	ldrh	r3, [r7, #2]
 8008032:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008034:	7efb      	ldrb	r3, [r7, #27]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d00e      	beq.n	8008058 <HAL_SPI_TransmitReceive+0x6e>
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008040:	d106      	bne.n	8008050 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <HAL_SPI_TransmitReceive+0x66>
 800804a:	7efb      	ldrb	r3, [r7, #27]
 800804c:	2b04      	cmp	r3, #4
 800804e:	d003      	beq.n	8008058 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008050:	2302      	movs	r3, #2
 8008052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008056:	e1cd      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_SPI_TransmitReceive+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <HAL_SPI_TransmitReceive+0x80>
 8008064:	887b      	ldrh	r3, [r7, #2]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008070:	e1c0      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b04      	cmp	r3, #4
 800807c:	d003      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2205      	movs	r2, #5
 8008082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	887a      	ldrh	r2, [r7, #2]
 8008096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	887a      	ldrh	r2, [r7, #2]
 800809e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	887a      	ldrh	r2, [r7, #2]
 80080ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	887a      	ldrh	r2, [r7, #2]
 80080b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080c8:	d802      	bhi.n	80080d0 <HAL_SPI_TransmitReceive+0xe6>
 80080ca:	8a3b      	ldrh	r3, [r7, #16]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d908      	bls.n	80080e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	e007      	b.n	80080f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d007      	beq.n	8008110 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800810e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008118:	d97c      	bls.n	8008214 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_SPI_TransmitReceive+0x13e>
 8008122:	8a7b      	ldrh	r3, [r7, #18]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d169      	bne.n	80081fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	881a      	ldrh	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	1c9a      	adds	r2, r3, #2
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800814c:	e056      	b.n	80081fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b02      	cmp	r3, #2
 800815a:	d11b      	bne.n	8008194 <HAL_SPI_TransmitReceive+0x1aa>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <HAL_SPI_TransmitReceive+0x1aa>
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b01      	cmp	r3, #1
 800816a:	d113      	bne.n	8008194 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	1c9a      	adds	r2, r3, #2
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d11c      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x1f2>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d016      	beq.n	80081dc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	b292      	uxth	r2, r2
 80081ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	1c9a      	adds	r2, r3, #2
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081d8:	2301      	movs	r3, #1
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081dc:	f7fc fe04 	bl	8004de8 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d807      	bhi.n	80081fc <HAL_SPI_TransmitReceive+0x212>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d003      	beq.n	80081fc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80081fa:	e0fb      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1a3      	bne.n	800814e <HAL_SPI_TransmitReceive+0x164>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d19d      	bne.n	800814e <HAL_SPI_TransmitReceive+0x164>
 8008212:	e0df      	b.n	80083d4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_SPI_TransmitReceive+0x23a>
 800821c:	8a7b      	ldrh	r3, [r7, #18]
 800821e:	2b01      	cmp	r3, #1
 8008220:	f040 80cb 	bne.w	80083ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d912      	bls.n	8008254 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b02      	subs	r3, #2
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008252:	e0b2      	b.n	80083ba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	7812      	ldrb	r2, [r2, #0]
 8008260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800827a:	e09e      	b.n	80083ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b02      	cmp	r3, #2
 8008288:	d134      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x30a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02f      	beq.n	80082f4 <HAL_SPI_TransmitReceive+0x30a>
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	2b01      	cmp	r3, #1
 8008298:	d12c      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d912      	bls.n	80082ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	881a      	ldrh	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	1c9a      	adds	r2, r3, #2
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b02      	subs	r3, #2
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082c8:	e012      	b.n	80082f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	330c      	adds	r3, #12
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d148      	bne.n	8008394 <HAL_SPI_TransmitReceive+0x3aa>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d042      	beq.n	8008394 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d923      	bls.n	8008362 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	b292      	uxth	r2, r2
 8008326:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	1c9a      	adds	r2, r3, #2
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b02      	subs	r3, #2
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d81f      	bhi.n	8008390 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800835e:	605a      	str	r2, [r3, #4]
 8008360:	e016      	b.n	8008390 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f103 020c 	add.w	r2, r3, #12
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008390:	2301      	movs	r3, #1
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008394:	f7fc fd28 	bl	8004de8 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d803      	bhi.n	80083ac <HAL_SPI_TransmitReceive+0x3c2>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d102      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x3c8>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80083b8:	e01c      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af5b 	bne.w	800827c <HAL_SPI_TransmitReceive+0x292>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f af54 	bne.w	800827c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f99d 	bl	8008718 <SPI_EndRxTxTransaction>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d006      	beq.n	80083f2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	661a      	str	r2, [r3, #96]	; 0x60
 80083f0:	e000      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80083f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008408:	4618      	mov	r0, r3
 800840a:	3728      	adds	r7, #40	; 0x28
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800841e:	b2db      	uxtb	r3, r3
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	4613      	mov	r3, r2
 800843a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800843c:	f7fc fcd4 	bl	8004de8 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4413      	add	r3, r2
 800844a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800844c:	f7fc fccc 	bl	8004de8 <HAL_GetTick>
 8008450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008452:	4b39      	ldr	r3, [pc, #228]	; (8008538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	015b      	lsls	r3, r3, #5
 8008458:	0d1b      	lsrs	r3, r3, #20
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	fb02 f303 	mul.w	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008462:	e054      	b.n	800850e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d050      	beq.n	800850e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800846c:	f7fc fcbc 	bl	8004de8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	429a      	cmp	r2, r3
 800847a:	d902      	bls.n	8008482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d13d      	bne.n	80084fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800849a:	d111      	bne.n	80084c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d004      	beq.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ae:	d107      	bne.n	80084c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c8:	d10f      	bne.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e017      	b.n	800852e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	3b01      	subs	r3, #1
 800850c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4013      	ands	r3, r2
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	bf0c      	ite	eq
 800851e:	2301      	moveq	r3, #1
 8008520:	2300      	movne	r3, #0
 8008522:	b2db      	uxtb	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	429a      	cmp	r2, r3
 800852a:	d19b      	bne.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	2000007c 	.word	0x2000007c

0800853c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	; 0x28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800854e:	f7fc fc4b 	bl	8004de8 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	4413      	add	r3, r2
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800855e:	f7fc fc43 	bl	8004de8 <HAL_GetTick>
 8008562:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800856c:	4b3d      	ldr	r3, [pc, #244]	; (8008664 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	00da      	lsls	r2, r3, #3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	fb02 f303 	mul.w	r3, r2, r3
 8008582:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008584:	e060      	b.n	8008648 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800858c:	d107      	bne.n	800859e <SPI_WaitFifoStateUntilTimeout+0x62>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800859c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d050      	beq.n	8008648 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a6:	f7fc fc1f 	bl	8004de8 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d902      	bls.n	80085bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d13d      	bne.n	8008638 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085d4:	d111      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d004      	beq.n	80085ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e8:	d107      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	d10f      	bne.n	8008624 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008622:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e010      	b.n	800865a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	3b01      	subs	r3, #1
 8008646:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4013      	ands	r3, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d196      	bne.n	8008586 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000007c 	.word	0x2000007c

08008668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867c:	d111      	bne.n	80086a2 <SPI_EndRxTransaction+0x3a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008686:	d004      	beq.n	8008692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008690:	d107      	bne.n	80086a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff febd 	bl	800842c <SPI_WaitFlagStateUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e023      	b.n	8008710 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086d0:	d11d      	bne.n	800870e <SPI_EndRxTransaction+0xa6>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086da:	d004      	beq.n	80086e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e4:	d113      	bne.n	800870e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff22 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e000      	b.n	8008710 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ff03 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008740:	f043 0220 	orr.w	r2, r3, #32
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e027      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fe68 	bl	800842c <SPI_WaitFlagStateUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d007      	beq.n	8008772 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008766:	f043 0220 	orr.w	r2, r3, #32
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e014      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff fedc 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878e:	f043 0220 	orr.w	r2, r3, #32
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e000      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e049      	b.n	800884a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f8 fd8e 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f000 f99e 	bl	8008b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b01      	cmp	r3, #1
 8008866:	d001      	beq.n	800886c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e04f      	b.n	800890c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a23      	ldr	r2, [pc, #140]	; (8008918 <HAL_TIM_Base_Start_IT+0xc4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d01d      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008896:	d018      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1f      	ldr	r2, [pc, #124]	; (800891c <HAL_TIM_Base_Start_IT+0xc8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <HAL_TIM_Base_Start_IT+0xcc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00e      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1c      	ldr	r2, [pc, #112]	; (8008924 <HAL_TIM_Base_Start_IT+0xd0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d009      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1b      	ldr	r2, [pc, #108]	; (8008928 <HAL_TIM_Base_Start_IT+0xd4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d004      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x76>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <HAL_TIM_Base_Start_IT+0xd8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d115      	bne.n	80088f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <HAL_TIM_Base_Start_IT+0xdc>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b06      	cmp	r3, #6
 80088da:	d015      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0xb4>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e2:	d011      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0201 	orr.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f4:	e008      	b.n	8008908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e000      	b.n	800890a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008908:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	40012c00 	.word	0x40012c00
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40013400 	.word	0x40013400
 800892c:	40014000 	.word	0x40014000
 8008930:	00010007 	.word	0x00010007

08008934 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a1a      	ldr	r2, [r3, #32]
 8008952:	f241 1311 	movw	r3, #4369	; 0x1111
 8008956:	4013      	ands	r3, r2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10f      	bne.n	800897c <HAL_TIM_Base_Stop_IT+0x48>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	f240 4344 	movw	r3, #1092	; 0x444
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <HAL_TIM_Base_Stop_IT+0x48>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_ConfigClockSource+0x1c>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e0b6      	b.n	8008b1c <HAL_TIM_ConfigClockSource+0x18a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ea:	d03e      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0xd8>
 80089ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f0:	f200 8087 	bhi.w	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 80089f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f8:	f000 8086 	beq.w	8008b08 <HAL_TIM_ConfigClockSource+0x176>
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a00:	d87f      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a02:	2b70      	cmp	r3, #112	; 0x70
 8008a04:	d01a      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0xaa>
 8008a06:	2b70      	cmp	r3, #112	; 0x70
 8008a08:	d87b      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a0a:	2b60      	cmp	r3, #96	; 0x60
 8008a0c:	d050      	beq.n	8008ab0 <HAL_TIM_ConfigClockSource+0x11e>
 8008a0e:	2b60      	cmp	r3, #96	; 0x60
 8008a10:	d877      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a12:	2b50      	cmp	r3, #80	; 0x50
 8008a14:	d03c      	beq.n	8008a90 <HAL_TIM_ConfigClockSource+0xfe>
 8008a16:	2b50      	cmp	r3, #80	; 0x50
 8008a18:	d873      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d058      	beq.n	8008ad0 <HAL_TIM_ConfigClockSource+0x13e>
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d86f      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a22:	2b30      	cmp	r3, #48	; 0x30
 8008a24:	d064      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x15e>
 8008a26:	2b30      	cmp	r3, #48	; 0x30
 8008a28:	d86b      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d060      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x15e>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d867      	bhi.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d05c      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x15e>
 8008a36:	2b10      	cmp	r3, #16
 8008a38:	d05a      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x15e>
 8008a3a:	e062      	b.n	8008b02 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6899      	ldr	r1, [r3, #8]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f000 f97e 	bl	8008d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	609a      	str	r2, [r3, #8]
      break;
 8008a68:	e04f      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6899      	ldr	r1, [r3, #8]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f000 f967 	bl	8008d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a8c:	609a      	str	r2, [r3, #8]
      break;
 8008a8e:	e03c      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f000 f8db 	bl	8008c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2150      	movs	r1, #80	; 0x50
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f934 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008aae:	e02c      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6859      	ldr	r1, [r3, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	461a      	mov	r2, r3
 8008abe:	f000 f8fa 	bl	8008cb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2160      	movs	r1, #96	; 0x60
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f924 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008ace:	e01c      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6859      	ldr	r1, [r3, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f000 f8bb 	bl	8008c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2140      	movs	r1, #64	; 0x40
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 f914 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008aee:	e00c      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f000 f90b 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008b00:	e003      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
      break;
 8008b06:	e000      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a40      	ldr	r2, [pc, #256]	; (8008c38 <TIM_Base_SetConfig+0x114>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d013      	beq.n	8008b64 <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b42:	d00f      	beq.n	8008b64 <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a3d      	ldr	r2, [pc, #244]	; (8008c3c <TIM_Base_SetConfig+0x118>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a3c      	ldr	r2, [pc, #240]	; (8008c40 <TIM_Base_SetConfig+0x11c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a3b      	ldr	r2, [pc, #236]	; (8008c44 <TIM_Base_SetConfig+0x120>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_Base_SetConfig+0x40>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a3a      	ldr	r2, [pc, #232]	; (8008c48 <TIM_Base_SetConfig+0x124>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d108      	bne.n	8008b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a2f      	ldr	r2, [pc, #188]	; (8008c38 <TIM_Base_SetConfig+0x114>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01f      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b84:	d01b      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2c      	ldr	r2, [pc, #176]	; (8008c3c <TIM_Base_SetConfig+0x118>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d017      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2b      	ldr	r2, [pc, #172]	; (8008c40 <TIM_Base_SetConfig+0x11c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2a      	ldr	r2, [pc, #168]	; (8008c44 <TIM_Base_SetConfig+0x120>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00f      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a29      	ldr	r2, [pc, #164]	; (8008c48 <TIM_Base_SetConfig+0x124>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00b      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a28      	ldr	r2, [pc, #160]	; (8008c4c <TIM_Base_SetConfig+0x128>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d007      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a27      	ldr	r2, [pc, #156]	; (8008c50 <TIM_Base_SetConfig+0x12c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d003      	beq.n	8008bbe <TIM_Base_SetConfig+0x9a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a26      	ldr	r2, [pc, #152]	; (8008c54 <TIM_Base_SetConfig+0x130>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d108      	bne.n	8008bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <TIM_Base_SetConfig+0x114>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00f      	beq.n	8008c1c <TIM_Base_SetConfig+0xf8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a12      	ldr	r2, [pc, #72]	; (8008c48 <TIM_Base_SetConfig+0x124>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <TIM_Base_SetConfig+0xf8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a11      	ldr	r2, [pc, #68]	; (8008c4c <TIM_Base_SetConfig+0x128>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_Base_SetConfig+0xf8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <TIM_Base_SetConfig+0x12c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_Base_SetConfig+0xf8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a0f      	ldr	r2, [pc, #60]	; (8008c54 <TIM_Base_SetConfig+0x130>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d103      	bne.n	8008c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	615a      	str	r2, [r3, #20]
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40012c00 	.word	0x40012c00
 8008c3c:	40000400 	.word	0x40000400
 8008c40:	40000800 	.word	0x40000800
 8008c44:	40000c00 	.word	0x40000c00
 8008c48:	40013400 	.word	0x40013400
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40014400 	.word	0x40014400
 8008c54:	40014800 	.word	0x40014800

08008c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 030a 	bic.w	r3, r3, #10
 8008c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0210 	bic.w	r2, r3, #16
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	031b      	lsls	r3, r3, #12
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f043 0307 	orr.w	r3, r3, #7
 8008d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	609a      	str	r2, [r3, #8]
}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e068      	b.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d004      	beq.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a2d      	ldr	r2, [pc, #180]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d108      	bne.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1e      	ldr	r2, [pc, #120]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01d      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e16:	d018      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a1b      	ldr	r2, [pc, #108]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a1a      	ldr	r2, [pc, #104]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00e      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a18      	ldr	r2, [pc, #96]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a14      	ldr	r2, [pc, #80]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d10c      	bne.n	8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40012c00 	.word	0x40012c00
 8008e88:	40013400 	.word	0x40013400
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	40014000 	.word	0x40014000

08008e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e042      	b.n	8008f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d106      	bne.n	8008ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f83b 	bl	8008f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2224      	movs	r2, #36	; 0x24
 8008eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0201 	bic.w	r2, r2, #1
 8008edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f94e 	bl	8009180 <UART_SetConfig>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e022      	b.n	8008f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fc3e 	bl	8009778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0201 	orr.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fcc5 	bl	80098bc <UART_CheckIdleState>
 8008f32:	4603      	mov	r3, r0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	f040 8084 	bne.w	8009074 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <HAL_UART_Transmit+0x28>
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e07c      	b.n	8009076 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_UART_Transmit+0x3a>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e075      	b.n	8009076 <HAL_UART_Transmit+0x126>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2221      	movs	r2, #33	; 0x21
 8008f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fa2:	f7fb ff21 	bl	8004de8 <HAL_GetTick>
 8008fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc0:	d108      	bne.n	8008fd4 <HAL_UART_Transmit+0x84>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e003      	b.n	8008fdc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008fe4:	e02d      	b.n	8009042 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2200      	movs	r2, #0
 8008fee:	2180      	movs	r1, #128	; 0x80
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fcae 	bl	8009952 <UART_WaitOnFlagUntilTimeout>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e03a      	b.n	8009076 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	881a      	ldrh	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009012:	b292      	uxth	r2, r2
 8009014:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	3302      	adds	r3, #2
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	e008      	b.n	8009030 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	b292      	uxth	r2, r2
 8009028:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1cb      	bne.n	8008fe6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	2140      	movs	r1, #64	; 0x40
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fc7a 	bl	8009952 <UART_WaitOnFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e006      	b.n	8009076 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2220      	movs	r2, #32
 800906c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009094:	2b20      	cmp	r3, #32
 8009096:	d142      	bne.n	800911e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Receive_DMA+0x24>
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e03b      	b.n	8009120 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <HAL_UART_Receive_DMA+0x36>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e034      	b.n	8009120 <HAL_UART_Receive_DMA+0xa0>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a17      	ldr	r2, [pc, #92]	; (8009128 <HAL_UART_Receive_DMA+0xa8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01f      	beq.n	800910e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d018      	beq.n	800910e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	623b      	str	r3, [r7, #32]
 80090fc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	69f9      	ldr	r1, [r7, #28]
 8009100:	6a3a      	ldr	r2, [r7, #32]
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	61bb      	str	r3, [r7, #24]
   return(result);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e6      	bne.n	80090dc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	461a      	mov	r2, r3
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fce5 	bl	8009ae4 <UART_Start_Receive_DMA>
 800911a:	4603      	mov	r3, r0
 800911c:	e000      	b.n	8009120 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3728      	adds	r7, #40	; 0x28
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40008000 	.word	0x40008000

0800912c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009184:	b08c      	sub	sp, #48	; 0x30
 8009186:	af00      	add	r7, sp, #0
 8009188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	431a      	orrs	r2, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	431a      	orrs	r2, r3
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4baa      	ldr	r3, [pc, #680]	; (8009458 <UART_SetConfig+0x2d8>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	6812      	ldr	r2, [r2, #0]
 80091b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a9f      	ldr	r2, [pc, #636]	; (800945c <UART_SetConfig+0x2dc>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e8:	4313      	orrs	r3, r2
 80091ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80091f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009200:	430b      	orrs	r3, r1
 8009202:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	f023 010f 	bic.w	r1, r3, #15
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a90      	ldr	r2, [pc, #576]	; (8009460 <UART_SetConfig+0x2e0>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d125      	bne.n	8009270 <UART_SetConfig+0xf0>
 8009224:	4b8f      	ldr	r3, [pc, #572]	; (8009464 <UART_SetConfig+0x2e4>)
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d81a      	bhi.n	8009268 <UART_SetConfig+0xe8>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0xb8>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009249 	.word	0x08009249
 800923c:	08009259 	.word	0x08009259
 8009240:	08009251 	.word	0x08009251
 8009244:	08009261 	.word	0x08009261
 8009248:	2301      	movs	r3, #1
 800924a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800924e:	e116      	b.n	800947e <UART_SetConfig+0x2fe>
 8009250:	2302      	movs	r3, #2
 8009252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009256:	e112      	b.n	800947e <UART_SetConfig+0x2fe>
 8009258:	2304      	movs	r3, #4
 800925a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800925e:	e10e      	b.n	800947e <UART_SetConfig+0x2fe>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009266:	e10a      	b.n	800947e <UART_SetConfig+0x2fe>
 8009268:	2310      	movs	r3, #16
 800926a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800926e:	e106      	b.n	800947e <UART_SetConfig+0x2fe>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a7c      	ldr	r2, [pc, #496]	; (8009468 <UART_SetConfig+0x2e8>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d138      	bne.n	80092ec <UART_SetConfig+0x16c>
 800927a:	4b7a      	ldr	r3, [pc, #488]	; (8009464 <UART_SetConfig+0x2e4>)
 800927c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009280:	f003 030c 	and.w	r3, r3, #12
 8009284:	2b0c      	cmp	r3, #12
 8009286:	d82d      	bhi.n	80092e4 <UART_SetConfig+0x164>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <UART_SetConfig+0x110>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092c5 	.word	0x080092c5
 8009294:	080092e5 	.word	0x080092e5
 8009298:	080092e5 	.word	0x080092e5
 800929c:	080092e5 	.word	0x080092e5
 80092a0:	080092d5 	.word	0x080092d5
 80092a4:	080092e5 	.word	0x080092e5
 80092a8:	080092e5 	.word	0x080092e5
 80092ac:	080092e5 	.word	0x080092e5
 80092b0:	080092cd 	.word	0x080092cd
 80092b4:	080092e5 	.word	0x080092e5
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	080092e5 	.word	0x080092e5
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	2300      	movs	r3, #0
 80092c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ca:	e0d8      	b.n	800947e <UART_SetConfig+0x2fe>
 80092cc:	2302      	movs	r3, #2
 80092ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d2:	e0d4      	b.n	800947e <UART_SetConfig+0x2fe>
 80092d4:	2304      	movs	r3, #4
 80092d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092da:	e0d0      	b.n	800947e <UART_SetConfig+0x2fe>
 80092dc:	2308      	movs	r3, #8
 80092de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092e2:	e0cc      	b.n	800947e <UART_SetConfig+0x2fe>
 80092e4:	2310      	movs	r3, #16
 80092e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ea:	e0c8      	b.n	800947e <UART_SetConfig+0x2fe>
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a5e      	ldr	r2, [pc, #376]	; (800946c <UART_SetConfig+0x2ec>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d125      	bne.n	8009342 <UART_SetConfig+0x1c2>
 80092f6:	4b5b      	ldr	r3, [pc, #364]	; (8009464 <UART_SetConfig+0x2e4>)
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009300:	2b30      	cmp	r3, #48	; 0x30
 8009302:	d016      	beq.n	8009332 <UART_SetConfig+0x1b2>
 8009304:	2b30      	cmp	r3, #48	; 0x30
 8009306:	d818      	bhi.n	800933a <UART_SetConfig+0x1ba>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d00a      	beq.n	8009322 <UART_SetConfig+0x1a2>
 800930c:	2b20      	cmp	r3, #32
 800930e:	d814      	bhi.n	800933a <UART_SetConfig+0x1ba>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <UART_SetConfig+0x19a>
 8009314:	2b10      	cmp	r3, #16
 8009316:	d008      	beq.n	800932a <UART_SetConfig+0x1aa>
 8009318:	e00f      	b.n	800933a <UART_SetConfig+0x1ba>
 800931a:	2300      	movs	r3, #0
 800931c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009320:	e0ad      	b.n	800947e <UART_SetConfig+0x2fe>
 8009322:	2302      	movs	r3, #2
 8009324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009328:	e0a9      	b.n	800947e <UART_SetConfig+0x2fe>
 800932a:	2304      	movs	r3, #4
 800932c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009330:	e0a5      	b.n	800947e <UART_SetConfig+0x2fe>
 8009332:	2308      	movs	r3, #8
 8009334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009338:	e0a1      	b.n	800947e <UART_SetConfig+0x2fe>
 800933a:	2310      	movs	r3, #16
 800933c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009340:	e09d      	b.n	800947e <UART_SetConfig+0x2fe>
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a4a      	ldr	r2, [pc, #296]	; (8009470 <UART_SetConfig+0x2f0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d125      	bne.n	8009398 <UART_SetConfig+0x218>
 800934c:	4b45      	ldr	r3, [pc, #276]	; (8009464 <UART_SetConfig+0x2e4>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009356:	2bc0      	cmp	r3, #192	; 0xc0
 8009358:	d016      	beq.n	8009388 <UART_SetConfig+0x208>
 800935a:	2bc0      	cmp	r3, #192	; 0xc0
 800935c:	d818      	bhi.n	8009390 <UART_SetConfig+0x210>
 800935e:	2b80      	cmp	r3, #128	; 0x80
 8009360:	d00a      	beq.n	8009378 <UART_SetConfig+0x1f8>
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d814      	bhi.n	8009390 <UART_SetConfig+0x210>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <UART_SetConfig+0x1f0>
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d008      	beq.n	8009380 <UART_SetConfig+0x200>
 800936e:	e00f      	b.n	8009390 <UART_SetConfig+0x210>
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009376:	e082      	b.n	800947e <UART_SetConfig+0x2fe>
 8009378:	2302      	movs	r3, #2
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800937e:	e07e      	b.n	800947e <UART_SetConfig+0x2fe>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009386:	e07a      	b.n	800947e <UART_SetConfig+0x2fe>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800938e:	e076      	b.n	800947e <UART_SetConfig+0x2fe>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009396:	e072      	b.n	800947e <UART_SetConfig+0x2fe>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a35      	ldr	r2, [pc, #212]	; (8009474 <UART_SetConfig+0x2f4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d12a      	bne.n	80093f8 <UART_SetConfig+0x278>
 80093a2:	4b30      	ldr	r3, [pc, #192]	; (8009464 <UART_SetConfig+0x2e4>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093b0:	d01a      	beq.n	80093e8 <UART_SetConfig+0x268>
 80093b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093b6:	d81b      	bhi.n	80093f0 <UART_SetConfig+0x270>
 80093b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093bc:	d00c      	beq.n	80093d8 <UART_SetConfig+0x258>
 80093be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c2:	d815      	bhi.n	80093f0 <UART_SetConfig+0x270>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <UART_SetConfig+0x250>
 80093c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093cc:	d008      	beq.n	80093e0 <UART_SetConfig+0x260>
 80093ce:	e00f      	b.n	80093f0 <UART_SetConfig+0x270>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093d6:	e052      	b.n	800947e <UART_SetConfig+0x2fe>
 80093d8:	2302      	movs	r3, #2
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093de:	e04e      	b.n	800947e <UART_SetConfig+0x2fe>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093e6:	e04a      	b.n	800947e <UART_SetConfig+0x2fe>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ee:	e046      	b.n	800947e <UART_SetConfig+0x2fe>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093f6:	e042      	b.n	800947e <UART_SetConfig+0x2fe>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a17      	ldr	r2, [pc, #92]	; (800945c <UART_SetConfig+0x2dc>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d13a      	bne.n	8009478 <UART_SetConfig+0x2f8>
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <UART_SetConfig+0x2e4>)
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800940c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009410:	d01a      	beq.n	8009448 <UART_SetConfig+0x2c8>
 8009412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009416:	d81b      	bhi.n	8009450 <UART_SetConfig+0x2d0>
 8009418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800941c:	d00c      	beq.n	8009438 <UART_SetConfig+0x2b8>
 800941e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009422:	d815      	bhi.n	8009450 <UART_SetConfig+0x2d0>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <UART_SetConfig+0x2b0>
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942c:	d008      	beq.n	8009440 <UART_SetConfig+0x2c0>
 800942e:	e00f      	b.n	8009450 <UART_SetConfig+0x2d0>
 8009430:	2300      	movs	r3, #0
 8009432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009436:	e022      	b.n	800947e <UART_SetConfig+0x2fe>
 8009438:	2302      	movs	r3, #2
 800943a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800943e:	e01e      	b.n	800947e <UART_SetConfig+0x2fe>
 8009440:	2304      	movs	r3, #4
 8009442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009446:	e01a      	b.n	800947e <UART_SetConfig+0x2fe>
 8009448:	2308      	movs	r3, #8
 800944a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800944e:	e016      	b.n	800947e <UART_SetConfig+0x2fe>
 8009450:	2310      	movs	r3, #16
 8009452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009456:	e012      	b.n	800947e <UART_SetConfig+0x2fe>
 8009458:	cfff69f3 	.word	0xcfff69f3
 800945c:	40008000 	.word	0x40008000
 8009460:	40013800 	.word	0x40013800
 8009464:	40021000 	.word	0x40021000
 8009468:	40004400 	.word	0x40004400
 800946c:	40004800 	.word	0x40004800
 8009470:	40004c00 	.word	0x40004c00
 8009474:	40005000 	.word	0x40005000
 8009478:	2310      	movs	r3, #16
 800947a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4aae      	ldr	r2, [pc, #696]	; (800973c <UART_SetConfig+0x5bc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	f040 8097 	bne.w	80095b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800948a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800948e:	2b08      	cmp	r3, #8
 8009490:	d823      	bhi.n	80094da <UART_SetConfig+0x35a>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <UART_SetConfig+0x318>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094bd 	.word	0x080094bd
 800949c:	080094db 	.word	0x080094db
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094db 	.word	0x080094db
 80094a8:	080094cb 	.word	0x080094cb
 80094ac:	080094db 	.word	0x080094db
 80094b0:	080094db 	.word	0x080094db
 80094b4:	080094db 	.word	0x080094db
 80094b8:	080094d3 	.word	0x080094d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094bc:	f7fd f89a 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 80094c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094c2:	e010      	b.n	80094e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c4:	4b9e      	ldr	r3, [pc, #632]	; (8009740 <UART_SetConfig+0x5c0>)
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094c8:	e00d      	b.n	80094e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ca:	f7fc fffb 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094d0:	e009      	b.n	80094e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094d8:	e005      	b.n	80094e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8130 	beq.w	800974e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	4a94      	ldr	r2, [pc, #592]	; (8009744 <UART_SetConfig+0x5c4>)
 80094f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009500:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	429a      	cmp	r2, r3
 8009510:	d305      	bcc.n	800951e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	429a      	cmp	r2, r3
 800951c:	d903      	bls.n	8009526 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009524:	e113      	b.n	800974e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2200      	movs	r2, #0
 800952a:	60bb      	str	r3, [r7, #8]
 800952c:	60fa      	str	r2, [r7, #12]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	4a84      	ldr	r2, [pc, #528]	; (8009744 <UART_SetConfig+0x5c4>)
 8009534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009538:	b29b      	uxth	r3, r3
 800953a:	2200      	movs	r2, #0
 800953c:	603b      	str	r3, [r7, #0]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009548:	f7f7 fa40 	bl	80009cc <__aeabi_uldivmod>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4610      	mov	r0, r2
 8009552:	4619      	mov	r1, r3
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	020b      	lsls	r3, r1, #8
 800955e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009562:	0202      	lsls	r2, r0, #8
 8009564:	6979      	ldr	r1, [r7, #20]
 8009566:	6849      	ldr	r1, [r1, #4]
 8009568:	0849      	lsrs	r1, r1, #1
 800956a:	2000      	movs	r0, #0
 800956c:	460c      	mov	r4, r1
 800956e:	4605      	mov	r5, r0
 8009570:	eb12 0804 	adds.w	r8, r2, r4
 8009574:	eb43 0905 	adc.w	r9, r3, r5
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	469a      	mov	sl, r3
 8009580:	4693      	mov	fp, r2
 8009582:	4652      	mov	r2, sl
 8009584:	465b      	mov	r3, fp
 8009586:	4640      	mov	r0, r8
 8009588:	4649      	mov	r1, r9
 800958a:	f7f7 fa1f 	bl	80009cc <__aeabi_uldivmod>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4613      	mov	r3, r2
 8009594:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800959c:	d308      	bcc.n	80095b0 <UART_SetConfig+0x430>
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095a4:	d204      	bcs.n	80095b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6a3a      	ldr	r2, [r7, #32]
 80095ac:	60da      	str	r2, [r3, #12]
 80095ae:	e0ce      	b.n	800974e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80095b6:	e0ca      	b.n	800974e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	d166      	bne.n	8009690 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80095c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d827      	bhi.n	800961a <UART_SetConfig+0x49a>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x450>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009605 	.word	0x08009605
 80095dc:	0800961b 	.word	0x0800961b
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	0800961b 	.word	0x0800961b
 80095e8:	0800961b 	.word	0x0800961b
 80095ec:	0800961b 	.word	0x0800961b
 80095f0:	08009613 	.word	0x08009613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095f4:	f7fc fffe 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 80095f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095fa:	e014      	b.n	8009626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095fc:	f7fd f810 	bl	8006620 <HAL_RCC_GetPCLK2Freq>
 8009600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009602:	e010      	b.n	8009626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009604:	4b4e      	ldr	r3, [pc, #312]	; (8009740 <UART_SetConfig+0x5c0>)
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009608:	e00d      	b.n	8009626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800960a:	f7fc ff5b 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 800960e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009610:	e009      	b.n	8009626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009618:	e005      	b.n	8009626 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8090 	beq.w	800974e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	4a44      	ldr	r2, [pc, #272]	; (8009744 <UART_SetConfig+0x5c4>)
 8009634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009638:	461a      	mov	r2, r3
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009640:	005a      	lsls	r2, r3, #1
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	441a      	add	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009652:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	2b0f      	cmp	r3, #15
 8009658:	d916      	bls.n	8009688 <UART_SetConfig+0x508>
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009660:	d212      	bcs.n	8009688 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	b29b      	uxth	r3, r3
 8009666:	f023 030f 	bic.w	r3, r3, #15
 800966a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	b29b      	uxth	r3, r3
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	b29a      	uxth	r2, r3
 8009678:	8bfb      	ldrh	r3, [r7, #30]
 800967a:	4313      	orrs	r3, r2
 800967c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	8bfa      	ldrh	r2, [r7, #30]
 8009684:	60da      	str	r2, [r3, #12]
 8009686:	e062      	b.n	800974e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800968e:	e05e      	b.n	800974e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009694:	2b08      	cmp	r3, #8
 8009696:	d828      	bhi.n	80096ea <UART_SetConfig+0x56a>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x520>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096cd 	.word	0x080096cd
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096eb 	.word	0x080096eb
 80096b0:	080096db 	.word	0x080096db
 80096b4:	080096eb 	.word	0x080096eb
 80096b8:	080096eb 	.word	0x080096eb
 80096bc:	080096eb 	.word	0x080096eb
 80096c0:	080096e3 	.word	0x080096e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c4:	f7fc ff96 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 80096c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096ca:	e014      	b.n	80096f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096cc:	f7fc ffa8 	bl	8006620 <HAL_RCC_GetPCLK2Freq>
 80096d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096d2:	e010      	b.n	80096f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d4:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <UART_SetConfig+0x5c0>)
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096d8:	e00d      	b.n	80096f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096da:	f7fc fef3 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 80096de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096e0:	e009      	b.n	80096f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096e8:	e005      	b.n	80096f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80096f4:	bf00      	nop
    }

    if (pclk != 0U)
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d028      	beq.n	800974e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	4a10      	ldr	r2, [pc, #64]	; (8009744 <UART_SetConfig+0x5c4>)
 8009702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009706:	461a      	mov	r2, r3
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	fbb3 f2f2 	udiv	r2, r3, r2
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	441a      	add	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	fbb2 f3f3 	udiv	r3, r2, r3
 800971e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	2b0f      	cmp	r3, #15
 8009724:	d910      	bls.n	8009748 <UART_SetConfig+0x5c8>
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d20c      	bcs.n	8009748 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	b29a      	uxth	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60da      	str	r2, [r3, #12]
 8009738:	e009      	b.n	800974e <UART_SetConfig+0x5ce>
 800973a:	bf00      	nop
 800973c:	40008000 	.word	0x40008000
 8009740:	00f42400 	.word	0x00f42400
 8009744:	0800cc4c 	.word	0x0800cc4c
      }
      else
      {
        ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2201      	movs	r2, #1
 8009752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2201      	movs	r2, #1
 800975a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2200      	movs	r2, #0
 8009762:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2200      	movs	r2, #0
 8009768:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800976a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800976e:	4618      	mov	r0, r3
 8009770:	3730      	adds	r7, #48	; 0x30
 8009772:	46bd      	mov	sp, r7
 8009774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01a      	beq.n	800988e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009876:	d10a      	bne.n	800988e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098cc:	f7fb fa8c 	bl	8004de8 <HAL_GetTick>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d10e      	bne.n	80098fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f82f 	bl	8009952 <UART_WaitOnFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e025      	b.n	800994a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d10e      	bne.n	800992a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800990c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f819 	bl	8009952 <UART_WaitOnFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e00f      	b.n	800994a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b09c      	sub	sp, #112	; 0x70
 8009956:	af00      	add	r7, sp, #0
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	4613      	mov	r3, r2
 8009960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009962:	e0a9      	b.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	f000 80a5 	beq.w	8009ab8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800996e:	f7fb fa3b 	bl	8004de8 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800997a:	429a      	cmp	r2, r3
 800997c:	d302      	bcc.n	8009984 <UART_WaitOnFlagUntilTimeout+0x32>
 800997e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009980:	2b00      	cmp	r3, #0
 8009982:	d140      	bne.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009998:	667b      	str	r3, [r7, #100]	; 0x64
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e6      	bne.n	8009984 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	f023 0301 	bic.w	r3, r3, #1
 80099cc:	663b      	str	r3, [r7, #96]	; 0x60
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80099d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e5      	bne.n	80099b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2220      	movs	r2, #32
 80099ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e069      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d051      	beq.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a22:	d149      	bne.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3308      	adds	r3, #8
 8009a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f023 0301 	bic.w	r3, r3, #1
 8009a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a80:	623a      	str	r2, [r7, #32]
 8009a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	6a3a      	ldr	r2, [r7, #32]
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e5      	bne.n	8009a60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e010      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69da      	ldr	r2, [r3, #28]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2301      	moveq	r3, #1
 8009aca:	2300      	movne	r3, #0
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	f43f af46 	beq.w	8009964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3770      	adds	r7, #112	; 0x70
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b096      	sub	sp, #88	; 0x58
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2222      	movs	r2, #34	; 0x22
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d02c      	beq.n	8009b72 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1c:	4a42      	ldr	r2, [pc, #264]	; (8009c28 <UART_Start_Receive_DMA+0x144>)
 8009b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b24:	4a41      	ldr	r2, [pc, #260]	; (8009c2c <UART_Start_Receive_DMA+0x148>)
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2c:	4a40      	ldr	r2, [pc, #256]	; (8009c30 <UART_Start_Receive_DMA+0x14c>)
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b34:	2200      	movs	r2, #0
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3324      	adds	r3, #36	; 0x24
 8009b42:	4619      	mov	r1, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b48:	461a      	mov	r2, r3
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	f7fb fb4c 	bl	80051e8 <HAL_DMA_Start_IT>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00d      	beq.n	8009b72 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2210      	movs	r2, #16
 8009b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e055      	b.n	8009c1e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d018      	beq.n	8009bb4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b96:	657b      	str	r3, [r7, #84]	; 0x54
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ba2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e6      	bne.n	8009b82 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	f043 0301 	orr.w	r3, r3, #1
 8009bca:	653b      	str	r3, [r7, #80]	; 0x50
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bd4:	637a      	str	r2, [r7, #52]	; 0x34
 8009bd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e5      	bne.n	8009bb4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c08:	623a      	str	r2, [r7, #32]
 8009c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	69f9      	ldr	r1, [r7, #28]
 8009c0e:	6a3a      	ldr	r2, [r7, #32]
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e5      	bne.n	8009be8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3758      	adds	r7, #88	; 0x58
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	08009d83 	.word	0x08009d83
 8009c2c:	08009ea9 	.word	0x08009ea9
 8009c30:	08009ee1 	.word	0x08009ee1

08009c34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b08f      	sub	sp, #60	; 0x3c
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e6      	bne.n	8009c3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009c84:	633b      	str	r3, [r7, #48]	; 0x30
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8e:	61ba      	str	r2, [r7, #24]
 8009c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e5      	bne.n	8009c6e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009caa:	bf00      	nop
 8009cac:	373c      	adds	r7, #60	; 0x3c
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b095      	sub	sp, #84	; 0x54
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8009cde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e6      	bne.n	8009cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d06:	f023 0301 	bic.w	r3, r3, #1
 8009d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e3      	bne.n	8009cf0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d118      	bne.n	8009d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f023 0310 	bic.w	r3, r3, #16
 8009d44:	647b      	str	r3, [r7, #68]	; 0x44
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d4e:	61bb      	str	r3, [r7, #24]
 8009d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e6      	bne.n	8009d30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009d76:	bf00      	nop
 8009d78:	3754      	adds	r7, #84	; 0x54
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b09c      	sub	sp, #112	; 0x70
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d171      	bne.n	8009e82 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	f023 0301 	bic.w	r3, r3, #1
 8009dee:	667b      	str	r3, [r7, #100]	; 0x64
 8009df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009df8:	647a      	str	r2, [r7, #68]	; 0x44
 8009dfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e5      	bne.n	8009dd8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3308      	adds	r3, #8
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	e853 3f00 	ldrex	r3, [r3]
 8009e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e22:	663b      	str	r3, [r7, #96]	; 0x60
 8009e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3308      	adds	r3, #8
 8009e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e2c:	633a      	str	r2, [r7, #48]	; 0x30
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e34:	e841 2300 	strex	r3, r2, [r1]
 8009e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1e5      	bne.n	8009e0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e42:	2220      	movs	r2, #32
 8009e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d118      	bne.n	8009e82 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f023 0310 	bic.w	r3, r3, #16
 8009e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	69b9      	ldr	r1, [r7, #24]
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e6      	bne.n	8009e50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d107      	bne.n	8009e9a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e90:	4619      	mov	r1, r3
 8009e92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e94:	f7ff f968 	bl	8009168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e98:	e002      	b.n	8009ea0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009e9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e9c:	f7ff f946 	bl	800912c <HAL_UART_RxCpltCallback>
}
 8009ea0:	bf00      	nop
 8009ea2:	3770      	adds	r7, #112	; 0x70
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d109      	bne.n	8009ed2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ec4:	085b      	lsrs	r3, r3, #1
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff f94c 	bl	8009168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ed0:	e002      	b.n	8009ed8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff f934 	bl	8009140 <HAL_UART_RxHalfCpltCallback>
}
 8009ed8:	bf00      	nop
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f08:	2b80      	cmp	r3, #128	; 0x80
 8009f0a:	d109      	bne.n	8009f20 <UART_DMAError+0x40>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b21      	cmp	r3, #33	; 0x21
 8009f10:	d106      	bne.n	8009f20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009f1a:	6978      	ldr	r0, [r7, #20]
 8009f1c:	f7ff fe8a 	bl	8009c34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2a:	2b40      	cmp	r3, #64	; 0x40
 8009f2c:	d109      	bne.n	8009f42 <UART_DMAError+0x62>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b22      	cmp	r3, #34	; 0x22
 8009f32:	d106      	bne.n	8009f42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f7ff feba 	bl	8009cb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f48:	f043 0210 	orr.w	r2, r3, #16
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff f8fe 	bl	8009154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f58:	bf00      	nop
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e027      	b.n	8009fc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2224      	movs	r2, #36	; 0x24
 8009f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e02d      	b.n	800a046 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	; 0x24
 8009ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f850 	bl	800a0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a062:	2302      	movs	r3, #2
 800a064:	e02d      	b.n	800a0c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2224      	movs	r2, #36	; 0x24
 800a072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f812 	bl	800a0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0ec:	e031      	b.n	800a152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ee:	2308      	movs	r3, #8
 800a0f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	0e5b      	lsrs	r3, r3, #25
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	0f5b      	lsrs	r3, r3, #29
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0307 	and.w	r3, r3, #7
 800a114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	7b3a      	ldrb	r2, [r7, #12]
 800a11a:	4911      	ldr	r1, [pc, #68]	; (800a160 <UARTEx_SetNbDataToProcess+0x94>)
 800a11c:	5c8a      	ldrb	r2, [r1, r2]
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a122:	7b3a      	ldrb	r2, [r7, #12]
 800a124:	490f      	ldr	r1, [pc, #60]	; (800a164 <UARTEx_SetNbDataToProcess+0x98>)
 800a126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a128:	fb93 f3f2 	sdiv	r3, r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	7b7a      	ldrb	r2, [r7, #13]
 800a138:	4909      	ldr	r1, [pc, #36]	; (800a160 <UARTEx_SetNbDataToProcess+0x94>)
 800a13a:	5c8a      	ldrb	r2, [r1, r2]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a140:	7b7a      	ldrb	r2, [r7, #13]
 800a142:	4908      	ldr	r1, [pc, #32]	; (800a164 <UARTEx_SetNbDataToProcess+0x98>)
 800a144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a146:	fb93 f3f2 	sdiv	r3, r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a152:	bf00      	nop
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	0800cc64 	.word	0x0800cc64
 800a164:	0800cc6c 	.word	0x0800cc6c

0800a168 <MotionPM_Initialize>:
 800a168:	4a11      	ldr	r2, [pc, #68]	; (800a1b0 <MotionPM_Initialize+0x48>)
 800a16a:	4912      	ldr	r1, [pc, #72]	; (800a1b4 <MotionPM_Initialize+0x4c>)
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	6813      	ldr	r3, [r2, #0]
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	680b      	ldr	r3, [r1, #0]
 800a17a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800a17e:	4013      	ands	r3, r2
 800a180:	f24c 2040 	movw	r0, #49728	; 0xc240
 800a184:	4283      	cmp	r3, r0
 800a186:	d01f      	beq.n	800a1c8 <MotionPM_Initialize+0x60>
 800a188:	680b      	ldr	r3, [r1, #0]
 800a18a:	f24c 2170 	movw	r1, #49776	; 0xc270
 800a18e:	4013      	ands	r3, r2
 800a190:	428b      	cmp	r3, r1
 800a192:	d019      	beq.n	800a1c8 <MotionPM_Initialize+0x60>
 800a194:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <MotionPM_Initialize+0x50>)
 800a196:	2201      	movs	r2, #1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1fc      	bne.n	800a19a <MotionPM_Initialize+0x32>
 800a1a0:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <MotionPM_Initialize+0x54>)
 800a1a2:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <MotionPM_Initialize+0x58>)
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <MotionPM_Initialize+0x5c>)
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d02b      	beq.n	800a206 <MotionPM_Initialize+0x9e>
 800a1ae:	e7fe      	b.n	800a1ae <MotionPM_Initialize+0x46>
 800a1b0:	e0002000 	.word	0xe0002000
 800a1b4:	e000ed00 	.word	0xe000ed00
 800a1b8:	40023008 	.word	0x40023008
 800a1bc:	40023000 	.word	0x40023000
 800a1c0:	f407a5c2 	.word	0xf407a5c2
 800a1c4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a1c8:	4be6      	ldr	r3, [pc, #920]	; (800a564 <MotionPM_Initialize+0x3fc>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e1      	bne.n	800a194 <MotionPM_Initialize+0x2c>
 800a1d0:	4ae5      	ldr	r2, [pc, #916]	; (800a568 <MotionPM_Initialize+0x400>)
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a1dc:	d006      	beq.n	800a1ec <MotionPM_Initialize+0x84>
 800a1de:	6813      	ldr	r3, [r2, #0]
 800a1e0:	f240 4283 	movw	r2, #1155	; 0x483
 800a1e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d1d3      	bne.n	800a194 <MotionPM_Initialize+0x2c>
 800a1ec:	4bdf      	ldr	r3, [pc, #892]	; (800a56c <MotionPM_Initialize+0x404>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	d1fc      	bne.n	800a1f2 <MotionPM_Initialize+0x8a>
 800a1f8:	4bdd      	ldr	r3, [pc, #884]	; (800a570 <MotionPM_Initialize+0x408>)
 800a1fa:	4ade      	ldr	r2, [pc, #888]	; (800a574 <MotionPM_Initialize+0x40c>)
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4bdd      	ldr	r3, [pc, #884]	; (800a578 <MotionPM_Initialize+0x410>)
 800a202:	429a      	cmp	r2, r3
 800a204:	d1d3      	bne.n	800a1ae <MotionPM_Initialize+0x46>
 800a206:	4cdd      	ldr	r4, [pc, #884]	; (800a57c <MotionPM_Initialize+0x414>)
 800a208:	2600      	movs	r6, #0
 800a20a:	2500      	movs	r5, #0
 800a20c:	2701      	movs	r7, #1
 800a20e:	f04f 0800 	mov.w	r8, #0
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	4631      	mov	r1, r6
 800a218:	22c8      	movs	r2, #200	; 0xc8
 800a21a:	f504 7014 	add.w	r0, r4, #592	; 0x250
 800a21e:	7027      	strb	r7, [r4, #0]
 800a220:	e9c4 8902 	strd	r8, r9, [r4, #8]
 800a224:	6125      	str	r5, [r4, #16]
 800a226:	61a5      	str	r5, [r4, #24]
 800a228:	6225      	str	r5, [r4, #32]
 800a22a:	62a5      	str	r5, [r4, #40]	; 0x28
 800a22c:	6325      	str	r5, [r4, #48]	; 0x30
 800a22e:	63a5      	str	r5, [r4, #56]	; 0x38
 800a230:	6425      	str	r5, [r4, #64]	; 0x40
 800a232:	64a5      	str	r5, [r4, #72]	; 0x48
 800a234:	6525      	str	r5, [r4, #80]	; 0x50
 800a236:	65a5      	str	r5, [r4, #88]	; 0x58
 800a238:	6625      	str	r5, [r4, #96]	; 0x60
 800a23a:	66a5      	str	r5, [r4, #104]	; 0x68
 800a23c:	6725      	str	r5, [r4, #112]	; 0x70
 800a23e:	67a5      	str	r5, [r4, #120]	; 0x78
 800a240:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800a244:	82a6      	strh	r6, [r4, #20]
 800a246:	61e6      	str	r6, [r4, #28]
 800a248:	84a6      	strh	r6, [r4, #36]	; 0x24
 800a24a:	62e6      	str	r6, [r4, #44]	; 0x2c
 800a24c:	86a6      	strh	r6, [r4, #52]	; 0x34
 800a24e:	63e6      	str	r6, [r4, #60]	; 0x3c
 800a250:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
 800a254:	64e6      	str	r6, [r4, #76]	; 0x4c
 800a256:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
 800a25a:	65e6      	str	r6, [r4, #92]	; 0x5c
 800a25c:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
 800a260:	66e6      	str	r6, [r4, #108]	; 0x6c
 800a262:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
 800a266:	67e6      	str	r6, [r4, #124]	; 0x7c
 800a268:	f8a4 6084 	strh.w	r6, [r4, #132]	; 0x84
 800a26c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800a270:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800a274:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800a278:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
 800a27c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 800a280:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
 800a284:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 800a288:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 800a28c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 800a290:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
 800a294:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 800a298:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 800a29c:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 800a2a0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 800a2a4:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
 800a2a8:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 800a2ac:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
 800a2b0:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 800a2b4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 800a2b8:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 800a2bc:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
 800a2c0:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800a2c4:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
 800a2c8:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 800a2cc:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
 800a2d0:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 800a2d4:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800a2d8:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 800a2dc:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 800a2e0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800a2e4:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 800a2e8:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 800a2ec:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 800a2f0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800a2f4:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800a2f8:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800a2fc:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 800a300:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 800a304:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800a308:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800a30c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800a310:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800a314:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800a318:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800a31c:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
 800a320:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 800a324:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800a328:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 800a32c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 800a330:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 800a334:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800a338:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800a33c:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
 800a340:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
 800a344:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
 800a348:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
 800a34c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 800a350:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
 800a354:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 800a358:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 800a35c:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 800a360:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 800a364:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 800a368:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
 800a36c:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
 800a370:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
 800a374:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
 800a378:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
 800a37c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
 800a380:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
 800a384:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
 800a388:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
 800a38c:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
 800a390:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
 800a394:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
 800a398:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 800a39c:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
 800a3a0:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
 800a3a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
 800a3a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
 800a3ac:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
 800a3b0:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
 800a3b4:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
 800a3b8:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
 800a3bc:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
 800a3c0:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
 800a3c4:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 800a3c8:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
 800a3cc:	f8c4 51ec 	str.w	r5, [r4, #492]	; 0x1ec
 800a3d0:	f8c4 51f0 	str.w	r5, [r4, #496]	; 0x1f0
 800a3d4:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
 800a3d8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800a3dc:	f8c4 51fc 	str.w	r5, [r4, #508]	; 0x1fc
 800a3e0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
 800a3e4:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
 800a3e8:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
 800a3ec:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
 800a3f0:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
 800a3f4:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
 800a3f8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800a3fc:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
 800a400:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
 800a404:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
 800a408:	f8c4 5228 	str.w	r5, [r4, #552]	; 0x228
 800a40c:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
 800a410:	f8c4 5230 	str.w	r5, [r4, #560]	; 0x230
 800a414:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
 800a418:	f8c4 5238 	str.w	r5, [r4, #568]	; 0x238
 800a41c:	f8c4 523c 	str.w	r5, [r4, #572]	; 0x23c
 800a420:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
 800a424:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
 800a428:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
 800a42c:	f8c4 524c 	str.w	r5, [r4, #588]	; 0x24c
 800a430:	f001 fed2 	bl	800c1d8 <memset>
 800a434:	f204 4c04 	addw	ip, r4, #1028	; 0x404
 800a438:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800a43c:	f44f 2e20 	mov.w	lr, #655360	; 0xa0000
 800a440:	f8c4 e368 	str.w	lr, [r4, #872]	; 0x368
 800a444:	4631      	mov	r1, r6
 800a446:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a44a:	e9c4 66cb 	strd	r6, r6, [r4, #812]	; 0x32c
 800a44e:	e9c4 89d8 	strd	r8, r9, [r4, #864]	; 0x360
 800a452:	e9c4 66db 	strd	r6, r6, [r4, #876]	; 0x36c
 800a456:	f884 6318 	strb.w	r6, [r4, #792]	; 0x318
 800a45a:	f884 6410 	strb.w	r6, [r4, #1040]	; 0x410
 800a45e:	f8c4 631c 	str.w	r6, [r4, #796]	; 0x31c
 800a462:	f8c4 5320 	str.w	r5, [r4, #800]	; 0x320
 800a466:	f8c4 5324 	str.w	r5, [r4, #804]	; 0x324
 800a46a:	f8c4 5328 	str.w	r5, [r4, #808]	; 0x328
 800a46e:	f8c4 5334 	str.w	r5, [r4, #820]	; 0x334
 800a472:	f8c4 5338 	str.w	r5, [r4, #824]	; 0x338
 800a476:	f8c4 533c 	str.w	r5, [r4, #828]	; 0x33c
 800a47a:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340
 800a47e:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
 800a482:	f8c4 5348 	str.w	r5, [r4, #840]	; 0x348
 800a486:	f8c4 534c 	str.w	r5, [r4, #844]	; 0x34c
 800a48a:	f8c4 5350 	str.w	r5, [r4, #848]	; 0x350
 800a48e:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
 800a492:	f8c4 5358 	str.w	r5, [r4, #856]	; 0x358
 800a496:	f8c4 635c 	str.w	r6, [r4, #860]	; 0x35c
 800a49a:	f504 6083 	add.w	r0, r4, #1048	; 0x418
 800a49e:	f8c4 5374 	str.w	r5, [r4, #884]	; 0x374
 800a4a2:	f8a4 6378 	strh.w	r6, [r4, #888]	; 0x378
 800a4a6:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
 800a4aa:	f8c4 6380 	str.w	r6, [r4, #896]	; 0x380
 800a4ae:	f8c4 5384 	str.w	r5, [r4, #900]	; 0x384
 800a4b2:	f8a4 6388 	strh.w	r6, [r4, #904]	; 0x388
 800a4b6:	f8c4 538c 	str.w	r5, [r4, #908]	; 0x38c
 800a4ba:	f8c4 6390 	str.w	r6, [r4, #912]	; 0x390
 800a4be:	f8c4 5394 	str.w	r5, [r4, #916]	; 0x394
 800a4c2:	f8a4 6398 	strh.w	r6, [r4, #920]	; 0x398
 800a4c6:	f8cc 5000 	str.w	r5, [ip]
 800a4ca:	601d      	str	r5, [r3, #0]
 800a4cc:	f884 7414 	strb.w	r7, [r4, #1044]	; 0x414
 800a4d0:	f8c4 539c 	str.w	r5, [r4, #924]	; 0x39c
 800a4d4:	f8c4 63a0 	str.w	r6, [r4, #928]	; 0x3a0
 800a4d8:	f8c4 53a4 	str.w	r5, [r4, #932]	; 0x3a4
 800a4dc:	f8a4 63a8 	strh.w	r6, [r4, #936]	; 0x3a8
 800a4e0:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
 800a4e4:	f8c4 63b0 	str.w	r6, [r4, #944]	; 0x3b0
 800a4e8:	f8c4 53b4 	str.w	r5, [r4, #948]	; 0x3b4
 800a4ec:	f8a4 63b8 	strh.w	r6, [r4, #952]	; 0x3b8
 800a4f0:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
 800a4f4:	f8c4 63c0 	str.w	r6, [r4, #960]	; 0x3c0
 800a4f8:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
 800a4fc:	f8a4 63c8 	strh.w	r6, [r4, #968]	; 0x3c8
 800a500:	f8c4 53cc 	str.w	r5, [r4, #972]	; 0x3cc
 800a504:	f8c4 63d0 	str.w	r6, [r4, #976]	; 0x3d0
 800a508:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
 800a50c:	f8a4 63d8 	strh.w	r6, [r4, #984]	; 0x3d8
 800a510:	f8c4 53dc 	str.w	r5, [r4, #988]	; 0x3dc
 800a514:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
 800a518:	f8c4 53e4 	str.w	r5, [r4, #996]	; 0x3e4
 800a51c:	f8a4 63e8 	strh.w	r6, [r4, #1000]	; 0x3e8
 800a520:	f8c4 53ec 	str.w	r5, [r4, #1004]	; 0x3ec
 800a524:	f8c4 63f0 	str.w	r6, [r4, #1008]	; 0x3f0
 800a528:	f8c4 53f4 	str.w	r5, [r4, #1012]	; 0x3f4
 800a52c:	f8a4 63f8 	strh.w	r6, [r4, #1016]	; 0x3f8
 800a530:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
 800a534:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
 800a538:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
 800a53c:	f001 fe4c 	bl	800c1d8 <memset>
 800a540:	f504 60b5 	add.w	r0, r4, #1448	; 0x5a8
 800a544:	f204 5cac 	addw	ip, r4, #1452	; 0x5ac
 800a548:	f204 53b4 	addw	r3, r4, #1460	; 0x5b4
 800a54c:	f504 61b8 	add.w	r1, r4, #1472	; 0x5c0
 800a550:	f504 62b6 	add.w	r2, r4, #1456	; 0x5b0
 800a554:	f8cc 5000 	str.w	r5, [ip]
 800a558:	601d      	str	r5, [r3, #0]
 800a55a:	f204 5cbc 	addw	ip, r4, #1468	; 0x5bc
 800a55e:	f504 63b7 	add.w	r3, r4, #1464	; 0x5b8
 800a562:	e00d      	b.n	800a580 <MotionPM_Initialize+0x418>
 800a564:	e0042000 	.word	0xe0042000
 800a568:	5c001000 	.word	0x5c001000
 800a56c:	58024c08 	.word	0x58024c08
 800a570:	58024c00 	.word	0x58024c00
 800a574:	f407a5c2 	.word	0xf407a5c2
 800a578:	b5e8b5cd 	.word	0xb5e8b5cd
 800a57c:	20000110 	.word	0x20000110
 800a580:	6005      	str	r5, [r0, #0]
 800a582:	4829      	ldr	r0, [pc, #164]	; (800a628 <MotionPM_Initialize+0x4c0>)
 800a584:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800a634 <MotionPM_Initialize+0x4cc>
 800a588:	6010      	str	r0, [r2, #0]
 800a58a:	4f28      	ldr	r7, [pc, #160]	; (800a62c <MotionPM_Initialize+0x4c4>)
 800a58c:	600d      	str	r5, [r1, #0]
 800a58e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a592:	4631      	mov	r1, r6
 800a594:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
 800a598:	f8cc e000 	str.w	lr, [ip]
 800a59c:	601f      	str	r7, [r3, #0]
 800a59e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 800a5a2:	f8c4 65c4 	str.w	r6, [r4, #1476]	; 0x5c4
 800a5a6:	f001 fe17 	bl	800c1d8 <memset>
 800a5aa:	f204 735c 	addw	r3, r4, #1884	; 0x75c
 800a5ae:	f604 10bc 	addw	r0, r4, #2492	; 0x9bc
 800a5b2:	f504 621c 	add.w	r2, r4, #2496	; 0x9c0
 800a5b6:	f604 1ef8 	addw	lr, r4, #2552	; 0x9f8
 800a5ba:	f604 1cfc 	addw	ip, r4, #2556	; 0x9fc
 800a5be:	601d      	str	r5, [r3, #0]
 800a5c0:	f604 2304 	addw	r3, r4, #2564	; 0xa04
 800a5c4:	6005      	str	r5, [r0, #0]
 800a5c6:	6015      	str	r5, [r2, #0]
 800a5c8:	f8ce 5000 	str.w	r5, [lr]
 800a5cc:	f8cc 5000 	str.w	r5, [ip]
 800a5d0:	f504 6120 	add.w	r1, r4, #2560	; 0xa00
 800a5d4:	f604 2008 	addw	r0, r4, #2568	; 0xa08
 800a5d8:	f604 220c 	addw	r2, r4, #2572	; 0xa0c
 800a5dc:	f504 6e21 	add.w	lr, r4, #2576	; 0xa10
 800a5e0:	f604 2c14 	addw	ip, r4, #2580	; 0xa14
 800a5e4:	601d      	str	r5, [r3, #0]
 800a5e6:	f604 13f4 	addw	r3, r4, #2548	; 0x9f4
 800a5ea:	600d      	str	r5, [r1, #0]
 800a5ec:	6005      	str	r5, [r0, #0]
 800a5ee:	6015      	str	r5, [r2, #0]
 800a5f0:	4f0f      	ldr	r7, [pc, #60]	; (800a630 <MotionPM_Initialize+0x4c8>)
 800a5f2:	f8ce 5000 	str.w	r5, [lr]
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	f204 7064 	addw	r0, r4, #1892	; 0x764
 800a5fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a600:	f8cc 5000 	str.w	r5, [ip]
 800a604:	f884 6758 	strb.w	r6, [r4, #1880]	; 0x758
 800a608:	f8a4 675a 	strh.w	r6, [r4, #1882]	; 0x75a
 800a60c:	f884 6a18 	strb.w	r6, [r4, #2584]	; 0xa18
 800a610:	601f      	str	r7, [r3, #0]
 800a612:	f001 fde1 	bl	800c1d8 <memset>
 800a616:	f884 6760 	strb.w	r6, [r4, #1888]	; 0x760
 800a61a:	f8c4 6a1c 	str.w	r6, [r4, #2588]	; 0xa1c
 800a61e:	f884 6a20 	strb.w	r6, [r4, #2592]	; 0xa20
 800a622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a626:	bf00      	nop
 800a628:	41200000 	.word	0x41200000
 800a62c:	3f866666 	.word	0x3f866666
 800a630:	3c1ba5e3 	.word	0x3c1ba5e3
 800a634:	3e0a3d71 	.word	0x3e0a3d71

0800a638 <MotionPM_Update>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	ed2d 8b0e 	vpush	{d8-d14}
 800a640:	4c8b      	ldr	r4, [pc, #556]	; (800a870 <MotionPM_Update+0x238>)
 800a642:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 800a646:	7823      	ldrb	r3, [r4, #0]
 800a648:	9104      	str	r1, [sp, #16]
 800a64a:	b92b      	cbnz	r3, 800a658 <MotionPM_Update+0x20>
 800a64c:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 800a650:	ecbd 8b0e 	vpop	{d8-d14}
 800a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a658:	f894 3760 	ldrb.w	r3, [r4, #1888]	; 0x760
 800a65c:	6807      	ldr	r7, [r0, #0]
 800a65e:	6846      	ldr	r6, [r0, #4]
 800a660:	6885      	ldr	r5, [r0, #8]
 800a662:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a666:	f502 70eb 	add.w	r0, r2, #470	; 0x1d6
 800a66a:	f202 11d7 	addw	r1, r2, #471	; 0x1d7
 800a66e:	3301      	adds	r3, #1
 800a670:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 800a674:	b2db      	uxtb	r3, r3
 800a676:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a67a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a67e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a682:	2b32      	cmp	r3, #50	; 0x32
 800a684:	60c7      	str	r7, [r0, #12]
 800a686:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
 800a68a:	60ce      	str	r6, [r1, #12]
 800a68c:	60d5      	str	r5, [r2, #12]
 800a68e:	d01f      	beq.n	800a6d0 <MotionPM_Update+0x98>
 800a690:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 800a694:	f8d4 2a1c 	ldr.w	r2, [r4, #2588]	; 0xa1c
 800a698:	9904      	ldr	r1, [sp, #16]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	604b      	str	r3, [r1, #4]
 800a69e:	f001 8176 	beq.w	800b98e <MotionPM_Update+0x1356>
 800a6a2:	edd4 7ac8 	vldr	s15, [r4, #800]	; 0x320
 800a6a6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a874 <MotionPM_Update+0x23c>
 800a6aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b4:	f884 1a20 	strb.w	r1, [r4, #2592]	; 0xa20
 800a6b8:	ee17 2a90 	vmov	r2, s15
 800a6bc:	9904      	ldr	r1, [sp, #16]
 800a6be:	700a      	strb	r2, [r1, #0]
 800a6c0:	f8c4 3a1c 	str.w	r3, [r4, #2588]	; 0xa1c
 800a6c4:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 800a6c8:	ecbd 8b0e 	vpop	{d8-d14}
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a878 <MotionPM_Update+0x240>
 800a6d4:	eddf 2a69 	vldr	s5, [pc, #420]	; 800a87c <MotionPM_Update+0x244>
 800a6d8:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f504 6c20 	add.w	ip, r4, #2560	; 0xa00
 800a6e2:	f604 270c 	addw	r7, r4, #2572	; 0xa0c
 800a6e6:	f604 2604 	addw	r6, r4, #2564	; 0xa04
 800a6ea:	f504 6521 	add.w	r5, r4, #2576	; 0xa10
 800a6ee:	f604 2008 	addw	r0, r4, #2568	; 0xa08
 800a6f2:	f604 2114 	addw	r1, r4, #2580	; 0xa14
 800a6f6:	933d      	str	r3, [sp, #244]	; 0xf4
 800a6f8:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
 800a6fc:	f8ad 30fc 	strh.w	r3, [sp, #252]	; 0xfc
 800a700:	9341      	str	r3, [sp, #260]	; 0x104
 800a702:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
 800a706:	9345      	str	r3, [sp, #276]	; 0x114
 800a708:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800a70c:	9349      	str	r3, [sp, #292]	; 0x124
 800a70e:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 800a712:	934d      	str	r3, [sp, #308]	; 0x134
 800a714:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800a718:	9351      	str	r3, [sp, #324]	; 0x144
 800a71a:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
 800a71e:	9355      	str	r3, [sp, #340]	; 0x154
 800a720:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
 800a724:	9359      	str	r3, [sp, #356]	; 0x164
 800a726:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
 800a72a:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 800a72e:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 800a732:	ed8d 6a44 	vstr	s12, [sp, #272]	; 0x110
 800a736:	ed8d 6a46 	vstr	s12, [sp, #280]	; 0x118
 800a73a:	ed8d 6a48 	vstr	s12, [sp, #288]	; 0x120
 800a73e:	ed8d 6a4a 	vstr	s12, [sp, #296]	; 0x128
 800a742:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800a746:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 800a74a:	ed8d 6a50 	vstr	s12, [sp, #320]	; 0x140
 800a74e:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 800a752:	ed8d 6a54 	vstr	s12, [sp, #336]	; 0x150
 800a756:	ed8d 6a56 	vstr	s12, [sp, #344]	; 0x158
 800a75a:	ed8d 6a58 	vstr	s12, [sp, #352]	; 0x160
 800a75e:	ed8d 6a5a 	vstr	s12, [sp, #360]	; 0x168
 800a762:	f504 62b8 	add.w	r2, r4, #1472	; 0x5c0
 800a766:	ed8d 6a5c 	vstr	s12, [sp, #368]	; 0x170
 800a76a:	f204 7a64 	addw	sl, r4, #1892	; 0x764
 800a76e:	eddc 3a00 	vldr	s7, [ip]
 800a772:	edd7 6a00 	vldr	s13, [r7]
 800a776:	ed96 4a00 	vldr	s8, [r6]
 800a77a:	ed95 7a00 	vldr	s14, [r5]
 800a77e:	edd0 4a00 	vldr	s9, [r0]
 800a782:	edd1 7a00 	vldr	s15, [r1]
 800a786:	ed9f 3a3e 	vldr	s6, [pc, #248]	; 800a880 <MotionPM_Update+0x248>
 800a78a:	935d      	str	r3, [sp, #372]	; 0x174
 800a78c:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
 800a790:	9361      	str	r3, [sp, #388]	; 0x184
 800a792:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
 800a796:	eef0 ba46 	vmov.f32	s23, s12
 800a79a:	ed8d 6a5e 	vstr	s12, [sp, #376]	; 0x178
 800a79e:	ed8d 6a60 	vstr	s12, [sp, #384]	; 0x180
 800a7a2:	ed8d 6a62 	vstr	s12, [sp, #392]	; 0x188
 800a7a6:	ed8d 6a64 	vstr	s12, [sp, #400]	; 0x190
 800a7aa:	ed82 6a00 	vstr	s12, [r2]
 800a7ae:	4653      	mov	r3, sl
 800a7b0:	f504 6e1b 	add.w	lr, r4, #2480	; 0x9b0
 800a7b4:	ed93 5a00 	vldr	s10, [r3]
 800a7b8:	edd3 5a01 	vldr	s11, [r3, #4]
 800a7bc:	ed93 6a02 	vldr	s12, [r3, #8]
 800a7c0:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a7c4:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a7c8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a7cc:	ee25 2aa2 	vmul.f32	s4, s11, s5
 800a7d0:	ee65 1a22 	vmul.f32	s3, s10, s5
 800a7d4:	eea5 7a82 	vfma.f32	s14, s11, s4
 800a7d8:	330c      	adds	r3, #12
 800a7da:	4573      	cmp	r3, lr
 800a7dc:	ee66 5a22 	vmul.f32	s11, s12, s5
 800a7e0:	eee5 6a21 	vfma.f32	s13, s10, s3
 800a7e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a7e8:	ee66 6a83 	vmul.f32	s13, s13, s6
 800a7ec:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a7f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a7f4:	ee26 6a87 	vmul.f32	s12, s13, s14
 800a7f8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a7fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a800:	ee34 4a02 	vadd.f32	s8, s8, s4
 800a804:	eee6 ba06 	vfma.f32	s23, s12, s12
 800a808:	ee74 4aa5 	vadd.f32	s9, s9, s11
 800a80c:	d1d2      	bne.n	800a7b4 <MotionPM_Update+0x17c>
 800a80e:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <MotionPM_Update+0x24c>)
 800a810:	edc2 ba00 	vstr	s23, [r2]
 800a814:	461a      	mov	r2, r3
 800a816:	3b08      	subs	r3, #8
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f894 3a18 	ldrb.w	r3, [r4, #2584]	; 0xa18
 800a81e:	f8d4 915c 	ldr.w	r9, [r4, #348]	; 0x15c
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 800a828:	9306      	str	r3, [sp, #24]
 800a82a:	2300      	movs	r3, #0
 800a82c:	ed86 4a00 	vstr	s8, [r6]
 800a830:	ed85 7a00 	vstr	s14, [r5]
 800a834:	edd2 9a00 	vldr	s19, [r2]
 800a838:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800a83c:	edd4 8a90 	vldr	s17, [r4, #576]	; 0x240
 800a840:	ed94 ba91 	vldr	s22, [r4, #580]	; 0x244
 800a844:	edd4 aa92 	vldr	s21, [r4, #584]	; 0x248
 800a848:	ed94 aa93 	vldr	s20, [r4, #588]	; 0x24c
 800a84c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a878 <MotionPM_Update+0x240>
 800a850:	ed9f ca0d 	vldr	s24, [pc, #52]	; 800a888 <MotionPM_Update+0x250>
 800a854:	edcc 3a00 	vstr	s7, [ip]
 800a858:	edc7 6a00 	vstr	s13, [r7]
 800a85c:	edc0 4a00 	vstr	s9, [r0]
 800a860:	edc1 7a00 	vstr	s15, [r1]
 800a864:	f502 6b88 	add.w	fp, r2, #1088	; 0x440
 800a868:	9303      	str	r3, [sp, #12]
 800a86a:	464e      	mov	r6, r9
 800a86c:	e0f3      	b.n	800aa56 <MotionPM_Update+0x41e>
 800a86e:	bf00      	nop
 800a870:	20000110 	.word	0x20000110
 800a874:	42700000 	.word	0x42700000
 800a878:	00000000 	.word	0x00000000
 800a87c:	3c23d70a 	.word	0x3c23d70a
 800a880:	3f7d70a4 	.word	0x3f7d70a4
 800a884:	200006c4 	.word	0x200006c4
 800a888:	3f933333 	.word	0x3f933333
 800a88c:	3cde5ab2 	.word	0x3cde5ab2
 800a890:	3eb33333 	.word	0x3eb33333
 800a894:	3c1ba5e3 	.word	0x3c1ba5e3
 800a898:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 800a88c <MotionPM_Update+0x254>
 800a89c:	f8b4 375a 	ldrh.w	r3, [r4, #1882]	; 0x75a
 800a8a0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800a8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a8:	bfcc      	ite	gt
 800a8aa:	ed5f 7a07 	vldrgt	s15, [pc, #-28]	; 800a890 <MotionPM_Update+0x258>
 800a8ae:	ed5f 7a07 	vldrle	s15, [pc, #-28]	; 800a894 <MotionPM_Update+0x25c>
 800a8b2:	f103 0301 	add.w	r3, r3, #1
 800a8b6:	bfc8      	it	gt
 800a8b8:	ee69 7a27 	vmulgt.f32	s15, s18, s15
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	2101      	movs	r1, #1
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a8c6:	edcb 7a00 	vstr	s15, [fp]
 800a8ca:	f884 1758 	strb.w	r1, [r4, #1880]	; 0x758
 800a8ce:	f8c4 25c4 	str.w	r2, [r4, #1476]	; 0x5c4
 800a8d2:	f240 8471 	bls.w	800b1b8 <MotionPM_Update+0xb80>
 800a8d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a8da:	f8a4 375a 	strh.w	r3, [r4, #1882]	; 0x75a
 800a8de:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 800a8e2:	48f4      	ldr	r0, [pc, #976]	; (800acb4 <MotionPM_Update+0x67c>)
 800a8e4:	edd4 8ac8 	vldr	s17, [r4, #800]	; 0x320
 800a8e8:	ed94 daca 	vldr	s26, [r4, #808]	; 0x328
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800a8f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a8f8:	ed92 7a02 	vldr	s14, [r2, #8]
 800a8fc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800a900:	f103 0c60 	add.w	ip, r3, #96	; 0x60
 800a904:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 800a908:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800a90c:	ed9c 5a02 	vldr	s10, [ip, #8]
 800a910:	f106 0806 	add.w	r8, r6, #6
 800a914:	f106 0e05 	add.w	lr, r6, #5
 800a918:	f103 0765 	add.w	r7, r3, #101	; 0x65
 800a91c:	ed82 5a02 	vstr	s10, [r2, #8]
 800a920:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a924:	fba0 2908 	umull	r2, r9, r0, r8
 800a928:	fba0 200e 	umull	r2, r0, r0, lr
 800a92c:	edd7 4a02 	vldr	s9, [r7, #8]
 800a930:	eba8 0109 	sub.w	r1, r8, r9
 800a934:	ebae 0200 	sub.w	r2, lr, r0
 800a938:	eb09 0151 	add.w	r1, r9, r1, lsr #1
 800a93c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800a940:	edcc 4a02 	vstr	s9, [ip, #8]
 800a944:	0889      	lsrs	r1, r1, #2
 800a946:	0892      	lsrs	r2, r2, #2
 800a948:	f103 0c6a 	add.w	ip, r3, #106	; 0x6a
 800a94c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800a950:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a954:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a958:	eddc 6a02 	vldr	s13, [ip, #8]
 800a95c:	eba8 0101 	sub.w	r1, r8, r1
 800a960:	ebae 0202 	sub.w	r2, lr, r2
 800a964:	f103 096f 	add.w	r9, r3, #111	; 0x6f
 800a968:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a96c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a970:	edc7 6a02 	vstr	s13, [r7, #8]
 800a974:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 800a978:	4419      	add	r1, r3
 800a97a:	441a      	add	r2, r3
 800a97c:	edd9 5a02 	vldr	s11, [r9, #8]
 800a980:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a988:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800a98c:	ed91 6a34 	vldr	s12, [r1, #208]	; 0xd0
 800a990:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 800a994:	edcc 5a02 	vstr	s11, [ip, #8]
 800a998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a99c:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a9a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9a4:	bfb4      	ite	lt
 800a9a6:	eef0 3a45 	vmovlt.f32	s7, s10
 800a9aa:	eef0 3a47 	vmovge.f32	s7, s14
 800a9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b2:	bfb4      	ite	lt
 800a9b4:	eeb0 4a65 	vmovlt.f32	s8, s11
 800a9b8:	eeb0 4a66 	vmovge.f32	s8, s13
 800a9bc:	eef4 7ac4 	vcmpe.f32	s15, s8
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	eef4 3ae4 	vcmpe.f32	s7, s9
 800a9c8:	bfa8      	it	ge
 800a9ca:	eeb0 4a67 	vmovge.f32	s8, s15
 800a9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d2:	bfb8      	it	lt
 800a9d4:	eef0 3a64 	vmovlt.f32	s7, s9
 800a9d8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e0:	edc9 7a02 	vstr	s15, [r9, #8]
 800a9e4:	f100 83bf 	bmi.w	800b166 <MotionPM_Update+0xb2e>
 800a9e8:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800a9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f0:	f100 84a2 	bmi.w	800b338 <MotionPM_Update+0xd00>
 800a9f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800a9f8:	ed92 7a7b 	vldr	s14, [r2, #492]	; 0x1ec
 800a9fc:	eddf 7aae 	vldr	s15, [pc, #696]	; 800acb8 <MotionPM_Update+0x680>
 800aa00:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aa04:	eeb0 6ac6 	vabs.f32	s12, s12
 800aa08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800aa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa10:	f340 837f 	ble.w	800b112 <MotionPM_Update+0xada>
 800aa14:	f8d4 2330 	ldr.w	r2, [r4, #816]	; 0x330
 800aa18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa1c:	ed83 8a76 	vstr	s16, [r3, #472]	; 0x1d8
 800aa20:	1aab      	subs	r3, r5, r2
 800aa22:	2b32      	cmp	r3, #50	; 0x32
 800aa24:	d909      	bls.n	800aa3a <MotionPM_Update+0x402>
 800aa26:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
 800aa2a:	f8c4 5330 	str.w	r5, [r4, #816]	; 0x330
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfc4      	itt	gt
 800aa32:	f103 33ff 	addgt.w	r3, r3, #4294967295
 800aa36:	f8c4 335c 	strgt.w	r3, [r4, #860]	; 0x35c
 800aa3a:	9b06      	ldr	r3, [sp, #24]
 800aa3c:	f10a 0a0c 	add.w	sl, sl, #12
 800aa40:	459a      	cmp	sl, r3
 800aa42:	eef0 8a4b 	vmov.f32	s17, s22
 800aa46:	eeb0 ba6a 	vmov.f32	s22, s21
 800aa4a:	eef0 aa4a 	vmov.f32	s21, s20
 800aa4e:	f000 8539 	beq.w	800b4c4 <MotionPM_Update+0xe8c>
 800aa52:	eeb0 aa6c 	vmov.f32	s20, s25
 800aa56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aa5a:	eef4 9ae7 	vcmpe.f32	s19, s15
 800aa5e:	9502      	str	r5, [sp, #8]
 800aa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa64:	f105 0501 	add.w	r5, r5, #1
 800aa68:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 800aa6c:	f280 83f7 	bge.w	800b25e <MotionPM_Update+0xc26>
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	ed93 da00 	vldr	s26, [r3]
 800aa76:	4b91      	ldr	r3, [pc, #580]	; (800acbc <MotionPM_Update+0x684>)
 800aa78:	edd3 9a00 	vldr	s19, [r3]
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f040 83a4 	bne.w	800b1cc <MotionPM_Update+0xb94>
 800aa84:	edda 7a01 	vldr	s15, [sl, #4]
 800aa88:	edda 6a00 	vldr	s13, [sl]
 800aa8c:	ed9a 7a02 	vldr	s14, [sl, #8]
 800aa90:	498b      	ldr	r1, [pc, #556]	; (800acc0 <MotionPM_Update+0x688>)
 800aa92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa96:	1f08      	subs	r0, r1, #4
 800aa98:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800aa9c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800aaa0:	eee7 7a07 	vfma.f32	s15, s14, s14
 800aaa4:	eef1 cae7 	vsqrt.f32	s25, s15
 800aaa8:	f001 fb7c 	bl	800c1a4 <memmove>
 800aaac:	9802      	ldr	r0, [sp, #8]
 800aaae:	4b85      	ldr	r3, [pc, #532]	; (800acc4 <MotionPM_Update+0x68c>)
 800aab0:	4a85      	ldr	r2, [pc, #532]	; (800acc8 <MotionPM_Update+0x690>)
 800aab2:	4601      	mov	r1, r0
 800aab4:	fba3 1301 	umull	r1, r3, r3, r1
 800aab8:	095b      	lsrs	r3, r3, #5
 800aaba:	2164      	movs	r1, #100	; 0x64
 800aabc:	fb01 0313 	mls	r3, r1, r3, r0
 800aac0:	4982      	ldr	r1, [pc, #520]	; (800accc <MotionPM_Update+0x694>)
 800aac2:	4883      	ldr	r0, [pc, #524]	; (800acd0 <MotionPM_Update+0x698>)
 800aac4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aac8:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800aacc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800aad0:	fb01 f105 	mul.w	r1, r1, r5
 800aad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aad8:	ebb2 0f71 	cmp.w	r2, r1, ror #1
 800aadc:	edc0 ca00 	vstr	s25, [r0]
 800aae0:	edc3 7a02 	vstr	s15, [r3, #8]
 800aae4:	f080 836c 	bcs.w	800b1c0 <MotionPM_Update+0xb88>
 800aae8:	f5a0 73d6 	sub.w	r3, r0, #428	; 0x1ac
 800aaec:	ed93 9a00 	vldr	s18, [r3]
 800aaf0:	4f70      	ldr	r7, [pc, #448]	; (800acb4 <MotionPM_Update+0x67c>)
 800aaf2:	ed9f 5a78 	vldr	s10, [pc, #480]	; 800acd4 <MotionPM_Update+0x69c>
 800aaf6:	eddf 7a78 	vldr	s15, [pc, #480]	; 800acd8 <MotionPM_Update+0x6a0>
 800aafa:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800acdc <MotionPM_Update+0x6a4>
 800aafe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ace0 <MotionPM_Update+0x6a8>
 800ab02:	ed9f 6a78 	vldr	s12, [pc, #480]	; 800ace4 <MotionPM_Update+0x6ac>
 800ab06:	edc4 8a8f 	vstr	s17, [r4, #572]	; 0x23c
 800ab0a:	f106 0c06 	add.w	ip, r6, #6
 800ab0e:	fba7 2306 	umull	r2, r3, r7, r6
 800ab12:	fba7 1e0c 	umull	r1, lr, r7, ip
 800ab16:	1af2      	subs	r2, r6, r3
 800ab18:	ebac 010e 	sub.w	r1, ip, lr
 800ab1c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ab20:	eb0e 0e51 	add.w	lr, lr, r1, lsr #1
 800ab24:	1d72      	adds	r2, r6, #5
 800ab26:	089b      	lsrs	r3, r3, #2
 800ab28:	fba7 1002 	umull	r1, r0, r7, r2
 800ab2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ab30:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800ab34:	1af3      	subs	r3, r6, r3
 800ab36:	1a11      	subs	r1, r2, r0
 800ab38:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 800ab3c:	ebac 0e0e 	sub.w	lr, ip, lr
 800ab40:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 800ab44:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800ab48:	edc1 ca2d 	vstr	s25, [r1, #180]	; 0xb4
 800ab4c:	0880      	lsrs	r0, r0, #2
 800ab4e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
 800ab52:	edd1 6a2d 	vldr	s13, [r1, #180]	; 0xb4
 800ab56:	4964      	ldr	r1, [pc, #400]	; (800ace8 <MotionPM_Update+0x6b0>)
 800ab58:	ed84 ba90 	vstr	s22, [r4, #576]	; 0x240
 800ab5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ab60:	1a10      	subs	r0, r2, r0
 800ab62:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ab66:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800ab6a:	ed92 5a2d 	vldr	s10, [r2, #180]	; 0xb4
 800ab6e:	edc4 aa91 	vstr	s21, [r4, #580]	; 0x244
 800ab72:	eef0 4a66 	vmov.f32	s9, s13
 800ab76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab7e:	f106 0c04 	add.w	ip, r6, #4
 800ab82:	eee5 4a27 	vfma.f32	s9, s10, s15
 800ab86:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800ab8a:	fba7 820c 	umull	r8, r2, r7, ip
 800ab8e:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
 800ab92:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800ab96:	edde 6a34 	vldr	s13, [lr, #208]	; 0xd0
 800ab9a:	ed9f 5a54 	vldr	s10, [pc, #336]	; 800acec <MotionPM_Update+0x6b4>
 800ab9e:	ed84 aa92 	vstr	s20, [r4, #584]	; 0x248
 800aba2:	ebac 0e02 	sub.w	lr, ip, r2
 800aba6:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800abaa:	eef0 7a64 	vmov.f32	s15, s9
 800abae:	0892      	lsrs	r2, r2, #2
 800abb0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800abb4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800abb8:	ebac 0202 	sub.w	r2, ip, r2
 800abbc:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800abc0:	ed9c 7a2d 	vldr	s14, [ip, #180]	; 0xb4
 800abc4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800abc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800abcc:	f106 0c03 	add.w	ip, r6, #3
 800abd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800abd4:	edd0 6a34 	vldr	s13, [r0, #208]	; 0xd0
 800abd8:	edc4 ca93 	vstr	s25, [r4, #588]	; 0x24c
 800abdc:	fba7 e00c 	umull	lr, r0, r7, ip
 800abe0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800abe4:	ebac 0e00 	sub.w	lr, ip, r0
 800abe8:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800abec:	eb00 005e 	add.w	r0, r0, lr, lsr #1
 800abf0:	0880      	lsrs	r0, r0, #2
 800abf2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800abf6:	ebac 0000 	sub.w	r0, ip, r0
 800abfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abfe:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800ac02:	eddc 7a2d 	vldr	s15, [ip, #180]	; 0xb4
 800ac06:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800acf0 <MotionPM_Update+0x6b8>
 800ac0a:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
 800ac0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ac12:	f106 0c02 	add.w	ip, r6, #2
 800ac16:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ac1a:	ed92 6a34 	vldr	s12, [r2, #208]	; 0xd0
 800ac1e:	eddf 6a35 	vldr	s13, [pc, #212]	; 800acf4 <MotionPM_Update+0x6bc>
 800ac22:	fba7 e20c 	umull	lr, r2, r7, ip
 800ac26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ac2a:	ebac 0e02 	sub.w	lr, ip, r2
 800ac2e:	eee6 7a66 	vfms.f32	s15, s12, s13
 800ac32:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800ac36:	0892      	lsrs	r2, r2, #2
 800ac38:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ac3c:	ebac 0202 	sub.w	r2, ip, r2
 800ac40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac44:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800ac48:	ed9c 7a2d 	vldr	s14, [ip, #180]	; 0xb4
 800ac4c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800ac50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ac54:	f106 0c01 	add.w	ip, r6, #1
 800ac58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800ac5c:	ed90 6a34 	vldr	s12, [r0, #208]	; 0xd0
 800ac60:	eddf 6a25 	vldr	s13, [pc, #148]	; 800acf8 <MotionPM_Update+0x6c0>
 800ac64:	eddf 5a25 	vldr	s11, [pc, #148]	; 800acfc <MotionPM_Update+0x6c4>
 800ac68:	fba7 070c 	umull	r0, r7, r7, ip
 800ac6c:	ee27 7a05 	vmul.f32	s14, s14, s10
 800ac70:	ebac 0607 	sub.w	r6, ip, r7
 800ac74:	eea6 7a66 	vfms.f32	s14, s12, s13
 800ac78:	eb07 0756 	add.w	r7, r7, r6, lsr #1
 800ac7c:	08be      	lsrs	r6, r7, #2
 800ac7e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800ac82:	ebac 0606 	sub.w	r6, ip, r6
 800ac86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac8a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 800ac8e:	edd0 7a2d 	vldr	s15, [r0, #180]	; 0xb4
 800ac92:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
 800ac96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ac9a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ac9e:	ed92 6a34 	vldr	s12, [r2, #208]	; 0xd0
 800aca2:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ad00 <MotionPM_Update+0x6c8>
 800aca6:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
 800acaa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acae:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800acb2:	e033      	b.n	800ad1c <MotionPM_Update+0x6e4>
 800acb4:	24924925 	.word	0x24924925
 800acb8:	3ca3d70a 	.word	0x3ca3d70a
 800acbc:	200006c0 	.word	0x200006c0
 800acc0:	200006dc 	.word	0x200006dc
 800acc4:	51eb851f 	.word	0x51eb851f
 800acc8:	051eb851 	.word	0x051eb851
 800accc:	c28f5c29 	.word	0xc28f5c29
 800acd0:	20000864 	.word	0x20000864
 800acd4:	39d71d89 	.word	0x39d71d89
 800acd8:	3998b9a0 	.word	0x3998b9a0
 800acdc:	c0b3adc1 	.word	0xc0b3adc1
 800ace0:	bb432de8 	.word	0xbb432de8
 800ace4:	4153e833 	.word	0x4153e833
 800ace8:	20000364 	.word	0x20000364
 800acec:	b9ebfb66 	.word	0xb9ebfb66
 800acf0:	3b4a1e9d 	.word	0x3b4a1e9d
 800acf4:	c1865d78 	.word	0xc1865d78
 800acf8:	41413d47 	.word	0x41413d47
 800acfc:	b9bb53ff 	.word	0xb9bb53ff
 800ad00:	c0956c45 	.word	0xc0956c45
 800ad04:	3f422ab1 	.word	0x3f422ab1
 800ad08:	3e4ccccd 	.word	0x3e4ccccd
 800ad0c:	3d1ba5e3 	.word	0x3d1ba5e3
 800ad10:	3c59e83e 	.word	0x3c59e83e
 800ad14:	3b59e83e 	.word	0x3b59e83e
 800ad18:	3d4ccccd 	.word	0x3d4ccccd
 800ad1c:	eee6 7a66 	vfms.f32	s15, s12, s13
 800ad20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad24:	1f08      	subs	r0, r1, #4
 800ad26:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 800ad04 <MotionPM_Update+0x6cc>
 800ad2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad2e:	ee7d 9a69 	vsub.f32	s19, s26, s19
 800ad32:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800ad36:	ed92 7a34 	vldr	s14, [r2, #208]	; 0xd0
 800ad3a:	edc0 9ad9 	vstr	s19, [r0, #868]	; 0x364
 800ad3e:	eee7 7a66 	vfms.f32	s15, s14, s13
 800ad42:	22c4      	movs	r2, #196	; 0xc4
 800ad44:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800ad48:	f001 fa2c 	bl	800c1a4 <memmove>
 800ad4c:	ee7a 7a28 	vadd.f32	s15, s20, s17
 800ad50:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 800ad08 <MotionPM_Update+0x6d0>
 800ad54:	ed9b 7a00 	vldr	s14, [fp]
 800ad58:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800ad5c:	eeb4 7ac9 	vcmpe.f32	s14, s18
 800ad60:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800ad64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad68:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800ad6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad70:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 800ad74:	f53f ad90 	bmi.w	800a898 <MotionPM_Update+0x260>
 800ad78:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
 800ad7c:	2b31      	cmp	r3, #49	; 0x31
 800ad7e:	f200 81cf 	bhi.w	800b120 <MotionPM_Update+0xae8>
 800ad82:	ed5f 7a1e 	vldr	s15, [pc, #-120]	; 800ad0c <MotionPM_Update+0x6d4>
 800ad86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8e:	f280 81c4 	bge.w	800b11a <MotionPM_Update+0xae2>
 800ad92:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 800ad10 <MotionPM_Update+0x6d8>
 800ad96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9e:	f300 82e1 	bgt.w	800b364 <MotionPM_Update+0xd2c>
 800ada2:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 800ad14 <MotionPM_Update+0x6dc>
 800ada6:	ed8b 7a00 	vstr	s14, [fp]
 800adaa:	2200      	movs	r2, #0
 800adac:	f884 2758 	strb.w	r2, [r4, #1880]	; 0x758
 800adb0:	3301      	adds	r3, #1
 800adb2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800adb6:	2100      	movs	r1, #0
 800adb8:	4293      	cmp	r3, r2
 800adba:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
 800adbe:	f241 8190 	bls.w	800c0e2 <MotionPM_Update+0x1aaa>
 800adc2:	f8c4 25c4 	str.w	r2, [r4, #1476]	; 0x5c4
 800adc6:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800adca:	2201      	movs	r2, #1
 800adcc:	1aeb      	subs	r3, r5, r3
 800adce:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 800add2:	e626      	b.n	800aa22 <MotionPM_Update+0x3ea>
 800add4:	2700      	movs	r7, #0
 800add6:	9b02      	ldr	r3, [sp, #8]
 800add8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adda:	f1a3 0035 	sub.w	r0, r3, #53	; 0x35
 800adde:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 800ade2:	4410      	add	r0, r2
 800ade4:	4418      	add	r0, r3
 800ade6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800adea:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf2:	d508      	bpl.n	800ae06 <MotionPM_Update+0x7ce>
 800adf4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	bfb4      	ite	lt
 800adfe:	eef0 da48 	vmovlt.f32	s27, s16
 800ae02:	eef0 da46 	vmovge.f32	s27, s12
 800ae06:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800ae0a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ae0e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae16:	d506      	bpl.n	800ae26 <MotionPM_Update+0x7ee>
 800ae18:	eef4 dae7 	vcmpe.f32	s27, s15
 800ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae20:	bfb8      	it	lt
 800ae22:	eef0 da67 	vmovlt.f32	s27, s15
 800ae26:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800ae2a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ae2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	d506      	bpl.n	800ae46 <MotionPM_Update+0x80e>
 800ae38:	eef4 dae7 	vcmpe.f32	s27, s15
 800ae3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae40:	bfb8      	it	lt
 800ae42:	eef0 da67 	vmovlt.f32	s27, s15
 800ae46:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800ae4a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ae4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae56:	d506      	bpl.n	800ae66 <MotionPM_Update+0x82e>
 800ae58:	eef4 dae7 	vcmpe.f32	s27, s15
 800ae5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae60:	bfb8      	it	lt
 800ae62:	eef0 da67 	vmovlt.f32	s27, s15
 800ae66:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ae6a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ae6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	d506      	bpl.n	800ae86 <MotionPM_Update+0x84e>
 800ae78:	eef4 dae7 	vcmpe.f32	s27, s15
 800ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae80:	bfb8      	it	lt
 800ae82:	eef0 da67 	vmovlt.f32	s27, s15
 800ae86:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800ae8a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ae8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae96:	d506      	bpl.n	800aea6 <MotionPM_Update+0x86e>
 800ae98:	eef4 dae7 	vcmpe.f32	s27, s15
 800ae9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea0:	bfb8      	it	lt
 800aea2:	eef0 da67 	vmovlt.f32	s27, s15
 800aea6:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800aeaa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800aeae:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	d506      	bpl.n	800aec6 <MotionPM_Update+0x88e>
 800aeb8:	eef4 dae7 	vcmpe.f32	s27, s15
 800aebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec0:	bfb8      	it	lt
 800aec2:	eef0 da67 	vmovlt.f32	s27, s15
 800aec6:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800aeca:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800aece:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	d506      	bpl.n	800aee6 <MotionPM_Update+0x8ae>
 800aed8:	eef4 dae7 	vcmpe.f32	s27, s15
 800aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee0:	bfb8      	it	lt
 800aee2:	eef0 da67 	vmovlt.f32	s27, s15
 800aee6:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 800aeea:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800aeee:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef6:	d506      	bpl.n	800af06 <MotionPM_Update+0x8ce>
 800aef8:	eef4 dae7 	vcmpe.f32	s27, s15
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	bfb8      	it	lt
 800af02:	eef0 da67 	vmovlt.f32	s27, s15
 800af06:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 800af0a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800af0e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800af12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af16:	d506      	bpl.n	800af26 <MotionPM_Update+0x8ee>
 800af18:	eef4 dae7 	vcmpe.f32	s27, s15
 800af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af20:	bfb8      	it	lt
 800af22:	eef0 da67 	vmovlt.f32	s27, s15
 800af26:	eeb4 7aed 	vcmpe.f32	s14, s27
 800af2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2e:	f140 80f0 	bpl.w	800b112 <MotionPM_Update+0xada>
 800af32:	ee7d 7ac7 	vsub.f32	s15, s27, s14
 800af36:	ed5f 6a88 	vldr	s13, [pc, #-544]	; 800ad18 <MotionPM_Update+0x6e0>
 800af3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800af3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af42:	f340 80e6 	ble.w	800b112 <MotionPM_Update+0xada>
 800af46:	eef0 7a0e 	vmov.f32	s15, #14	; 0x40700000  3.750
 800af4a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af52:	f140 80de 	bpl.w	800b112 <MotionPM_Update+0xada>
 800af56:	4ae0      	ldr	r2, [pc, #896]	; (800b2d8 <MotionPM_Update+0xca0>)
 800af58:	edd2 7a00 	vldr	s15, [r2]
 800af5c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800af60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af64:	f140 80d5 	bpl.w	800b112 <MotionPM_Update+0xada>
 800af68:	1a2b      	subs	r3, r5, r0
 800af6a:	f5c3 71e8 	rsb	r1, r3, #464	; 0x1d0
 800af6e:	3101      	adds	r1, #1
 800af70:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800af74:	edd1 7a02 	vldr	s15, [r1, #8]
 800af78:	f5c3 71e9 	rsb	r1, r3, #466	; 0x1d2
 800af7c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800af80:	ed91 5a02 	vldr	s10, [r1, #8]
 800af84:	f5c3 77e9 	rsb	r7, r3, #466	; 0x1d2
 800af88:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800af8c:	3701      	adds	r7, #1
 800af8e:	edc2 da00 	vstr	s27, [r2]
 800af92:	f5c3 72eb 	rsb	r2, r3, #470	; 0x1d6
 800af96:	eef4 7ac5 	vcmpe.f32	s15, s10
 800af9a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800af9e:	3201      	adds	r2, #1
 800afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa4:	edd7 5a02 	vldr	s11, [r7, #8]
 800afa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afac:	bf48      	it	mi
 800afae:	eef0 7a45 	vmovmi.f32	s15, s10
 800afb2:	edd2 4a02 	vldr	s9, [r2, #8]
 800afb6:	f5c3 71ea 	rsb	r1, r3, #468	; 0x1d4
 800afba:	f5c3 72ea 	rsb	r2, r3, #468	; 0x1d4
 800afbe:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 800afc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afc6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800afca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afce:	ed93 7a02 	vldr	s14, [r3, #8]
 800afd2:	ed92 6a02 	vldr	s12, [r2, #8]
 800afd6:	9a03      	ldr	r2, [sp, #12]
 800afd8:	bf4c      	ite	mi
 800afda:	2301      	movmi	r3, #1
 800afdc:	2300      	movpl	r3, #0
 800afde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe2:	bf48      	it	mi
 800afe4:	eef0 7a65 	vmovmi.f32	s15, s11
 800afe8:	f101 0101 	add.w	r1, r1, #1
 800afec:	eef4 7ac6 	vcmpe.f32	s15, s12
 800aff0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800aff4:	bf48      	it	mi
 800aff6:	2302      	movmi	r3, #2
 800aff8:	edd1 6a02 	vldr	s13, [r1, #8]
 800affc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b000:	bf48      	it	mi
 800b002:	eef0 7a46 	vmovmi.f32	s15, s12
 800b006:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b00a:	bf48      	it	mi
 800b00c:	2303      	movmi	r3, #3
 800b00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b012:	bf48      	it	mi
 800b014:	eef0 7a66 	vmovmi.f32	s15, s13
 800b018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b01c:	bf48      	it	mi
 800b01e:	2304      	movmi	r3, #4
 800b020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b024:	bf48      	it	mi
 800b026:	eef0 7a47 	vmovmi.f32	s15, s14
 800b02a:	eef4 7a64 	vcmp.f32	s15, s9
 800b02e:	bf48      	it	mi
 800b030:	2305      	movmi	r3, #5
 800b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b036:	bf48      	it	mi
 800b038:	2306      	movmi	r3, #6
 800b03a:	b142      	cbz	r2, 800b04e <MotionPM_Update+0xa16>
 800b03c:	3a01      	subs	r2, #1
 800b03e:	2a02      	cmp	r2, #2
 800b040:	f201 8043 	bhi.w	800c0ca <MotionPM_Update+0x1a92>
 800b044:	f8d4 235c 	ldr.w	r2, [r4, #860]	; 0x35c
 800b048:	2a01      	cmp	r2, #1
 800b04a:	f341 803e 	ble.w	800c0ca <MotionPM_Update+0x1a92>
 800b04e:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 800b052:	4aa2      	ldr	r2, [pc, #648]	; (800b2dc <MotionPM_Update+0xca4>)
 800b054:	f8d4 735c 	ldr.w	r7, [r4, #860]	; 0x35c
 800b058:	eddf 6aa1 	vldr	s13, [pc, #644]	; 800b2e0 <MotionPM_Update+0xca8>
 800b05c:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800b060:	3803      	subs	r0, #3
 800b062:	18c1      	adds	r1, r0, r3
 800b064:	fba2 2301 	umull	r2, r3, r2, r1
 800b068:	9a03      	ldr	r2, [sp, #12]
 800b06a:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
 800b06e:	f10d 0cf0 	add.w	ip, sp, #240	; 0xf0
 800b072:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800b076:	9903      	ldr	r1, [sp, #12]
 800b078:	091b      	lsrs	r3, r3, #4
 800b07a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b07e:	fb00 f303 	mul.w	r3, r0, r3
 800b082:	6053      	str	r3, [r2, #4]
 800b084:	ee07 7a10 	vmov	s14, r7
 800b088:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b08c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b094:	f101 0101 	add.w	r1, r1, #1
 800b098:	edc2 8a02 	vstr	s17, [r2, #8]
 800b09c:	ed82 7a04 	vstr	s14, [r2, #16]
 800b0a0:	dd36      	ble.n	800b110 <MotionPM_Update+0xad8>
 800b0a2:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b2e4 <MotionPM_Update+0xcac>
 800b0a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ae:	d52f      	bpl.n	800b110 <MotionPM_Update+0xad8>
 800b0b0:	2f02      	cmp	r7, #2
 800b0b2:	dd2d      	ble.n	800b110 <MotionPM_Update+0xad8>
 800b0b4:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800b2e8 <MotionPM_Update+0xcb0>
 800b0b8:	ed9f 6a8c 	vldr	s12, [pc, #560]	; 800b2ec <MotionPM_Update+0xcb4>
 800b0bc:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800b0c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c8:	ee17 0a90 	vmov	r0, s15
 800b0cc:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	eba3 0000 	sub.w	r0, r3, r0
 800b0d8:	d51a      	bpl.n	800b110 <MotionPM_Update+0xad8>
 800b0da:	eddf 7a85 	vldr	s15, [pc, #532]	; 800b2f0 <MotionPM_Update+0xcb8>
 800b0de:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e6:	dd13      	ble.n	800b110 <MotionPM_Update+0xad8>
 800b0e8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800b0ec:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800b0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0f4:	edc1 8a02 	vstr	s17, [r1, #8]
 800b0f8:	edc1 7a04 	vstr	s15, [r1, #16]
 800b0fc:	6050      	str	r0, [r2, #4]
 800b0fe:	604b      	str	r3, [r1, #4]
 800b100:	9903      	ldr	r1, [sp, #12]
 800b102:	edc4 8ac9 	vstr	s17, [r4, #804]	; 0x324
 800b106:	edc4 8ad4 	vstr	s17, [r4, #848]	; 0x350
 800b10a:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
 800b10e:	3102      	adds	r1, #2
 800b110:	9103      	str	r1, [sp, #12]
 800b112:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800b116:	1aeb      	subs	r3, r5, r3
 800b118:	e483      	b.n	800aa22 <MotionPM_Update+0x3ea>
 800b11a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800b2f4 <MotionPM_Update+0xcbc>
 800b11e:	e642      	b.n	800ada6 <MotionPM_Update+0x76e>
 800b120:	2200      	movs	r2, #0
 800b122:	2b64      	cmp	r3, #100	; 0x64
 800b124:	f884 2758 	strb.w	r2, [r4, #1880]	; 0x758
 800b128:	f040 80f6 	bne.w	800b318 <MotionPM_Update+0xce0>
 800b12c:	4972      	ldr	r1, [pc, #456]	; (800b2f8 <MotionPM_Update+0xcc0>)
 800b12e:	4873      	ldr	r0, [pc, #460]	; (800b2fc <MotionPM_Update+0xcc4>)
 800b130:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 800b134:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b138:	f8cb 0000 	str.w	r0, [fp]
 800b13c:	ed81 8a00 	vstr	s16, [r1]
 800b140:	f8c4 2324 	str.w	r2, [r4, #804]	; 0x324
 800b144:	f8c4 2320 	str.w	r2, [r4, #800]	; 0x320
 800b148:	3301      	adds	r3, #1
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
 800b150:	f8a4 275a 	strh.w	r2, [r4, #1882]	; 0x75a
 800b154:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b158:	4293      	cmp	r3, r2
 800b15a:	f43f ae34 	beq.w	800adc6 <MotionPM_Update+0x78e>
 800b15e:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800b162:	1aeb      	subs	r3, r5, r3
 800b164:	e45d      	b.n	800aa22 <MotionPM_Update+0x3ea>
 800b166:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16e:	bf88      	it	hi
 800b170:	eef0 6a65 	vmovhi.f32	s13, s11
 800b174:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17c:	bf88      	it	hi
 800b17e:	eef0 7a66 	vmovhi.f32	s15, s13
 800b182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18a:	f77f ac2d 	ble.w	800a9e8 <MotionPM_Update+0x3b0>
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	f103 0174 	add.w	r1, r3, #116	; 0x74
 800b196:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b19a:	edd1 da02 	vldr	s27, [r1, #8]
 800b19e:	eef5 da40 	vcmp.f32	s27, #0.0
 800b1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a6:	f000 80e2 	beq.w	800b36e <MotionPM_Update+0xd36>
 800b1aa:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800b1ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1b2:	1aeb      	subs	r3, r5, r3
 800b1b4:	608a      	str	r2, [r1, #8]
 800b1b6:	e434      	b.n	800aa22 <MotionPM_Update+0x3ea>
 800b1b8:	f8a4 375a 	strh.w	r3, [r4, #1882]	; 0x75a
 800b1bc:	f7ff bb8f 	b.w	800a8de <MotionPM_Update+0x2a6>
 800b1c0:	2d64      	cmp	r5, #100	; 0x64
 800b1c2:	d85f      	bhi.n	800b284 <MotionPM_Update+0xc4c>
 800b1c4:	4b4e      	ldr	r3, [pc, #312]	; (800b300 <MotionPM_Update+0xcc8>)
 800b1c6:	ed93 9a00 	vldr	s18, [r3]
 800b1ca:	e491      	b.n	800aaf0 <MotionPM_Update+0x4b8>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	ed8d 8a3e 	vstr	s16, [sp, #248]	; 0xf8
 800b1d2:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 800b1d6:	ed8d 8a42 	vstr	s16, [sp, #264]	; 0x108
 800b1da:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 800b1de:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
 800b1e2:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 800b1e6:	ed8d 8a4a 	vstr	s16, [sp, #296]	; 0x128
 800b1ea:	ed8d 8a4c 	vstr	s16, [sp, #304]	; 0x130
 800b1ee:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 800b1f2:	ed8d 8a50 	vstr	s16, [sp, #320]	; 0x140
 800b1f6:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 800b1fa:	ed8d 8a54 	vstr	s16, [sp, #336]	; 0x150
 800b1fe:	ed8d 8a56 	vstr	s16, [sp, #344]	; 0x158
 800b202:	ed8d 8a58 	vstr	s16, [sp, #352]	; 0x160
 800b206:	ed8d 8a5a 	vstr	s16, [sp, #360]	; 0x168
 800b20a:	ed8d 8a5c 	vstr	s16, [sp, #368]	; 0x170
 800b20e:	933d      	str	r3, [sp, #244]	; 0xf4
 800b210:	f8ad 30fc 	strh.w	r3, [sp, #252]	; 0xfc
 800b214:	9341      	str	r3, [sp, #260]	; 0x104
 800b216:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
 800b21a:	9345      	str	r3, [sp, #276]	; 0x114
 800b21c:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800b220:	9349      	str	r3, [sp, #292]	; 0x124
 800b222:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 800b226:	934d      	str	r3, [sp, #308]	; 0x134
 800b228:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800b22c:	9351      	str	r3, [sp, #324]	; 0x144
 800b22e:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
 800b232:	9355      	str	r3, [sp, #340]	; 0x154
 800b234:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
 800b238:	9359      	str	r3, [sp, #356]	; 0x164
 800b23a:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
 800b23e:	935d      	str	r3, [sp, #372]	; 0x174
 800b240:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
 800b244:	9361      	str	r3, [sp, #388]	; 0x184
 800b246:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
 800b24a:	9303      	str	r3, [sp, #12]
 800b24c:	ed8d 8a5e 	vstr	s16, [sp, #376]	; 0x178
 800b250:	ed8d 8a60 	vstr	s16, [sp, #384]	; 0x180
 800b254:	ed8d 8a62 	vstr	s16, [sp, #392]	; 0x188
 800b258:	ed8d 8a64 	vstr	s16, [sp, #400]	; 0x190
 800b25c:	e412      	b.n	800aa84 <MotionPM_Update+0x44c>
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	4a1d      	ldr	r2, [pc, #116]	; (800b2d8 <MotionPM_Update+0xca0>)
 800b262:	4928      	ldr	r1, [pc, #160]	; (800b304 <MotionPM_Update+0xccc>)
 800b264:	ed83 8a00 	vstr	s16, [r3]
 800b268:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800b26c:	2301      	movs	r3, #1
 800b26e:	ed9f da26 	vldr	s26, [pc, #152]	; 800b308 <MotionPM_Update+0xcd0>
 800b272:	ed42 7a02 	vstr	s15, [r2, #-8]
 800b276:	eef0 9a67 	vmov.f32	s19, s15
 800b27a:	6011      	str	r1, [r2, #0]
 800b27c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800b280:	f7ff bbfc 	b.w	800aa7c <MotionPM_Update+0x444>
 800b284:	4b21      	ldr	r3, [pc, #132]	; (800b30c <MotionPM_Update+0xcd4>)
 800b286:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800b308 <MotionPM_Update+0xcd0>
 800b28a:	ed83 8a64 	vstr	s16, [r3, #400]	; 0x190
 800b28e:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800b292:	ecf3 7a01 	vldmia	r3!, {s15}
 800b296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b29a:	eeb4 dae7 	vcmpe.f32	s26, s15
 800b29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a2:	eef4 9ae7 	vcmpe.f32	s19, s15
 800b2a6:	bfb8      	it	lt
 800b2a8:	eeb0 da67 	vmovlt.f32	s26, s15
 800b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b0:	bf88      	it	hi
 800b2b2:	eef0 9a67 	vmovhi.f32	s19, s15
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	ee39 9a27 	vadd.f32	s18, s18, s15
 800b2bc:	d1e9      	bne.n	800b292 <MotionPM_Update+0xc5a>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b310 <MotionPM_Update+0xcd8>
 800b2c4:	ed83 da00 	vstr	s26, [r3]
 800b2c8:	ee29 9a27 	vmul.f32	s18, s18, s15
 800b2cc:	4b11      	ldr	r3, [pc, #68]	; (800b314 <MotionPM_Update+0xcdc>)
 800b2ce:	edc3 9a00 	vstr	s19, [r3]
 800b2d2:	ed03 9a02 	vstr	s18, [r3, #-8]
 800b2d6:	e40b      	b.n	800aaf0 <MotionPM_Update+0x4b8>
 800b2d8:	200006c8 	.word	0x200006c8
 800b2dc:	51eb851f 	.word	0x51eb851f
 800b2e0:	3feccccd 	.word	0x3feccccd
 800b2e4:	4009999a 	.word	0x4009999a
 800b2e8:	47435000 	.word	0x47435000
 800b2ec:	47240fff 	.word	0x47240fff
 800b2f0:	45dabfff 	.word	0x45dabfff
 800b2f4:	3c1ba5e3 	.word	0x3c1ba5e3
 800b2f8:	2000086c 	.word	0x2000086c
 800b2fc:	3b9ba5e3 	.word	0x3b9ba5e3
 800b300:	200006b8 	.word	0x200006b8
 800b304:	3f866666 	.word	0x3f866666
 800b308:	00000000 	.word	0x00000000
 800b30c:	20000528 	.word	0x20000528
 800b310:	3c23d70a 	.word	0x3c23d70a
 800b314:	200006c0 	.word	0x200006c0
 800b318:	2bfa      	cmp	r3, #250	; 0xfa
 800b31a:	f47f ad49 	bne.w	800adb0 <MotionPM_Update+0x778>
 800b31e:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 800b322:	4a60      	ldr	r2, [pc, #384]	; (800b4a4 <MotionPM_Update+0xe6c>)
 800b324:	4960      	ldr	r1, [pc, #384]	; (800b4a8 <MotionPM_Update+0xe70>)
 800b326:	ed84 8ac9 	vstr	s16, [r4, #804]	; 0x324
 800b32a:	ed84 8ac8 	vstr	s16, [r4, #800]	; 0x320
 800b32e:	f8cb 1000 	str.w	r1, [fp]
 800b332:	ed82 8a00 	vstr	s16, [r2]
 800b336:	e707      	b.n	800b148 <MotionPM_Update+0xb10>
 800b338:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	bf88      	it	hi
 800b342:	eeb0 7a45 	vmovhi.f32	s14, s10
 800b346:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34e:	bf88      	it	hi
 800b350:	eeb0 7a64 	vmovhi.f32	s14, s9
 800b354:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35c:	f77f ab4a 	ble.w	800a9f4 <MotionPM_Update+0x3bc>
 800b360:	2001      	movs	r0, #1
 800b362:	e716      	b.n	800b192 <MotionPM_Update+0xb5a>
 800b364:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b36c:	e51b      	b.n	800ada6 <MotionPM_Update+0x76e>
 800b36e:	4f4f      	ldr	r7, [pc, #316]	; (800b4ac <MotionPM_Update+0xe74>)
 800b370:	1d32      	adds	r2, r6, #4
 800b372:	fba7 c702 	umull	ip, r7, r7, r2
 800b376:	eba2 0c07 	sub.w	ip, r2, r7
 800b37a:	eb07 075c 	add.w	r7, r7, ip, lsr #1
 800b37e:	08bf      	lsrs	r7, r7, #2
 800b380:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800b384:	1bd7      	subs	r7, r2, r7
 800b386:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800b38a:	18fa      	adds	r2, r7, r3
 800b38c:	eb04 0882 	add.w	r8, r4, r2, lsl #2
 800b390:	9a02      	ldr	r2, [sp, #8]
 800b392:	f103 073c 	add.w	r7, r3, #60	; 0x3c
 800b396:	f1a2 0e02 	sub.w	lr, r2, #2
 800b39a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800b39e:	ee07 ea90 	vmov	s15, lr
 800b3a2:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 800b3a6:	f8d8 20d0 	ldr.w	r2, [r8, #208]	; 0xd0
 800b3aa:	ed9c 6a7c 	vldr	s12, [ip, #496]	; 0x1f0
 800b3ae:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800b3b2:	60fa      	str	r2, [r7, #12]
 800b3b4:	3341      	adds	r3, #65	; 0x41
 800b3b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b3c2:	608a      	str	r2, [r1, #8]
 800b3c4:	1c42      	adds	r2, r0, #1
 800b3c6:	f8c3 800c 	str.w	r8, [r3, #12]
 800b3ca:	edcc 7a7c 	vstr	s15, [ip, #496]	; 0x1f0
 800b3ce:	ed8c 6a86 	vstr	s12, [ip, #536]	; 0x218
 800b3d2:	f040 8493 	bne.w	800bcfc <MotionPM_Update+0x16c4>
 800b3d6:	ed93 7a03 	vldr	s14, [r3, #12]
 800b3da:	edd7 6a03 	vldr	s13, [r7, #12]
 800b3de:	4b34      	ldr	r3, [pc, #208]	; (800b4b0 <MotionPM_Update+0xe78>)
 800b3e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b3e4:	edd3 6a00 	vldr	s13, [r3]
 800b3e8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f0:	dd12      	ble.n	800b418 <MotionPM_Update+0xde0>
 800b3f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b3f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b4b4 <MotionPM_Update+0xe7c>
 800b3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b402:	d509      	bpl.n	800b418 <MotionPM_Update+0xde0>
 800b404:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800b408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b410:	dd02      	ble.n	800b418 <MotionPM_Update+0xde0>
 800b412:	2daf      	cmp	r5, #175	; 0xaf
 800b414:	f200 836c 	bhi.w	800baf0 <MotionPM_Update+0x14b8>
 800b418:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800b41c:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 800b420:	1aeb      	subs	r3, r5, r3
 800b422:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800b426:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b4b8 <MotionPM_Update+0xe80>
 800b42a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b432:	f77f aaf6 	ble.w	800aa22 <MotionPM_Update+0x3ea>
 800b436:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b4bc <MotionPM_Update+0xe84>
 800b43a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b442:	f57f aaee 	bpl.w	800aa22 <MotionPM_Update+0x3ea>
 800b446:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b4c0 <MotionPM_Update+0xe88>
 800b44a:	9a03      	ldr	r2, [sp, #12]
 800b44c:	edd4 6ad7 	vldr	s13, [r4, #860]	; 0x35c
 800b450:	edc4 8ac9 	vstr	s17, [r4, #804]	; 0x324
 800b454:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b458:	a83c      	add	r0, sp, #240	; 0xf0
 800b45a:	eb00 1102 	add.w	r1, r0, r2, lsl #4
 800b45e:	3201      	adds	r2, #1
 800b460:	9203      	str	r2, [sp, #12]
 800b462:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b46a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b46e:	ee17 2a90 	vmov	r2, s15
 800b472:	b212      	sxth	r2, r2
 800b474:	ee07 2a90 	vmov	s15, r2
 800b478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b47c:	edc4 8ad4 	vstr	s17, [r4, #848]	; 0x350
 800b480:	ee37 da8d 	vadd.f32	s26, s15, s26
 800b484:	edc1 8a02 	vstr	s17, [r1, #8]
 800b488:	ee6d 7a07 	vmul.f32	s15, s26, s14
 800b48c:	ed84 daca 	vstr	s26, [r4, #808]	; 0x328
 800b490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b494:	edc1 6a04 	vstr	s13, [r1, #16]
 800b498:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 800b49c:	edc1 7a01 	vstr	s15, [r1, #4]
 800b4a0:	f7ff babf 	b.w	800aa22 <MotionPM_Update+0x3ea>
 800b4a4:	2000086c 	.word	0x2000086c
 800b4a8:	3b9ba5e3 	.word	0x3b9ba5e3
 800b4ac:	24924925 	.word	0x24924925
 800b4b0:	200006cc 	.word	0x200006cc
 800b4b4:	42280000 	.word	0x42280000
 800b4b8:	3feccccd 	.word	0x3feccccd
 800b4bc:	4009999a 	.word	0x4009999a
 800b4c0:	42480000 	.word	0x42480000
 800b4c4:	9d03      	ldr	r5, [sp, #12]
 800b4c6:	953c      	str	r5, [sp, #240]	; 0xf0
 800b4c8:	a93c      	add	r1, sp, #240	; 0xf0
 800b4ca:	22a4      	movs	r2, #164	; 0xa4
 800b4cc:	a896      	add	r0, sp, #600	; 0x258
 800b4ce:	f000 fe5b 	bl	800c188 <memcpy>
 800b4d2:	a996      	add	r1, sp, #600	; 0x258
 800b4d4:	22a4      	movs	r2, #164	; 0xa4
 800b4d6:	a865      	add	r0, sp, #404	; 0x194
 800b4d8:	9596      	str	r5, [sp, #600]	; 0x258
 800b4da:	f000 fe55 	bl	800c188 <memcpy>
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	f43f a8d6 	beq.w	800a690 <MotionPM_Update+0x58>
 800b4e4:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 8269 	beq.w	800b9c0 <MotionPM_Update+0x1388>
 800b4ee:	4be2      	ldr	r3, [pc, #904]	; (800b878 <MotionPM_Update+0x1240>)
 800b4f0:	eddf 7ae2 	vldr	s15, [pc, #904]	; 800b87c <MotionPM_Update+0x1244>
 800b4f4:	edd3 3a00 	vldr	s7, [r3]
 800b4f8:	ed93 5a01 	vldr	s10, [r3, #4]
 800b4fc:	ed93 4a02 	vldr	s8, [r3, #8]
 800b500:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 800b504:	ed94 2acd 	vldr	s4, [r4, #820]	; 0x334
 800b508:	edd3 5a03 	vldr	s11, [r3, #12]
 800b50c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b510:	edd4 2acf 	vldr	s5, [r4, #828]	; 0x33c
 800b514:	ed13 3a05 	vldr	s6, [r3, #-20]	; 0xffffffec
 800b518:	edd4 4ad0 	vldr	s9, [r4, #832]	; 0x340
 800b51c:	ed94 6ad1 	vldr	s12, [r4, #836]	; 0x344
 800b520:	ed43 3a01 	vstr	s7, [r3, #-4]
 800b524:	eef4 3ae7 	vcmpe.f32	s7, s15
 800b528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52c:	bf98      	it	ls
 800b52e:	eef0 7a63 	vmovls.f32	s15, s7
 800b532:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800b536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53a:	bf98      	it	ls
 800b53c:	eef0 7a45 	vmovls.f32	s15, s10
 800b540:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b548:	bf98      	it	ls
 800b54a:	eef0 7a44 	vmovls.f32	s15, s8
 800b54e:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b552:	eef4 5ae7 	vcmpe.f32	s11, s15
 800b556:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55e:	ee37 7a22 	vadd.f32	s14, s14, s5
 800b562:	eef4 6ac3 	vcmpe.f32	s13, s6
 800b566:	bf98      	it	ls
 800b568:	eef0 7a65 	vmovls.f32	s15, s11
 800b56c:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b578:	bf88      	it	hi
 800b57a:	eef0 6a43 	vmovhi.f32	s13, s6
 800b57e:	2200      	movs	r2, #0
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	f1a3 0108 	sub.w	r1, r3, #8
 800b588:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b58c:	ed83 5a00 	vstr	s10, [r3]
 800b590:	ed83 4a01 	vstr	s8, [r3, #4]
 800b594:	edc3 5a02 	vstr	s11, [r3, #8]
 800b598:	edc3 6a03 	vstr	s13, [r3, #12]
 800b59c:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
 800b5a0:	f340 82ba 	ble.w	800bb18 <MotionPM_Update+0x14e0>
 800b5a4:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	f340 82b5 	ble.w	800bb18 <MotionPM_Update+0x14e0>
 800b5ae:	ee33 6a85 	vadd.f32	s12, s7, s10
 800b5b2:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 800b898 <MotionPM_Update+0x1260>
 800b5b6:	eddf 2ab2 	vldr	s5, [pc, #712]	; 800b880 <MotionPM_Update+0x1248>
 800b5ba:	eddf 1ab2 	vldr	s3, [pc, #712]	; 800b884 <MotionPM_Update+0x124c>
 800b5be:	ee36 6a04 	vadd.f32	s12, s12, s8
 800b5c2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b5c6:	ee36 6a86 	vadd.f32	s12, s13, s12
 800b5ca:	ee26 6a02 	vmul.f32	s12, s12, s4
 800b5ce:	ee74 4a46 	vsub.f32	s9, s8, s12
 800b5d2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b5d6:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b5da:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800b5de:	eee5 4a05 	vfma.f32	s9, s10, s10
 800b5e2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b5e6:	eee5 4aa5 	vfma.f32	s9, s11, s11
 800b5ea:	ee66 5a22 	vmul.f32	s11, s12, s5
 800b5ee:	eee6 4aa6 	vfma.f32	s9, s13, s13
 800b5f2:	ee33 6ac6 	vsub.f32	s12, s7, s12
 800b5f6:	eee7 5aa1 	vfma.f32	s11, s15, s3
 800b5fa:	eef0 7a64 	vmov.f32	s15, s9
 800b5fe:	eee6 7a06 	vfma.f32	s15, s12, s12
 800b602:	ee65 6aa1 	vmul.f32	s13, s11, s3
 800b606:	ee67 7a82 	vmul.f32	s15, s15, s4
 800b60a:	edc1 6a00 	vstr	s13, [r1]
 800b60e:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 800b612:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61a:	d521      	bpl.n	800b660 <MotionPM_Update+0x1028>
 800b61c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800b888 <MotionPM_Update+0x1250>
 800b620:	eef4 bac7 	vcmpe.f32	s23, s14
 800b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b628:	f57f a832 	bpl.w	800a690 <MotionPM_Update+0x58>
 800b62c:	ee69 9aa9 	vmul.f32	s19, s19, s19
 800b630:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800b88c <MotionPM_Update+0x1254>
 800b634:	eec7 6aa9 	vdiv.f32	s13, s15, s19
 800b638:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	f57f a826 	bpl.w	800a690 <MotionPM_Update+0x58>
 800b644:	ee73 7a44 	vsub.f32	s15, s6, s8
 800b648:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b64c:	eef0 7ae7 	vabs.f32	s15, s15
 800b650:	eec7 6a83 	vdiv.f32	s13, s15, s6
 800b654:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65c:	f57f a818 	bpl.w	800a690 <MotionPM_Update+0x58>
 800b660:	eddd 6a67 	vldr	s13, [sp, #412]	; 0x19c
 800b664:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800b890 <MotionPM_Update+0x1258>
 800b668:	f8d4 336c 	ldr.w	r3, [r4, #876]	; 0x36c
 800b66c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b66e:	f8b4 1368 	ldrh.w	r1, [r4, #872]	; 0x368
 800b672:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	eb04 1502 	add.w	r5, r4, r2, lsl #4
 800b67c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b680:	3337      	adds	r3, #55	; 0x37
 800b682:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800b686:	f8c5 0360 	str.w	r0, [r5, #864]	; 0x360
 800b68a:	edc5 6ad9 	vstr	s13, [r5, #868]	; 0x364
 800b68e:	ee17 5a10 	vmov	r5, s14
 800b692:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800b694:	811d      	strh	r5, [r3, #8]
 800b696:	3101      	adds	r1, #1
 800b698:	f8b4 536a 	ldrh.w	r5, [r4, #874]	; 0x36a
 800b69c:	60d8      	str	r0, [r3, #12]
 800b69e:	b289      	uxth	r1, r1
 800b6a0:	9803      	ldr	r0, [sp, #12]
 800b6a2:	fbb2 f3f5 	udiv	r3, r2, r5
 800b6a6:	42a9      	cmp	r1, r5
 800b6a8:	bf28      	it	cs
 800b6aa:	4629      	movcs	r1, r5
 800b6ac:	2801      	cmp	r0, #1
 800b6ae:	fb05 2213 	mls	r2, r5, r3, r2
 800b6b2:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 800b6b6:	f240 8160 	bls.w	800b97a <MotionPM_Update+0x1342>
 800b6ba:	eddd 6a6b 	vldr	s13, [sp, #428]	; 0x1ac
 800b6be:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 800b6c0:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
 800b6c4:	1c56      	adds	r6, r2, #1
 800b6c6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b6ca:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b6ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b6d2:	3101      	adds	r1, #1
 800b6d4:	b289      	uxth	r1, r1
 800b6d6:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b6da:	3237      	adds	r2, #55	; 0x37
 800b6dc:	9803      	ldr	r0, [sp, #12]
 800b6de:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b6e2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b6e6:	42a9      	cmp	r1, r5
 800b6e8:	ee17 7a10 	vmov	r7, s14
 800b6ec:	bf28      	it	cs
 800b6ee:	4629      	movcs	r1, r5
 800b6f0:	2802      	cmp	r0, #2
 800b6f2:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b6f6:	8117      	strh	r7, [r2, #8]
 800b6f8:	fbb6 f2f5 	udiv	r2, r6, r5
 800b6fc:	fb05 6212 	mls	r2, r5, r2, r6
 800b700:	f000 813b 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b704:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 800b708:	986e      	ldr	r0, [sp, #440]	; 0x1b8
 800b70a:	f8dd c1c4 	ldr.w	ip, [sp, #452]	; 0x1c4
 800b70e:	1c56      	adds	r6, r2, #1
 800b710:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b714:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b718:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b71c:	3101      	adds	r1, #1
 800b71e:	b289      	uxth	r1, r1
 800b720:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b724:	3237      	adds	r2, #55	; 0x37
 800b726:	9803      	ldr	r0, [sp, #12]
 800b728:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b72c:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b730:	42a9      	cmp	r1, r5
 800b732:	ee17 7a10 	vmov	r7, s14
 800b736:	bf28      	it	cs
 800b738:	4629      	movcs	r1, r5
 800b73a:	2803      	cmp	r0, #3
 800b73c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b740:	8117      	strh	r7, [r2, #8]
 800b742:	fbb6 f2f5 	udiv	r2, r6, r5
 800b746:	fb05 6212 	mls	r2, r5, r2, r6
 800b74a:	f000 8116 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b74e:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 800b752:	9872      	ldr	r0, [sp, #456]	; 0x1c8
 800b754:	f8dd c1d4 	ldr.w	ip, [sp, #468]	; 0x1d4
 800b758:	1c56      	adds	r6, r2, #1
 800b75a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b75e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b762:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b766:	3101      	adds	r1, #1
 800b768:	b289      	uxth	r1, r1
 800b76a:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b76e:	3237      	adds	r2, #55	; 0x37
 800b770:	9803      	ldr	r0, [sp, #12]
 800b772:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b776:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b77a:	42a9      	cmp	r1, r5
 800b77c:	ee17 7a10 	vmov	r7, s14
 800b780:	bf28      	it	cs
 800b782:	4629      	movcs	r1, r5
 800b784:	2804      	cmp	r0, #4
 800b786:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b78a:	8117      	strh	r7, [r2, #8]
 800b78c:	fbb6 f2f5 	udiv	r2, r6, r5
 800b790:	fb05 6212 	mls	r2, r5, r2, r6
 800b794:	f000 80f1 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b798:	eddd 6a77 	vldr	s13, [sp, #476]	; 0x1dc
 800b79c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 800b79e:	f8dd c1e4 	ldr.w	ip, [sp, #484]	; 0x1e4
 800b7a2:	1c56      	adds	r6, r2, #1
 800b7a4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b7a8:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b7ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b7b0:	3101      	adds	r1, #1
 800b7b2:	b289      	uxth	r1, r1
 800b7b4:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b7b8:	3237      	adds	r2, #55	; 0x37
 800b7ba:	9803      	ldr	r0, [sp, #12]
 800b7bc:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b7c0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b7c4:	42a9      	cmp	r1, r5
 800b7c6:	ee17 7a10 	vmov	r7, s14
 800b7ca:	bf28      	it	cs
 800b7cc:	4629      	movcs	r1, r5
 800b7ce:	2805      	cmp	r0, #5
 800b7d0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b7d4:	8117      	strh	r7, [r2, #8]
 800b7d6:	fbb6 f2f5 	udiv	r2, r6, r5
 800b7da:	fb05 6212 	mls	r2, r5, r2, r6
 800b7de:	f000 80cc 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b7e2:	eddd 6a7b 	vldr	s13, [sp, #492]	; 0x1ec
 800b7e6:	987a      	ldr	r0, [sp, #488]	; 0x1e8
 800b7e8:	f8dd c1f4 	ldr.w	ip, [sp, #500]	; 0x1f4
 800b7ec:	1c56      	adds	r6, r2, #1
 800b7ee:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b7f2:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b7f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b7fa:	3101      	adds	r1, #1
 800b7fc:	b289      	uxth	r1, r1
 800b7fe:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b802:	3237      	adds	r2, #55	; 0x37
 800b804:	9803      	ldr	r0, [sp, #12]
 800b806:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b80a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b80e:	42a9      	cmp	r1, r5
 800b810:	ee17 7a10 	vmov	r7, s14
 800b814:	bf28      	it	cs
 800b816:	4629      	movcs	r1, r5
 800b818:	2806      	cmp	r0, #6
 800b81a:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b81e:	8117      	strh	r7, [r2, #8]
 800b820:	fbb6 f2f5 	udiv	r2, r6, r5
 800b824:	fb05 6212 	mls	r2, r5, r2, r6
 800b828:	f000 80a7 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b82c:	eddd 6a7f 	vldr	s13, [sp, #508]	; 0x1fc
 800b830:	987e      	ldr	r0, [sp, #504]	; 0x1f8
 800b832:	f8dd c204 	ldr.w	ip, [sp, #516]	; 0x204
 800b836:	1c56      	adds	r6, r2, #1
 800b838:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b83c:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b840:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b844:	3101      	adds	r1, #1
 800b846:	b289      	uxth	r1, r1
 800b848:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b84c:	3237      	adds	r2, #55	; 0x37
 800b84e:	9803      	ldr	r0, [sp, #12]
 800b850:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b854:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b858:	42a9      	cmp	r1, r5
 800b85a:	ee17 7a10 	vmov	r7, s14
 800b85e:	bf28      	it	cs
 800b860:	4629      	movcs	r1, r5
 800b862:	2807      	cmp	r0, #7
 800b864:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b868:	8117      	strh	r7, [r2, #8]
 800b86a:	fbb6 f2f5 	udiv	r2, r6, r5
 800b86e:	fb05 6212 	mls	r2, r5, r2, r6
 800b872:	f000 8082 	beq.w	800b97a <MotionPM_Update+0x1342>
 800b876:	e017      	b.n	800b8a8 <MotionPM_Update+0x1270>
 800b878:	20000ae0 	.word	0x20000ae0
 800b87c:	42c80000 	.word	0x42c80000
 800b880:	3eb33333 	.word	0x3eb33333
 800b884:	3f266666 	.word	0x3f266666
 800b888:	43480000 	.word	0x43480000
 800b88c:	3e99999a 	.word	0x3e99999a
 800b890:	42700000 	.word	0x42700000
 800b894:	3f4ccccd 	.word	0x3f4ccccd
 800b898:	3e4ccccd 	.word	0x3e4ccccd
 800b89c:	3dcccccd 	.word	0x3dcccccd
 800b8a0:	00000000 	.word	0x00000000
 800b8a4:	42160000 	.word	0x42160000
 800b8a8:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 800b8ac:	9882      	ldr	r0, [sp, #520]	; 0x208
 800b8ae:	f8dd c214 	ldr.w	ip, [sp, #532]	; 0x214
 800b8b2:	1c56      	adds	r6, r2, #1
 800b8b4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b8b8:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b8bc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b8c0:	3101      	adds	r1, #1
 800b8c2:	b289      	uxth	r1, r1
 800b8c4:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b8c8:	3237      	adds	r2, #55	; 0x37
 800b8ca:	9803      	ldr	r0, [sp, #12]
 800b8cc:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b8d0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b8d4:	42a9      	cmp	r1, r5
 800b8d6:	ee17 7a10 	vmov	r7, s14
 800b8da:	bf28      	it	cs
 800b8dc:	4629      	movcs	r1, r5
 800b8de:	2808      	cmp	r0, #8
 800b8e0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b8e4:	8117      	strh	r7, [r2, #8]
 800b8e6:	fbb6 f2f5 	udiv	r2, r6, r5
 800b8ea:	fb05 6212 	mls	r2, r5, r2, r6
 800b8ee:	d044      	beq.n	800b97a <MotionPM_Update+0x1342>
 800b8f0:	eddd 6a87 	vldr	s13, [sp, #540]	; 0x21c
 800b8f4:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b8f6:	f8dd c224 	ldr.w	ip, [sp, #548]	; 0x224
 800b8fa:	1c56      	adds	r6, r2, #1
 800b8fc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b900:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 800b904:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b908:	3101      	adds	r1, #1
 800b90a:	b289      	uxth	r1, r1
 800b90c:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800b910:	3237      	adds	r2, #55	; 0x37
 800b912:	9803      	ldr	r0, [sp, #12]
 800b914:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 800b918:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b91c:	42a9      	cmp	r1, r5
 800b91e:	ee17 7a10 	vmov	r7, s14
 800b922:	bf28      	it	cs
 800b924:	4629      	movcs	r1, r5
 800b926:	2809      	cmp	r0, #9
 800b928:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b92c:	8117      	strh	r7, [r2, #8]
 800b92e:	fbb6 f2f5 	udiv	r2, r6, r5
 800b932:	fb05 6212 	mls	r2, r5, r2, r6
 800b936:	d020      	beq.n	800b97a <MotionPM_Update+0x1342>
 800b938:	ed9d 7a8b 	vldr	s14, [sp, #556]	; 0x22c
 800b93c:	9e8a      	ldr	r6, [sp, #552]	; 0x228
 800b93e:	f8dd c234 	ldr.w	ip, [sp, #564]	; 0x234
 800b942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b946:	1c50      	adds	r0, r2, #1
 800b948:	eb04 1700 	add.w	r7, r4, r0, lsl #4
 800b94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b950:	3237      	adds	r2, #55	; 0x37
 800b952:	3101      	adds	r1, #1
 800b954:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800b958:	b289      	uxth	r1, r1
 800b95a:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800b95e:	ee17 6a90 	vmov	r6, s15
 800b962:	42a9      	cmp	r1, r5
 800b964:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b968:	8116      	strh	r6, [r2, #8]
 800b96a:	bf28      	it	cs
 800b96c:	4629      	movcs	r1, r5
 800b96e:	fbb0 f2f5 	udiv	r2, r0, r5
 800b972:	ed87 7ad9 	vstr	s14, [r7, #868]	; 0x364
 800b976:	fb05 0212 	mls	r2, r5, r2, r0
 800b97a:	9803      	ldr	r0, [sp, #12]
 800b97c:	f8a4 1368 	strh.w	r1, [r4, #872]	; 0x368
 800b980:	4403      	add	r3, r0
 800b982:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
 800b986:	f8c4 236c 	str.w	r2, [r4, #876]	; 0x36c
 800b98a:	f7fe be83 	b.w	800a694 <MotionPM_Update+0x5c>
 800b98e:	f894 2a20 	ldrb.w	r2, [r4, #2592]	; 0xa20
 800b992:	2a96      	cmp	r2, #150	; 0x96
 800b994:	d903      	bls.n	800b99e <MotionPM_Update+0x1366>
 800b996:	2200      	movs	r2, #0
 800b998:	700a      	strb	r2, [r1, #0]
 800b99a:	f7fe be91 	b.w	800a6c0 <MotionPM_Update+0x88>
 800b99e:	edd4 7ac8 	vldr	s15, [r4, #800]	; 0x320
 800b9a2:	ed1f 7a45 	vldr	s14, [pc, #-276]	; 800b890 <MotionPM_Update+0x1258>
 800b9a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b0:	f884 2a20 	strb.w	r2, [r4, #2592]	; 0xa20
 800b9b4:	ee17 1a90 	vmov	r1, s15
 800b9b8:	9a04      	ldr	r2, [sp, #16]
 800b9ba:	7011      	strb	r1, [r2, #0]
 800b9bc:	f7fe be80 	b.w	800a6c0 <MotionPM_Update+0x88>
 800b9c0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 800b9c4:	ed94 7acd 	vldr	s14, [r4, #820]	; 0x334
 800b9c8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 800b894 <MotionPM_Update+0x125c>
 800b9cc:	9a03      	ldr	r2, [sp, #12]
 800b9ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9d2:	4413      	add	r3, r2
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800b9de:	f77e ae57 	ble.w	800a690 <MotionPM_Update+0x58>
 800b9e2:	edd4 6ace 	vldr	s13, [r4, #824]	; 0x338
 800b9e6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ee:	f77e ae4f 	ble.w	800a690 <MotionPM_Update+0x58>
 800b9f2:	ed94 6acf 	vldr	s12, [r4, #828]	; 0x33c
 800b9f6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800b9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fe:	f77e ae47 	ble.w	800a690 <MotionPM_Update+0x58>
 800ba02:	edd4 5ad0 	vldr	s11, [r4, #832]	; 0x340
 800ba06:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0e:	f77e ae3f 	ble.w	800a690 <MotionPM_Update+0x58>
 800ba12:	ed94 4ad1 	vldr	s8, [r4, #836]	; 0x344
 800ba16:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800ba1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1e:	f77e ae37 	ble.w	800a690 <MotionPM_Update+0x58>
 800ba22:	ee77 4a26 	vadd.f32	s9, s14, s13
 800ba26:	ed1f 5a64 	vldr	s10, [pc, #-400]	; 800b898 <MotionPM_Update+0x1260>
 800ba2a:	ee76 4a24 	vadd.f32	s9, s12, s9
 800ba2e:	eef6 3a04 	vmov.f32	s7, #100	; 0x3f200000  0.625
 800ba32:	ee75 4aa4 	vadd.f32	s9, s11, s9
 800ba36:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ba3a:	ee24 5a85 	vmul.f32	s10, s9, s10
 800ba3e:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ba42:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ba46:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ba4a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ba4e:	eef0 7a46 	vmov.f32	s15, s12
 800ba52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ba56:	ee34 4a45 	vsub.f32	s8, s8, s10
 800ba5a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ba5e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ba62:	eee4 7a04 	vfma.f32	s15, s8, s8
 800ba66:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ba6a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba72:	f140 811f 	bpl.w	800bcb4 <MotionPM_Update+0x167c>
 800ba76:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 800b89c <MotionPM_Update+0x1264>
 800ba7a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ba7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba82:	f340 8117 	ble.w	800bcb4 <MotionPM_Update+0x167c>
 800ba86:	ee89 7a05 	vdiv.f32	s14, s18, s10
 800ba8a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800ba8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba96:	f140 810d 	bpl.w	800bcb4 <MotionPM_Update+0x167c>
 800ba9a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 800ba9e:	eef4 4ae7 	vcmpe.f32	s9, s15
 800baa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa6:	f340 8105 	ble.w	800bcb4 <MotionPM_Update+0x167c>
 800baaa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800baae:	ee25 5a27 	vmul.f32	s10, s10, s15
 800bab2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800bab6:	eefc 7ac5 	vcvt.u32.f32	s15, s10
 800baba:	edcd 7a01 	vstr	s15, [sp, #4]
 800babe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bacc:	eef0 7ae7 	vabs.f32	s15, s15
 800bad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	f200 80ec 	bhi.w	800bcb4 <MotionPM_Update+0x167c>
 800badc:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 800bae0:	3301      	adds	r3, #1
 800bae2:	4413      	add	r3, r2
 800bae4:	2201      	movs	r2, #1
 800bae6:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
 800baea:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 800baee:	e4fe      	b.n	800b4ee <MotionPM_Update+0xeb6>
 800baf0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800baf4:	2300      	movs	r3, #0
 800baf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafa:	f884 3318 	strb.w	r3, [r4, #792]	; 0x318
 800bafe:	d111      	bne.n	800bb24 <MotionPM_Update+0x14ec>
 800bb00:	ee07 5a90 	vmov	s15, r5
 800bb04:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 800bb08:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 800bb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb10:	1aeb      	subs	r3, r5, r3
 800bb12:	edc4 7aca 	vstr	s15, [r4, #808]	; 0x328
 800bb16:	e484      	b.n	800b422 <MotionPM_Update+0xdea>
 800bb18:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800bb1c:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 800b8a0 <MotionPM_Update+0x1268>
 800bb20:	600b      	str	r3, [r1, #0]
 800bb22:	e574      	b.n	800b60e <MotionPM_Update+0xfd6>
 800bb24:	ee07 5a90 	vmov	s15, r5
 800bb28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2c:	ed1f 7aa3 	vldr	s14, [pc, #-652]	; 800b8a4 <MotionPM_Update+0x126c>
 800bb30:	edc4 7aca 	vstr	s15, [r4, #808]	; 0x328
 800bb34:	ee77 7acd 	vsub.f32	s15, s15, s26
 800bb38:	f8d4 732c 	ldr.w	r7, [r4, #812]	; 0x32c
 800bb3c:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
 800bb40:	ee87 ea27 	vdiv.f32	s28, s14, s15
 800bb44:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800bb48:	3001      	adds	r0, #1
 800bb4a:	2805      	cmp	r0, #5
 800bb4c:	ed93 7acc 	vldr	s14, [r3, #816]	; 0x330
 800bb50:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800bb54:	eea7 ea27 	vfma.f32	s28, s14, s15
 800bb58:	f300 80a7 	bgt.w	800bcaa <MotionPM_Update+0x1672>
 800bb5c:	f7f4 fe1c 	bl	8000798 <__aeabi_i2d>
 800bb60:	4680      	mov	r8, r0
 800bb62:	4689      	mov	r9, r1
 800bb64:	1c7b      	adds	r3, r7, #1
 800bb66:	2b08      	cmp	r3, #8
 800bb68:	d867      	bhi.n	800bc3a <MotionPM_Update+0x1602>
 800bb6a:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 800bb6e:	ed84 eac9 	vstr	s28, [r4, #804]	; 0x324
 800bb72:	f000 80a4 	beq.w	800bcbe <MotionPM_Update+0x1686>
 800bb76:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800bb7a:	ed87 eacd 	vstr	s28, [r7, #820]	; 0x334
 800bb7e:	b32b      	cbz	r3, 800bbcc <MotionPM_Update+0x1594>
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	edd4 dacd 	vldr	s27, [r4, #820]	; 0x334
 800bb86:	d021      	beq.n	800bbcc <MotionPM_Update+0x1594>
 800bb88:	edd4 7ace 	vldr	s15, [r4, #824]	; 0x338
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	ee7d daa7 	vadd.f32	s27, s27, s15
 800bb92:	d01b      	beq.n	800bbcc <MotionPM_Update+0x1594>
 800bb94:	edd4 7acf 	vldr	s15, [r4, #828]	; 0x33c
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	ee7d daa7 	vadd.f32	s27, s27, s15
 800bb9e:	d015      	beq.n	800bbcc <MotionPM_Update+0x1594>
 800bba0:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	ee7d daa7 	vadd.f32	s27, s27, s15
 800bbaa:	d00f      	beq.n	800bbcc <MotionPM_Update+0x1594>
 800bbac:	edd4 7ad1 	vldr	s15, [r4, #836]	; 0x344
 800bbb0:	2b05      	cmp	r3, #5
 800bbb2:	ee7d daa7 	vadd.f32	s27, s27, s15
 800bbb6:	d009      	beq.n	800bbcc <MotionPM_Update+0x1594>
 800bbb8:	edd4 7ad2 	vldr	s15, [r4, #840]	; 0x348
 800bbbc:	2b07      	cmp	r3, #7
 800bbbe:	ee7d daa7 	vadd.f32	s27, s27, s15
 800bbc2:	bf04      	itt	eq
 800bbc4:	edd4 7ad3 	vldreq	s15, [r4, #844]	; 0x34c
 800bbc8:	ee7d daa7 	vaddeq.f32	s27, s27, s15
 800bbcc:	ee07 3a90 	vmov	s15, r3
 800bbd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbd4:	eecd 7a87 	vdiv.f32	s15, s27, s14
 800bbd8:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 800bbdc:	ee77 7ace 	vsub.f32	s15, s15, s28
 800bbe0:	eef0 7ae7 	vabs.f32	s15, s15
 800bbe4:	ee17 0a90 	vmov	r0, s15
 800bbe8:	f7f4 fde8 	bl	80007bc <__aeabi_f2d>
 800bbec:	a3e5      	add	r3, pc, #916	; (adr r3, 800bf84 <MotionPM_Update+0x194c>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb55 	bl	80002a0 <__aeabi_dmul>
 800bbf6:	ec41 0b10 	vmov	d0, r0, r1
 800bbfa:	f000 ff51 	bl	800caa0 <floor>
 800bbfe:	4640      	mov	r0, r8
 800bc00:	ec53 2b10 	vmov	r2, r3, d0
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fc79 	bl	80004fc <__aeabi_dsub>
 800bc0a:	f7f4 feb7 	bl	800097c <__aeabi_d2iz>
 800bc0e:	eec8 7a8e 	vdiv.f32	s15, s17, s28
 800bc12:	2800      	cmp	r0, #0
 800bc14:	bfb6      	itet	lt
 800bc16:	2300      	movlt	r3, #0
 800bc18:	f8c4 035c 	strge.w	r0, [r4, #860]	; 0x35c
 800bc1c:	f8c4 335c 	strlt.w	r3, [r4, #860]	; 0x35c
 800bc20:	f8c4 5330 	str.w	r5, [r4, #816]	; 0x330
 800bc24:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800bf78 <MotionPM_Update+0x1940>
 800bc28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc30:	f77e af03 	ble.w	800aa3a <MotionPM_Update+0x402>
 800bc34:	2300      	movs	r3, #0
 800bc36:	f7ff bbfe 	b.w	800b436 <MotionPM_Update+0xdfe>
 800bc3a:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 800bc3e:	edd4 4acf 	vldr	s9, [r4, #828]	; 0x33c
 800bc42:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 800bc46:	ed94 5ad1 	vldr	s10, [r4, #836]	; 0x344
 800bc4a:	edd4 5ad2 	vldr	s11, [r4, #840]	; 0x348
 800bc4e:	ed94 6ad3 	vldr	s12, [r4, #844]	; 0x34c
 800bc52:	edd4 6ad4 	vldr	s13, [r4, #848]	; 0x350
 800bc56:	ed84 eac9 	vstr	s28, [r4, #804]	; 0x324
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	ed84 7acd 	vstr	s14, [r4, #820]	; 0x334
 800bc60:	edc4 4ace 	vstr	s9, [r4, #824]	; 0x338
 800bc64:	edc4 7acf 	vstr	s15, [r4, #828]	; 0x33c
 800bc68:	ed84 5ad0 	vstr	s10, [r4, #832]	; 0x340
 800bc6c:	edc4 5ad1 	vstr	s11, [r4, #836]	; 0x344
 800bc70:	ed84 6ad2 	vstr	s12, [r4, #840]	; 0x348
 800bc74:	edc4 6ad3 	vstr	s13, [r4, #844]	; 0x34c
 800bc78:	ed84 ead4 	vstr	s28, [r4, #848]	; 0x350
 800bc7c:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 800bc80:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bc84:	eef4 4a00 	vmov.f32	s9, #64	; 0x3e000000  0.125
 800bc88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc8c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bc90:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bc94:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bc98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800bca0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800bca4:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 800bca8:	e798      	b.n	800bbdc <MotionPM_Update+0x15a4>
 800bcaa:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800bf8c <MotionPM_Update+0x1954>
 800bcae:	f04f 0800 	mov.w	r8, #0
 800bcb2:	e757      	b.n	800bb64 <MotionPM_Update+0x152c>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800bcba:	f7fe bce9 	b.w	800a690 <MotionPM_Update+0x58>
 800bcbe:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 800bcc2:	edd4 4acf 	vldr	s9, [r4, #828]	; 0x33c
 800bcc6:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 800bcca:	ed94 5ad1 	vldr	s10, [r4, #836]	; 0x344
 800bcce:	edd4 5ad2 	vldr	s11, [r4, #840]	; 0x348
 800bcd2:	ed94 6ad3 	vldr	s12, [r4, #844]	; 0x34c
 800bcd6:	edd4 6ad4 	vldr	s13, [r4, #848]	; 0x350
 800bcda:	ed84 7acd 	vstr	s14, [r4, #820]	; 0x334
 800bcde:	edc4 4ace 	vstr	s9, [r4, #824]	; 0x338
 800bce2:	edc4 7acf 	vstr	s15, [r4, #828]	; 0x33c
 800bce6:	ed84 5ad0 	vstr	s10, [r4, #832]	; 0x340
 800bcea:	edc4 5ad1 	vstr	s11, [r4, #836]	; 0x344
 800bcee:	ed84 6ad2 	vstr	s12, [r4, #840]	; 0x348
 800bcf2:	edc4 6ad3 	vstr	s13, [r4, #844]	; 0x34c
 800bcf6:	ed84 ead4 	vstr	s28, [r4, #848]	; 0x350
 800bcfa:	e7c1      	b.n	800bc80 <MotionPM_Update+0x1648>
 800bcfc:	f994 3318 	ldrsb.w	r3, [r4, #792]	; 0x318
 800bd00:	3301      	adds	r3, #1
 800bd02:	f43f aa06 	beq.w	800b112 <MotionPM_Update+0xada>
 800bd06:	2801      	cmp	r0, #1
 800bd08:	f47f aa03 	bne.w	800b112 <MotionPM_Update+0xada>
 800bd0c:	f8d4 131c 	ldr.w	r1, [r4, #796]	; 0x31c
 800bd10:	1a6b      	subs	r3, r5, r1
 800bd12:	9308      	str	r3, [sp, #32]
 800bd14:	330a      	adds	r3, #10
 800bd16:	22ff      	movs	r2, #255	; 0xff
 800bd18:	2b31      	cmp	r3, #49	; 0x31
 800bd1a:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
 800bd1e:	f200 8124 	bhi.w	800bf6a <MotionPM_Update+0x1932>
 800bd22:	313c      	adds	r1, #60	; 0x3c
 800bd24:	1b4b      	subs	r3, r1, r5
 800bd26:	1e5a      	subs	r2, r3, #1
 800bd28:	b292      	uxth	r2, r2
 800bd2a:	2a31      	cmp	r2, #49	; 0x31
 800bd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd2e:	d80f      	bhi.n	800bd50 <MotionPM_Update+0x1718>
 800bd30:	1a69      	subs	r1, r5, r1
 800bd32:	3101      	adds	r1, #1
 800bd34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd38:	afc8      	add	r7, sp, #800	; 0x320
 800bd3a:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
 800bd3e:	1853      	adds	r3, r2, r1
 800bd40:	3201      	adds	r2, #1
 800bd42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bd46:	b292      	uxth	r2, r2
 800bd48:	2a32      	cmp	r2, #50	; 0x32
 800bd4a:	f843 0cc8 	str.w	r0, [r3, #-200]
 800bd4e:	d1f1      	bne.n	800bd34 <MotionPM_Update+0x16fc>
 800bd50:	2228      	movs	r2, #40	; 0x28
 800bd52:	2100      	movs	r1, #0
 800bd54:	a80a      	add	r0, sp, #40	; 0x28
 800bd56:	f000 fa3f 	bl	800c1d8 <memset>
 800bd5a:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 800bd5e:	2228      	movs	r2, #40	; 0x28
 800bd60:	2100      	movs	r1, #0
 800bd62:	a814      	add	r0, sp, #80	; 0x50
 800bd64:	f000 fa38 	bl	800c1d8 <memset>
 800bd68:	2228      	movs	r2, #40	; 0x28
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	f000 fa33 	bl	800c1d8 <memset>
 800bd72:	af32      	add	r7, sp, #200	; 0xc8
 800bd74:	2228      	movs	r2, #40	; 0x28
 800bd76:	2100      	movs	r1, #0
 800bd78:	a828      	add	r0, sp, #160	; 0xa0
 800bd7a:	f000 fa2d 	bl	800c1d8 <memset>
 800bd7e:	2228      	movs	r2, #40	; 0x28
 800bd80:	2100      	movs	r1, #0
 800bd82:	4638      	mov	r0, r7
 800bd84:	f000 fa28 	bl	800c1d8 <memset>
 800bd88:	4b7c      	ldr	r3, [pc, #496]	; (800bf7c <MotionPM_Update+0x1944>)
 800bd8a:	ed9d 7a96 	vldr	s14, [sp, #600]	; 0x258
 800bd8e:	ed93 6a00 	vldr	s12, [r3]
 800bd92:	f50d 7e16 	add.w	lr, sp, #600	; 0x258
 800bd96:	f50d 79ca 	add.w	r9, sp, #404	; 0x194
 800bd9a:	eef0 6a47 	vmov.f32	s13, s14
 800bd9e:	464b      	mov	r3, r9
 800bda0:	4671      	mov	r1, lr
 800bda2:	2200      	movs	r2, #0
 800bda4:	edd1 7a01 	vldr	s15, [r1, #4]
 800bda8:	3108      	adds	r1, #8
 800bdaa:	ee77 5ae6 	vsub.f32	s11, s15, s13
 800bdae:	edd1 6a00 	vldr	s13, [r1]
 800bdb2:	edc3 5a00 	vstr	s11, [r3]
 800bdb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bdba:	3202      	adds	r2, #2
 800bdbc:	2a30      	cmp	r2, #48	; 0x30
 800bdbe:	edc3 7a01 	vstr	s15, [r3, #4]
 800bdc2:	f103 0308 	add.w	r3, r3, #8
 800bdc6:	d1ed      	bne.n	800bda4 <MotionPM_Update+0x176c>
 800bdc8:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 800bdcc:	eddd 6ac6 	vldr	s13, [sp, #792]	; 0x318
 800bdd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdd4:	aa97      	add	r2, sp, #604	; 0x25c
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	edcd 7a95 	vstr	s15, [sp, #596]	; 0x254
 800bddc:	4694      	mov	ip, r2
 800bdde:	4619      	mov	r1, r3
 800bde0:	a865      	add	r0, sp, #404	; 0x194
 800bde2:	9205      	str	r2, [sp, #20]
 800bde4:	e006      	b.n	800bdf4 <MotionPM_Update+0x17bc>
 800bde6:	292f      	cmp	r1, #47	; 0x2f
 800bde8:	f10c 0c04 	add.w	ip, ip, #4
 800bdec:	d027      	beq.n	800be3e <MotionPM_Update+0x1806>
 800bdee:	2b0a      	cmp	r3, #10
 800bdf0:	f000 8140 	beq.w	800c074 <MotionPM_Update+0x1a3c>
 800bdf4:	ecf0 7a01 	vldmia	r0!, {s15}
 800bdf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be00:	f101 0101 	add.w	r1, r1, #1
 800be04:	d5ef      	bpl.n	800bde6 <MotionPM_Update+0x17ae>
 800be06:	edd0 7a00 	vldr	s15, [r0]
 800be0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be12:	dde8      	ble.n	800bde6 <MotionPM_Update+0x17ae>
 800be14:	eddc 7a00 	vldr	s15, [ip]
 800be18:	eef4 7acc 	vcmpe.f32	s15, s24
 800be1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be20:	d5e1      	bpl.n	800bde6 <MotionPM_Update+0x17ae>
 800be22:	aa28      	add	r2, sp, #160	; 0xa0
 800be24:	292f      	cmp	r1, #47	; 0x2f
 800be26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800be2a:	aa14      	add	r2, sp, #80	; 0x50
 800be2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800be30:	edc2 7a00 	vstr	s15, [r2]
 800be34:	f103 0301 	add.w	r3, r3, #1
 800be38:	f10c 0c04 	add.w	ip, ip, #4
 800be3c:	d1d7      	bne.n	800bdee <MotionPM_Update+0x17b6>
 800be3e:	9a05      	ldr	r2, [sp, #20]
 800be40:	b9d3      	cbnz	r3, 800be78 <MotionPM_Update+0x1840>
 800be42:	eef0 6a47 	vmov.f32	s13, s14
 800be46:	4610      	mov	r0, r2
 800be48:	2101      	movs	r1, #1
 800be4a:	ecf0 7a01 	vldmia	r0!, {s15}
 800be4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800be52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be56:	fa1f fc81 	uxth.w	ip, r1
 800be5a:	f101 0101 	add.w	r1, r1, #1
 800be5e:	bf44      	itt	mi
 800be60:	eef0 6a67 	vmovmi.f32	s13, s15
 800be64:	4663      	movmi	r3, ip
 800be66:	2932      	cmp	r1, #50	; 0x32
 800be68:	d1ef      	bne.n	800be4a <MotionPM_Update+0x1812>
 800be6a:	a9c8      	add	r1, sp, #800	; 0x320
 800be6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800be70:	9328      	str	r3, [sp, #160]	; 0xa0
 800be72:	f851 1cc8 	ldr.w	r1, [r1, #-200]
 800be76:	9114      	str	r1, [sp, #80]	; 0x50
 800be78:	2100      	movs	r1, #0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4610      	mov	r0, r2
 800be7e:	e006      	b.n	800be8e <MotionPM_Update+0x1856>
 800be80:	292f      	cmp	r1, #47	; 0x2f
 800be82:	f100 0004 	add.w	r0, r0, #4
 800be86:	d027      	beq.n	800bed8 <MotionPM_Update+0x18a0>
 800be88:	2b0a      	cmp	r3, #10
 800be8a:	f000 80f5 	beq.w	800c078 <MotionPM_Update+0x1a40>
 800be8e:	ecf9 7a01 	vldmia	r9!, {s15}
 800be92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9a:	f101 0101 	add.w	r1, r1, #1
 800be9e:	ddef      	ble.n	800be80 <MotionPM_Update+0x1848>
 800bea0:	edd9 7a00 	vldr	s15, [r9]
 800bea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beac:	d5e8      	bpl.n	800be80 <MotionPM_Update+0x1848>
 800beae:	edd0 7a00 	vldr	s15, [r0]
 800beb2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	d5e1      	bpl.n	800be80 <MotionPM_Update+0x1848>
 800bebc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800bec0:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800bec4:	292f      	cmp	r1, #47	; 0x2f
 800bec6:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
 800beca:	edcc 7a00 	vstr	s15, [ip]
 800bece:	f103 0301 	add.w	r3, r3, #1
 800bed2:	f100 0004 	add.w	r0, r0, #4
 800bed6:	d1d7      	bne.n	800be88 <MotionPM_Update+0x1850>
 800bed8:	2101      	movs	r1, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 80f8 	bne.w	800c0d0 <MotionPM_Update+0x1a98>
 800bee0:	ecf2 7a01 	vldmia	r2!, {s15}
 800bee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beec:	b288      	uxth	r0, r1
 800beee:	f101 0101 	add.w	r1, r1, #1
 800bef2:	bfc4      	itt	gt
 800bef4:	eeb0 7a67 	vmovgt.f32	s14, s15
 800bef8:	4603      	movgt	r3, r0
 800befa:	2932      	cmp	r1, #50	; 0x32
 800befc:	d1f0      	bne.n	800bee0 <MotionPM_Update+0x18a8>
 800befe:	aac8      	add	r2, sp, #800	; 0x320
 800bf00:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf04:	ed12 6a32 	vldr	s12, [r2, #-200]	; 0xffffff38
 800bf08:	f8c8 3000 	str.w	r3, [r8]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800bf12:	4613      	mov	r3, r2
 800bf14:	eef0 7a6d 	vmov.f32	s15, s27
 800bf18:	a9c8      	add	r1, sp, #800	; 0x320
 800bf1a:	ecbe 7a01 	vldmia	lr!, {s14}
 800bf1e:	458e      	cmp	lr, r1
 800bf20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf24:	d1f9      	bne.n	800bf1a <MotionPM_Update+0x18e2>
 800bf26:	9908      	ldr	r1, [sp, #32]
 800bf28:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800bf80 <MotionPM_Update+0x1948>
 800bf2c:	2964      	cmp	r1, #100	; 0x64
 800bf2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf32:	d931      	bls.n	800bf98 <MotionPM_Update+0x1960>
 800bf34:	2a01      	cmp	r2, #1
 800bf36:	f43e af4d 	beq.w	800add4 <MotionPM_Update+0x79c>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	eef0 6a46 	vmov.f32	s13, s12
 800bf40:	4619      	mov	r1, r3
 800bf42:	a80b      	add	r0, sp, #44	; 0x2c
 800bf44:	2700      	movs	r7, #0
 800bf46:	ecf0 7a01 	vldmia	r0!, {s15}
 800bf4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf52:	f103 0301 	add.w	r3, r3, #1
 800bf56:	bfc8      	it	gt
 800bf58:	460f      	movgt	r7, r1
 800bf5a:	b299      	uxth	r1, r3
 800bf5c:	bfc8      	it	gt
 800bf5e:	eef0 6a67 	vmovgt.f32	s13, s15
 800bf62:	428a      	cmp	r2, r1
 800bf64:	d8ef      	bhi.n	800bf46 <MotionPM_Update+0x190e>
 800bf66:	f7fe bf36 	b.w	800add6 <MotionPM_Update+0x79e>
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	9009      	str	r0, [sp, #36]	; 0x24
 800bf6e:	460a      	mov	r2, r1
 800bf70:	e6e0      	b.n	800bd34 <MotionPM_Update+0x16fc>
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
 800bf78:	3feccccd 	.word	0x3feccccd
 800bf7c:	20000ad8 	.word	0x20000ad8
 800bf80:	3ca3d70a 	.word	0x3ca3d70a
 800bf84:	79add3c4 	.word	0x79add3c4
 800bf88:	4001c71c 	.word	0x4001c71c
 800bf8c:	40140000 	.word	0x40140000
 800bf90:	42480000 	.word	0x42480000
 800bf94:	3ccccccd 	.word	0x3ccccccd
 800bf98:	f1a1 0c32 	sub.w	ip, r1, #50	; 0x32
 800bf9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	448c      	add	ip, r1
 800bfa2:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 800bfa6:	f100 0e01 	add.w	lr, r0, #1
 800bfaa:	4461      	add	r1, ip
 800bfac:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
 800bfb0:	fa1f f08e 	uxth.w	r0, lr
 800bfb4:	4298      	cmp	r0, r3
 800bfb6:	d3f4      	bcc.n	800bfa2 <MotionPM_Update+0x196a>
 800bfb8:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 800bf90 <MotionPM_Update+0x1958>
 800bfbc:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 800bfc6:	f101 0c01 	add.w	ip, r1, #1
 800bfca:	edd0 7a00 	vldr	s15, [r0]
 800bfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd2:	a865      	add	r0, sp, #404	; 0x194
 800bfd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bfd8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bfdc:	fa1f f18c 	uxth.w	r1, ip
 800bfe0:	eef0 7ae7 	vabs.f32	s15, s15
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	edc0 7a00 	vstr	s15, [r0]
 800bfea:	d3ea      	bcc.n	800bfc2 <MotionPM_Update+0x198a>
 800bfec:	2a01      	cmp	r2, #1
 800bfee:	eddd 6a65 	vldr	s13, [sp, #404]	; 0x194
 800bff2:	d063      	beq.n	800c0bc <MotionPM_Update+0x1a84>
 800bff4:	2001      	movs	r0, #1
 800bff6:	4607      	mov	r7, r0
 800bff8:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
 800bffc:	2100      	movs	r1, #0
 800bffe:	ecfc 7a01 	vldmia	ip!, {s15}
 800c002:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00a:	f100 0001 	add.w	r0, r0, #1
 800c00e:	bf48      	it	mi
 800c010:	4639      	movmi	r1, r7
 800c012:	b287      	uxth	r7, r0
 800c014:	bf48      	it	mi
 800c016:	eef0 6a67 	vmovmi.f32	s13, s15
 800c01a:	42ba      	cmp	r2, r7
 800c01c:	d8ef      	bhi.n	800bffe <MotionPM_Update+0x19c6>
 800c01e:	b379      	cbz	r1, 800c080 <MotionPM_Update+0x1a48>
 800c020:	1e4f      	subs	r7, r1, #1
 800c022:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 800c026:	f858 9027 	ldr.w	r9, [r8, r7, lsl #2]
 800c02a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800c02e:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 800c032:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c036:	eba0 0c09 	sub.w	ip, r0, r9
 800c03a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800c03e:	f1bc 0f0e 	cmp.w	ip, #14
 800c042:	edd7 5a00 	vldr	s11, [r7]
 800c046:	edde 7a00 	vldr	s15, [lr]
 800c04a:	460a      	mov	r2, r1
 800c04c:	d832      	bhi.n	800c0b4 <MotionPM_Update+0x1a7c>
 800c04e:	ee75 6ae7 	vsub.f32	s13, s11, s15
 800c052:	ed1f 5a30 	vldr	s10, [pc, #-192]	; 800bf94 <MotionPM_Update+0x195c>
 800c056:	eef4 6ac5 	vcmpe.f32	s13, s10
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	dd29      	ble.n	800c0b4 <MotionPM_Update+0x1a7c>
 800c060:	4299      	cmp	r1, r3
 800c062:	d339      	bcc.n	800c0d8 <MotionPM_Update+0x1aa0>
 800c064:	4648      	mov	r0, r9
 800c066:	9b02      	ldr	r3, [sp, #8]
 800c068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c06a:	3b35      	subs	r3, #53	; 0x35
 800c06c:	4413      	add	r3, r2
 800c06e:	4418      	add	r0, r3
 800c070:	f7fe beb9 	b.w	800ade6 <MotionPM_Update+0x7ae>
 800c074:	9a05      	ldr	r2, [sp, #20]
 800c076:	e6ff      	b.n	800be78 <MotionPM_Update+0x1840>
 800c078:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 800c07c:	461a      	mov	r2, r3
 800c07e:	e749      	b.n	800bf14 <MotionPM_Update+0x18dc>
 800c080:	f8d8 0000 	ldr.w	r0, [r8]
 800c084:	eef0 7a46 	vmov.f32	s15, s12
 800c088:	2201      	movs	r2, #1
 800c08a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800c08e:	1a19      	subs	r1, r3, r0
 800c090:	290e      	cmp	r1, #14
 800c092:	d8e8      	bhi.n	800c066 <MotionPM_Update+0x1a2e>
 800c094:	a90a      	add	r1, sp, #40	; 0x28
 800c096:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c09a:	edd2 6a00 	vldr	s13, [r2]
 800c09e:	ed5f 5a43 	vldr	s11, [pc, #-268]	; 800bf94 <MotionPM_Update+0x195c>
 800c0a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c0a6:	eef4 7a65 	vcmp.f32	s15, s11
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	bfc8      	it	gt
 800c0b0:	4618      	movgt	r0, r3
 800c0b2:	e7d8      	b.n	800c066 <MotionPM_Update+0x1a2e>
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d9d5      	bls.n	800c066 <MotionPM_Update+0x1a2e>
 800c0ba:	e7e6      	b.n	800c08a <MotionPM_Update+0x1a52>
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	f8d8 0000 	ldr.w	r0, [r8]
 800c0c2:	d0d0      	beq.n	800c066 <MotionPM_Update+0x1a2e>
 800c0c4:	eef0 7a46 	vmov.f32	s15, s12
 800c0c8:	e7df      	b.n	800c08a <MotionPM_Update+0x1a52>
 800c0ca:	9903      	ldr	r1, [sp, #12]
 800c0cc:	f7ff b820 	b.w	800b110 <MotionPM_Update+0xad8>
 800c0d0:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	e71d      	b.n	800bf14 <MotionPM_Update+0x18dc>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	eef0 7a65 	vmov.f32	s15, s11
 800c0de:	4648      	mov	r0, r9
 800c0e0:	e7d8      	b.n	800c094 <MotionPM_Update+0x1a5c>
 800c0e2:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
 800c0e6:	f7ff b835 	b.w	800b154 <MotionPM_Update+0xb1c>
 800c0ea:	bf00      	nop

0800c0ec <MotionPM_GetLibVersion>:
 800c0ec:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <MotionPM_GetLibVersion+0x40>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	b90b      	cbnz	r3, 800c0f6 <MotionPM_GetLibVersion+0xa>
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	4770      	bx	lr
 800c0f6:	b470      	push	{r4, r5, r6}
 800c0f8:	4e0d      	ldr	r6, [pc, #52]	; (800c130 <MotionPM_GetLibVersion+0x44>)
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0fe:	b08b      	sub	sp, #44	; 0x2c
 800c100:	ad01      	add	r5, sp, #4
 800c102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c104:	6833      	ldr	r3, [r6, #0]
 800c106:	f825 3b02 	strh.w	r3, [r5], #2
 800c10a:	0c1b      	lsrs	r3, r3, #16
 800c10c:	702b      	strb	r3, [r5, #0]
 800c10e:	ad01      	add	r5, sp, #4
 800c110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c112:	882e      	ldrh	r6, [r5, #0]
 800c114:	60e3      	str	r3, [r4, #12]
 800c116:	78ad      	ldrb	r5, [r5, #2]
 800c118:	6020      	str	r0, [r4, #0]
 800c11a:	2312      	movs	r3, #18
 800c11c:	4618      	mov	r0, r3
 800c11e:	6061      	str	r1, [r4, #4]
 800c120:	60a2      	str	r2, [r4, #8]
 800c122:	8226      	strh	r6, [r4, #16]
 800c124:	74a5      	strb	r5, [r4, #18]
 800c126:	b00b      	add	sp, #44	; 0x2c
 800c128:	bc70      	pop	{r4, r5, r6}
 800c12a:	4770      	bx	lr
 800c12c:	20000110 	.word	0x20000110
 800c130:	0800cbdc 	.word	0x0800cbdc

0800c134 <__errno>:
 800c134:	4b01      	ldr	r3, [pc, #4]	; (800c13c <__errno+0x8>)
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20000088 	.word	0x20000088

0800c140 <__libc_init_array>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	4d0d      	ldr	r5, [pc, #52]	; (800c178 <__libc_init_array+0x38>)
 800c144:	4c0d      	ldr	r4, [pc, #52]	; (800c17c <__libc_init_array+0x3c>)
 800c146:	1b64      	subs	r4, r4, r5
 800c148:	10a4      	asrs	r4, r4, #2
 800c14a:	2600      	movs	r6, #0
 800c14c:	42a6      	cmp	r6, r4
 800c14e:	d109      	bne.n	800c164 <__libc_init_array+0x24>
 800c150:	4d0b      	ldr	r5, [pc, #44]	; (800c180 <__libc_init_array+0x40>)
 800c152:	4c0c      	ldr	r4, [pc, #48]	; (800c184 <__libc_init_array+0x44>)
 800c154:	f000 fd24 	bl	800cba0 <_init>
 800c158:	1b64      	subs	r4, r4, r5
 800c15a:	10a4      	asrs	r4, r4, #2
 800c15c:	2600      	movs	r6, #0
 800c15e:	42a6      	cmp	r6, r4
 800c160:	d105      	bne.n	800c16e <__libc_init_array+0x2e>
 800c162:	bd70      	pop	{r4, r5, r6, pc}
 800c164:	f855 3b04 	ldr.w	r3, [r5], #4
 800c168:	4798      	blx	r3
 800c16a:	3601      	adds	r6, #1
 800c16c:	e7ee      	b.n	800c14c <__libc_init_array+0xc>
 800c16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c172:	4798      	blx	r3
 800c174:	3601      	adds	r6, #1
 800c176:	e7f2      	b.n	800c15e <__libc_init_array+0x1e>
 800c178:	0800ccb0 	.word	0x0800ccb0
 800c17c:	0800ccb0 	.word	0x0800ccb0
 800c180:	0800ccb0 	.word	0x0800ccb0
 800c184:	0800ccb4 	.word	0x0800ccb4

0800c188 <memcpy>:
 800c188:	440a      	add	r2, r1
 800c18a:	4291      	cmp	r1, r2
 800c18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c190:	d100      	bne.n	800c194 <memcpy+0xc>
 800c192:	4770      	bx	lr
 800c194:	b510      	push	{r4, lr}
 800c196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	d1f9      	bne.n	800c196 <memcpy+0xe>
 800c1a2:	bd10      	pop	{r4, pc}

0800c1a4 <memmove>:
 800c1a4:	4288      	cmp	r0, r1
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	eb01 0402 	add.w	r4, r1, r2
 800c1ac:	d902      	bls.n	800c1b4 <memmove+0x10>
 800c1ae:	4284      	cmp	r4, r0
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	d807      	bhi.n	800c1c4 <memmove+0x20>
 800c1b4:	1e43      	subs	r3, r0, #1
 800c1b6:	42a1      	cmp	r1, r4
 800c1b8:	d008      	beq.n	800c1cc <memmove+0x28>
 800c1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1c2:	e7f8      	b.n	800c1b6 <memmove+0x12>
 800c1c4:	4402      	add	r2, r0
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	428a      	cmp	r2, r1
 800c1ca:	d100      	bne.n	800c1ce <memmove+0x2a>
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1d6:	e7f7      	b.n	800c1c8 <memmove+0x24>

0800c1d8 <memset>:
 800c1d8:	4402      	add	r2, r0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d100      	bne.n	800c1e2 <memset+0xa>
 800c1e0:	4770      	bx	lr
 800c1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1e6:	e7f9      	b.n	800c1dc <memset+0x4>

0800c1e8 <sniprintf>:
 800c1e8:	b40c      	push	{r2, r3}
 800c1ea:	b530      	push	{r4, r5, lr}
 800c1ec:	4b17      	ldr	r3, [pc, #92]	; (800c24c <sniprintf+0x64>)
 800c1ee:	1e0c      	subs	r4, r1, #0
 800c1f0:	681d      	ldr	r5, [r3, #0]
 800c1f2:	b09d      	sub	sp, #116	; 0x74
 800c1f4:	da08      	bge.n	800c208 <sniprintf+0x20>
 800c1f6:	238b      	movs	r3, #139	; 0x8b
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	b01d      	add	sp, #116	; 0x74
 800c200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c204:	b002      	add	sp, #8
 800c206:	4770      	bx	lr
 800c208:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c20c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c210:	bf14      	ite	ne
 800c212:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c216:	4623      	moveq	r3, r4
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	9307      	str	r3, [sp, #28]
 800c21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c220:	9002      	str	r0, [sp, #8]
 800c222:	9006      	str	r0, [sp, #24]
 800c224:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c22a:	ab21      	add	r3, sp, #132	; 0x84
 800c22c:	a902      	add	r1, sp, #8
 800c22e:	4628      	mov	r0, r5
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	f000 f869 	bl	800c308 <_svfiprintf_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	bfbc      	itt	lt
 800c23a:	238b      	movlt	r3, #139	; 0x8b
 800c23c:	602b      	strlt	r3, [r5, #0]
 800c23e:	2c00      	cmp	r4, #0
 800c240:	d0dd      	beq.n	800c1fe <sniprintf+0x16>
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	2200      	movs	r2, #0
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e7d9      	b.n	800c1fe <sniprintf+0x16>
 800c24a:	bf00      	nop
 800c24c:	20000088 	.word	0x20000088

0800c250 <__ssputs_r>:
 800c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	688e      	ldr	r6, [r1, #8]
 800c256:	429e      	cmp	r6, r3
 800c258:	4682      	mov	sl, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	4690      	mov	r8, r2
 800c25e:	461f      	mov	r7, r3
 800c260:	d838      	bhi.n	800c2d4 <__ssputs_r+0x84>
 800c262:	898a      	ldrh	r2, [r1, #12]
 800c264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c268:	d032      	beq.n	800c2d0 <__ssputs_r+0x80>
 800c26a:	6825      	ldr	r5, [r4, #0]
 800c26c:	6909      	ldr	r1, [r1, #16]
 800c26e:	eba5 0901 	sub.w	r9, r5, r1
 800c272:	6965      	ldr	r5, [r4, #20]
 800c274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c27c:	3301      	adds	r3, #1
 800c27e:	444b      	add	r3, r9
 800c280:	106d      	asrs	r5, r5, #1
 800c282:	429d      	cmp	r5, r3
 800c284:	bf38      	it	cc
 800c286:	461d      	movcc	r5, r3
 800c288:	0553      	lsls	r3, r2, #21
 800c28a:	d531      	bpl.n	800c2f0 <__ssputs_r+0xa0>
 800c28c:	4629      	mov	r1, r5
 800c28e:	f000 fb3b 	bl	800c908 <_malloc_r>
 800c292:	4606      	mov	r6, r0
 800c294:	b950      	cbnz	r0, 800c2ac <__ssputs_r+0x5c>
 800c296:	230c      	movs	r3, #12
 800c298:	f8ca 3000 	str.w	r3, [sl]
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ac:	6921      	ldr	r1, [r4, #16]
 800c2ae:	464a      	mov	r2, r9
 800c2b0:	f7ff ff6a 	bl	800c188 <memcpy>
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	6126      	str	r6, [r4, #16]
 800c2c2:	6165      	str	r5, [r4, #20]
 800c2c4:	444e      	add	r6, r9
 800c2c6:	eba5 0509 	sub.w	r5, r5, r9
 800c2ca:	6026      	str	r6, [r4, #0]
 800c2cc:	60a5      	str	r5, [r4, #8]
 800c2ce:	463e      	mov	r6, r7
 800c2d0:	42be      	cmp	r6, r7
 800c2d2:	d900      	bls.n	800c2d6 <__ssputs_r+0x86>
 800c2d4:	463e      	mov	r6, r7
 800c2d6:	6820      	ldr	r0, [r4, #0]
 800c2d8:	4632      	mov	r2, r6
 800c2da:	4641      	mov	r1, r8
 800c2dc:	f7ff ff62 	bl	800c1a4 <memmove>
 800c2e0:	68a3      	ldr	r3, [r4, #8]
 800c2e2:	1b9b      	subs	r3, r3, r6
 800c2e4:	60a3      	str	r3, [r4, #8]
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	4433      	add	r3, r6
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	e7db      	b.n	800c2a8 <__ssputs_r+0x58>
 800c2f0:	462a      	mov	r2, r5
 800c2f2:	f000 fb7d 	bl	800c9f0 <_realloc_r>
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d1e1      	bne.n	800c2c0 <__ssputs_r+0x70>
 800c2fc:	6921      	ldr	r1, [r4, #16]
 800c2fe:	4650      	mov	r0, sl
 800c300:	f000 fa96 	bl	800c830 <_free_r>
 800c304:	e7c7      	b.n	800c296 <__ssputs_r+0x46>
	...

0800c308 <_svfiprintf_r>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	4698      	mov	r8, r3
 800c30e:	898b      	ldrh	r3, [r1, #12]
 800c310:	061b      	lsls	r3, r3, #24
 800c312:	b09d      	sub	sp, #116	; 0x74
 800c314:	4607      	mov	r7, r0
 800c316:	460d      	mov	r5, r1
 800c318:	4614      	mov	r4, r2
 800c31a:	d50e      	bpl.n	800c33a <_svfiprintf_r+0x32>
 800c31c:	690b      	ldr	r3, [r1, #16]
 800c31e:	b963      	cbnz	r3, 800c33a <_svfiprintf_r+0x32>
 800c320:	2140      	movs	r1, #64	; 0x40
 800c322:	f000 faf1 	bl	800c908 <_malloc_r>
 800c326:	6028      	str	r0, [r5, #0]
 800c328:	6128      	str	r0, [r5, #16]
 800c32a:	b920      	cbnz	r0, 800c336 <_svfiprintf_r+0x2e>
 800c32c:	230c      	movs	r3, #12
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	e0d1      	b.n	800c4da <_svfiprintf_r+0x1d2>
 800c336:	2340      	movs	r3, #64	; 0x40
 800c338:	616b      	str	r3, [r5, #20]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9309      	str	r3, [sp, #36]	; 0x24
 800c33e:	2320      	movs	r3, #32
 800c340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c344:	f8cd 800c 	str.w	r8, [sp, #12]
 800c348:	2330      	movs	r3, #48	; 0x30
 800c34a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4f4 <_svfiprintf_r+0x1ec>
 800c34e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c352:	f04f 0901 	mov.w	r9, #1
 800c356:	4623      	mov	r3, r4
 800c358:	469a      	mov	sl, r3
 800c35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c35e:	b10a      	cbz	r2, 800c364 <_svfiprintf_r+0x5c>
 800c360:	2a25      	cmp	r2, #37	; 0x25
 800c362:	d1f9      	bne.n	800c358 <_svfiprintf_r+0x50>
 800c364:	ebba 0b04 	subs.w	fp, sl, r4
 800c368:	d00b      	beq.n	800c382 <_svfiprintf_r+0x7a>
 800c36a:	465b      	mov	r3, fp
 800c36c:	4622      	mov	r2, r4
 800c36e:	4629      	mov	r1, r5
 800c370:	4638      	mov	r0, r7
 800c372:	f7ff ff6d 	bl	800c250 <__ssputs_r>
 800c376:	3001      	adds	r0, #1
 800c378:	f000 80aa 	beq.w	800c4d0 <_svfiprintf_r+0x1c8>
 800c37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c37e:	445a      	add	r2, fp
 800c380:	9209      	str	r2, [sp, #36]	; 0x24
 800c382:	f89a 3000 	ldrb.w	r3, [sl]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 80a2 	beq.w	800c4d0 <_svfiprintf_r+0x1c8>
 800c38c:	2300      	movs	r3, #0
 800c38e:	f04f 32ff 	mov.w	r2, #4294967295
 800c392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c396:	f10a 0a01 	add.w	sl, sl, #1
 800c39a:	9304      	str	r3, [sp, #16]
 800c39c:	9307      	str	r3, [sp, #28]
 800c39e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c3a4:	4654      	mov	r4, sl
 800c3a6:	2205      	movs	r2, #5
 800c3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ac:	4851      	ldr	r0, [pc, #324]	; (800c4f4 <_svfiprintf_r+0x1ec>)
 800c3ae:	f7f3 ff27 	bl	8000200 <memchr>
 800c3b2:	9a04      	ldr	r2, [sp, #16]
 800c3b4:	b9d8      	cbnz	r0, 800c3ee <_svfiprintf_r+0xe6>
 800c3b6:	06d0      	lsls	r0, r2, #27
 800c3b8:	bf44      	itt	mi
 800c3ba:	2320      	movmi	r3, #32
 800c3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3c0:	0711      	lsls	r1, r2, #28
 800c3c2:	bf44      	itt	mi
 800c3c4:	232b      	movmi	r3, #43	; 0x2b
 800c3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d0:	d015      	beq.n	800c3fe <_svfiprintf_r+0xf6>
 800c3d2:	9a07      	ldr	r2, [sp, #28]
 800c3d4:	4654      	mov	r4, sl
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	f04f 0c0a 	mov.w	ip, #10
 800c3dc:	4621      	mov	r1, r4
 800c3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e2:	3b30      	subs	r3, #48	; 0x30
 800c3e4:	2b09      	cmp	r3, #9
 800c3e6:	d94e      	bls.n	800c486 <_svfiprintf_r+0x17e>
 800c3e8:	b1b0      	cbz	r0, 800c418 <_svfiprintf_r+0x110>
 800c3ea:	9207      	str	r2, [sp, #28]
 800c3ec:	e014      	b.n	800c418 <_svfiprintf_r+0x110>
 800c3ee:	eba0 0308 	sub.w	r3, r0, r8
 800c3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	46a2      	mov	sl, r4
 800c3fc:	e7d2      	b.n	800c3a4 <_svfiprintf_r+0x9c>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	1d19      	adds	r1, r3, #4
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	9103      	str	r1, [sp, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	bfbb      	ittet	lt
 800c40a:	425b      	neglt	r3, r3
 800c40c:	f042 0202 	orrlt.w	r2, r2, #2
 800c410:	9307      	strge	r3, [sp, #28]
 800c412:	9307      	strlt	r3, [sp, #28]
 800c414:	bfb8      	it	lt
 800c416:	9204      	strlt	r2, [sp, #16]
 800c418:	7823      	ldrb	r3, [r4, #0]
 800c41a:	2b2e      	cmp	r3, #46	; 0x2e
 800c41c:	d10c      	bne.n	800c438 <_svfiprintf_r+0x130>
 800c41e:	7863      	ldrb	r3, [r4, #1]
 800c420:	2b2a      	cmp	r3, #42	; 0x2a
 800c422:	d135      	bne.n	800c490 <_svfiprintf_r+0x188>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	1d1a      	adds	r2, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	9203      	str	r2, [sp, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bfb8      	it	lt
 800c430:	f04f 33ff 	movlt.w	r3, #4294967295
 800c434:	3402      	adds	r4, #2
 800c436:	9305      	str	r3, [sp, #20]
 800c438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c504 <_svfiprintf_r+0x1fc>
 800c43c:	7821      	ldrb	r1, [r4, #0]
 800c43e:	2203      	movs	r2, #3
 800c440:	4650      	mov	r0, sl
 800c442:	f7f3 fedd 	bl	8000200 <memchr>
 800c446:	b140      	cbz	r0, 800c45a <_svfiprintf_r+0x152>
 800c448:	2340      	movs	r3, #64	; 0x40
 800c44a:	eba0 000a 	sub.w	r0, r0, sl
 800c44e:	fa03 f000 	lsl.w	r0, r3, r0
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	4303      	orrs	r3, r0
 800c456:	3401      	adds	r4, #1
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c45e:	4826      	ldr	r0, [pc, #152]	; (800c4f8 <_svfiprintf_r+0x1f0>)
 800c460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c464:	2206      	movs	r2, #6
 800c466:	f7f3 fecb 	bl	8000200 <memchr>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d038      	beq.n	800c4e0 <_svfiprintf_r+0x1d8>
 800c46e:	4b23      	ldr	r3, [pc, #140]	; (800c4fc <_svfiprintf_r+0x1f4>)
 800c470:	bb1b      	cbnz	r3, 800c4ba <_svfiprintf_r+0x1b2>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	3307      	adds	r3, #7
 800c476:	f023 0307 	bic.w	r3, r3, #7
 800c47a:	3308      	adds	r3, #8
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	4433      	add	r3, r6
 800c482:	9309      	str	r3, [sp, #36]	; 0x24
 800c484:	e767      	b.n	800c356 <_svfiprintf_r+0x4e>
 800c486:	fb0c 3202 	mla	r2, ip, r2, r3
 800c48a:	460c      	mov	r4, r1
 800c48c:	2001      	movs	r0, #1
 800c48e:	e7a5      	b.n	800c3dc <_svfiprintf_r+0xd4>
 800c490:	2300      	movs	r3, #0
 800c492:	3401      	adds	r4, #1
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	4619      	mov	r1, r3
 800c498:	f04f 0c0a 	mov.w	ip, #10
 800c49c:	4620      	mov	r0, r4
 800c49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a2:	3a30      	subs	r2, #48	; 0x30
 800c4a4:	2a09      	cmp	r2, #9
 800c4a6:	d903      	bls.n	800c4b0 <_svfiprintf_r+0x1a8>
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d0c5      	beq.n	800c438 <_svfiprintf_r+0x130>
 800c4ac:	9105      	str	r1, [sp, #20]
 800c4ae:	e7c3      	b.n	800c438 <_svfiprintf_r+0x130>
 800c4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7f0      	b.n	800c49c <_svfiprintf_r+0x194>
 800c4ba:	ab03      	add	r3, sp, #12
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <_svfiprintf_r+0x1f8>)
 800c4c2:	a904      	add	r1, sp, #16
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f3af 8000 	nop.w
 800c4ca:	1c42      	adds	r2, r0, #1
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	d1d6      	bne.n	800c47e <_svfiprintf_r+0x176>
 800c4d0:	89ab      	ldrh	r3, [r5, #12]
 800c4d2:	065b      	lsls	r3, r3, #25
 800c4d4:	f53f af2c 	bmi.w	800c330 <_svfiprintf_r+0x28>
 800c4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4da:	b01d      	add	sp, #116	; 0x74
 800c4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e0:	ab03      	add	r3, sp, #12
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	462a      	mov	r2, r5
 800c4e6:	4b06      	ldr	r3, [pc, #24]	; (800c500 <_svfiprintf_r+0x1f8>)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	f000 f87a 	bl	800c5e4 <_printf_i>
 800c4f0:	e7eb      	b.n	800c4ca <_svfiprintf_r+0x1c2>
 800c4f2:	bf00      	nop
 800c4f4:	0800cc74 	.word	0x0800cc74
 800c4f8:	0800cc7e 	.word	0x0800cc7e
 800c4fc:	00000000 	.word	0x00000000
 800c500:	0800c251 	.word	0x0800c251
 800c504:	0800cc7a 	.word	0x0800cc7a

0800c508 <_printf_common>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	4616      	mov	r6, r2
 800c50e:	4699      	mov	r9, r3
 800c510:	688a      	ldr	r2, [r1, #8]
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c518:	4293      	cmp	r3, r2
 800c51a:	bfb8      	it	lt
 800c51c:	4613      	movlt	r3, r2
 800c51e:	6033      	str	r3, [r6, #0]
 800c520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c524:	4607      	mov	r7, r0
 800c526:	460c      	mov	r4, r1
 800c528:	b10a      	cbz	r2, 800c52e <_printf_common+0x26>
 800c52a:	3301      	adds	r3, #1
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	0699      	lsls	r1, r3, #26
 800c532:	bf42      	ittt	mi
 800c534:	6833      	ldrmi	r3, [r6, #0]
 800c536:	3302      	addmi	r3, #2
 800c538:	6033      	strmi	r3, [r6, #0]
 800c53a:	6825      	ldr	r5, [r4, #0]
 800c53c:	f015 0506 	ands.w	r5, r5, #6
 800c540:	d106      	bne.n	800c550 <_printf_common+0x48>
 800c542:	f104 0a19 	add.w	sl, r4, #25
 800c546:	68e3      	ldr	r3, [r4, #12]
 800c548:	6832      	ldr	r2, [r6, #0]
 800c54a:	1a9b      	subs	r3, r3, r2
 800c54c:	42ab      	cmp	r3, r5
 800c54e:	dc26      	bgt.n	800c59e <_printf_common+0x96>
 800c550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c554:	1e13      	subs	r3, r2, #0
 800c556:	6822      	ldr	r2, [r4, #0]
 800c558:	bf18      	it	ne
 800c55a:	2301      	movne	r3, #1
 800c55c:	0692      	lsls	r2, r2, #26
 800c55e:	d42b      	bmi.n	800c5b8 <_printf_common+0xb0>
 800c560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c564:	4649      	mov	r1, r9
 800c566:	4638      	mov	r0, r7
 800c568:	47c0      	blx	r8
 800c56a:	3001      	adds	r0, #1
 800c56c:	d01e      	beq.n	800c5ac <_printf_common+0xa4>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	68e5      	ldr	r5, [r4, #12]
 800c572:	6832      	ldr	r2, [r6, #0]
 800c574:	f003 0306 	and.w	r3, r3, #6
 800c578:	2b04      	cmp	r3, #4
 800c57a:	bf08      	it	eq
 800c57c:	1aad      	subeq	r5, r5, r2
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	6922      	ldr	r2, [r4, #16]
 800c582:	bf0c      	ite	eq
 800c584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c588:	2500      	movne	r5, #0
 800c58a:	4293      	cmp	r3, r2
 800c58c:	bfc4      	itt	gt
 800c58e:	1a9b      	subgt	r3, r3, r2
 800c590:	18ed      	addgt	r5, r5, r3
 800c592:	2600      	movs	r6, #0
 800c594:	341a      	adds	r4, #26
 800c596:	42b5      	cmp	r5, r6
 800c598:	d11a      	bne.n	800c5d0 <_printf_common+0xc8>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e008      	b.n	800c5b0 <_printf_common+0xa8>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	47c0      	blx	r8
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	d103      	bne.n	800c5b4 <_printf_common+0xac>
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b4:	3501      	adds	r5, #1
 800c5b6:	e7c6      	b.n	800c546 <_printf_common+0x3e>
 800c5b8:	18e1      	adds	r1, r4, r3
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	2030      	movs	r0, #48	; 0x30
 800c5be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5c2:	4422      	add	r2, r4
 800c5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5cc:	3302      	adds	r3, #2
 800c5ce:	e7c7      	b.n	800c560 <_printf_common+0x58>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	47c0      	blx	r8
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d0e6      	beq.n	800c5ac <_printf_common+0xa4>
 800c5de:	3601      	adds	r6, #1
 800c5e0:	e7d9      	b.n	800c596 <_printf_common+0x8e>
	...

0800c5e4 <_printf_i>:
 800c5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e8:	7e0f      	ldrb	r7, [r1, #24]
 800c5ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5ec:	2f78      	cmp	r7, #120	; 0x78
 800c5ee:	4691      	mov	r9, r2
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	469a      	mov	sl, r3
 800c5f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5fa:	d807      	bhi.n	800c60c <_printf_i+0x28>
 800c5fc:	2f62      	cmp	r7, #98	; 0x62
 800c5fe:	d80a      	bhi.n	800c616 <_printf_i+0x32>
 800c600:	2f00      	cmp	r7, #0
 800c602:	f000 80d8 	beq.w	800c7b6 <_printf_i+0x1d2>
 800c606:	2f58      	cmp	r7, #88	; 0x58
 800c608:	f000 80a3 	beq.w	800c752 <_printf_i+0x16e>
 800c60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c614:	e03a      	b.n	800c68c <_printf_i+0xa8>
 800c616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c61a:	2b15      	cmp	r3, #21
 800c61c:	d8f6      	bhi.n	800c60c <_printf_i+0x28>
 800c61e:	a101      	add	r1, pc, #4	; (adr r1, 800c624 <_printf_i+0x40>)
 800c620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c624:	0800c67d 	.word	0x0800c67d
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c60d 	.word	0x0800c60d
 800c630:	0800c60d 	.word	0x0800c60d
 800c634:	0800c60d 	.word	0x0800c60d
 800c638:	0800c60d 	.word	0x0800c60d
 800c63c:	0800c691 	.word	0x0800c691
 800c640:	0800c60d 	.word	0x0800c60d
 800c644:	0800c60d 	.word	0x0800c60d
 800c648:	0800c60d 	.word	0x0800c60d
 800c64c:	0800c60d 	.word	0x0800c60d
 800c650:	0800c79d 	.word	0x0800c79d
 800c654:	0800c6c1 	.word	0x0800c6c1
 800c658:	0800c77f 	.word	0x0800c77f
 800c65c:	0800c60d 	.word	0x0800c60d
 800c660:	0800c60d 	.word	0x0800c60d
 800c664:	0800c7bf 	.word	0x0800c7bf
 800c668:	0800c60d 	.word	0x0800c60d
 800c66c:	0800c6c1 	.word	0x0800c6c1
 800c670:	0800c60d 	.word	0x0800c60d
 800c674:	0800c60d 	.word	0x0800c60d
 800c678:	0800c787 	.word	0x0800c787
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	1d1a      	adds	r2, r3, #4
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	602a      	str	r2, [r5, #0]
 800c684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c68c:	2301      	movs	r3, #1
 800c68e:	e0a3      	b.n	800c7d8 <_printf_i+0x1f4>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	6829      	ldr	r1, [r5, #0]
 800c694:	0606      	lsls	r6, r0, #24
 800c696:	f101 0304 	add.w	r3, r1, #4
 800c69a:	d50a      	bpl.n	800c6b2 <_printf_i+0xce>
 800c69c:	680e      	ldr	r6, [r1, #0]
 800c69e:	602b      	str	r3, [r5, #0]
 800c6a0:	2e00      	cmp	r6, #0
 800c6a2:	da03      	bge.n	800c6ac <_printf_i+0xc8>
 800c6a4:	232d      	movs	r3, #45	; 0x2d
 800c6a6:	4276      	negs	r6, r6
 800c6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ac:	485e      	ldr	r0, [pc, #376]	; (800c828 <_printf_i+0x244>)
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	e019      	b.n	800c6e6 <_printf_i+0x102>
 800c6b2:	680e      	ldr	r6, [r1, #0]
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6ba:	bf18      	it	ne
 800c6bc:	b236      	sxthne	r6, r6
 800c6be:	e7ef      	b.n	800c6a0 <_printf_i+0xbc>
 800c6c0:	682b      	ldr	r3, [r5, #0]
 800c6c2:	6820      	ldr	r0, [r4, #0]
 800c6c4:	1d19      	adds	r1, r3, #4
 800c6c6:	6029      	str	r1, [r5, #0]
 800c6c8:	0601      	lsls	r1, r0, #24
 800c6ca:	d501      	bpl.n	800c6d0 <_printf_i+0xec>
 800c6cc:	681e      	ldr	r6, [r3, #0]
 800c6ce:	e002      	b.n	800c6d6 <_printf_i+0xf2>
 800c6d0:	0646      	lsls	r6, r0, #25
 800c6d2:	d5fb      	bpl.n	800c6cc <_printf_i+0xe8>
 800c6d4:	881e      	ldrh	r6, [r3, #0]
 800c6d6:	4854      	ldr	r0, [pc, #336]	; (800c828 <_printf_i+0x244>)
 800c6d8:	2f6f      	cmp	r7, #111	; 0x6f
 800c6da:	bf0c      	ite	eq
 800c6dc:	2308      	moveq	r3, #8
 800c6de:	230a      	movne	r3, #10
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6e6:	6865      	ldr	r5, [r4, #4]
 800c6e8:	60a5      	str	r5, [r4, #8]
 800c6ea:	2d00      	cmp	r5, #0
 800c6ec:	bfa2      	ittt	ge
 800c6ee:	6821      	ldrge	r1, [r4, #0]
 800c6f0:	f021 0104 	bicge.w	r1, r1, #4
 800c6f4:	6021      	strge	r1, [r4, #0]
 800c6f6:	b90e      	cbnz	r6, 800c6fc <_printf_i+0x118>
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	d04d      	beq.n	800c798 <_printf_i+0x1b4>
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800c702:	fb03 6711 	mls	r7, r3, r1, r6
 800c706:	5dc7      	ldrb	r7, [r0, r7]
 800c708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c70c:	4637      	mov	r7, r6
 800c70e:	42bb      	cmp	r3, r7
 800c710:	460e      	mov	r6, r1
 800c712:	d9f4      	bls.n	800c6fe <_printf_i+0x11a>
 800c714:	2b08      	cmp	r3, #8
 800c716:	d10b      	bne.n	800c730 <_printf_i+0x14c>
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	07de      	lsls	r6, r3, #31
 800c71c:	d508      	bpl.n	800c730 <_printf_i+0x14c>
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	4299      	cmp	r1, r3
 800c724:	bfde      	ittt	le
 800c726:	2330      	movle	r3, #48	; 0x30
 800c728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c72c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c730:	1b52      	subs	r2, r2, r5
 800c732:	6122      	str	r2, [r4, #16]
 800c734:	f8cd a000 	str.w	sl, [sp]
 800c738:	464b      	mov	r3, r9
 800c73a:	aa03      	add	r2, sp, #12
 800c73c:	4621      	mov	r1, r4
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fee2 	bl	800c508 <_printf_common>
 800c744:	3001      	adds	r0, #1
 800c746:	d14c      	bne.n	800c7e2 <_printf_i+0x1fe>
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	b004      	add	sp, #16
 800c74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c752:	4835      	ldr	r0, [pc, #212]	; (800c828 <_printf_i+0x244>)
 800c754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c758:	6829      	ldr	r1, [r5, #0]
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c760:	6029      	str	r1, [r5, #0]
 800c762:	061d      	lsls	r5, r3, #24
 800c764:	d514      	bpl.n	800c790 <_printf_i+0x1ac>
 800c766:	07df      	lsls	r7, r3, #31
 800c768:	bf44      	itt	mi
 800c76a:	f043 0320 	orrmi.w	r3, r3, #32
 800c76e:	6023      	strmi	r3, [r4, #0]
 800c770:	b91e      	cbnz	r6, 800c77a <_printf_i+0x196>
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	f023 0320 	bic.w	r3, r3, #32
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	2310      	movs	r3, #16
 800c77c:	e7b0      	b.n	800c6e0 <_printf_i+0xfc>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	f043 0320 	orr.w	r3, r3, #32
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	2378      	movs	r3, #120	; 0x78
 800c788:	4828      	ldr	r0, [pc, #160]	; (800c82c <_printf_i+0x248>)
 800c78a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c78e:	e7e3      	b.n	800c758 <_printf_i+0x174>
 800c790:	0659      	lsls	r1, r3, #25
 800c792:	bf48      	it	mi
 800c794:	b2b6      	uxthmi	r6, r6
 800c796:	e7e6      	b.n	800c766 <_printf_i+0x182>
 800c798:	4615      	mov	r5, r2
 800c79a:	e7bb      	b.n	800c714 <_printf_i+0x130>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	6826      	ldr	r6, [r4, #0]
 800c7a0:	6961      	ldr	r1, [r4, #20]
 800c7a2:	1d18      	adds	r0, r3, #4
 800c7a4:	6028      	str	r0, [r5, #0]
 800c7a6:	0635      	lsls	r5, r6, #24
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	d501      	bpl.n	800c7b0 <_printf_i+0x1cc>
 800c7ac:	6019      	str	r1, [r3, #0]
 800c7ae:	e002      	b.n	800c7b6 <_printf_i+0x1d2>
 800c7b0:	0670      	lsls	r0, r6, #25
 800c7b2:	d5fb      	bpl.n	800c7ac <_printf_i+0x1c8>
 800c7b4:	8019      	strh	r1, [r3, #0]
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	4615      	mov	r5, r2
 800c7bc:	e7ba      	b.n	800c734 <_printf_i+0x150>
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	1d1a      	adds	r2, r3, #4
 800c7c2:	602a      	str	r2, [r5, #0]
 800c7c4:	681d      	ldr	r5, [r3, #0]
 800c7c6:	6862      	ldr	r2, [r4, #4]
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f7f3 fd18 	bl	8000200 <memchr>
 800c7d0:	b108      	cbz	r0, 800c7d6 <_printf_i+0x1f2>
 800c7d2:	1b40      	subs	r0, r0, r5
 800c7d4:	6060      	str	r0, [r4, #4]
 800c7d6:	6863      	ldr	r3, [r4, #4]
 800c7d8:	6123      	str	r3, [r4, #16]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e0:	e7a8      	b.n	800c734 <_printf_i+0x150>
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	462a      	mov	r2, r5
 800c7e6:	4649      	mov	r1, r9
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	47d0      	blx	sl
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d0ab      	beq.n	800c748 <_printf_i+0x164>
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	079b      	lsls	r3, r3, #30
 800c7f4:	d413      	bmi.n	800c81e <_printf_i+0x23a>
 800c7f6:	68e0      	ldr	r0, [r4, #12]
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	4298      	cmp	r0, r3
 800c7fc:	bfb8      	it	lt
 800c7fe:	4618      	movlt	r0, r3
 800c800:	e7a4      	b.n	800c74c <_printf_i+0x168>
 800c802:	2301      	movs	r3, #1
 800c804:	4632      	mov	r2, r6
 800c806:	4649      	mov	r1, r9
 800c808:	4640      	mov	r0, r8
 800c80a:	47d0      	blx	sl
 800c80c:	3001      	adds	r0, #1
 800c80e:	d09b      	beq.n	800c748 <_printf_i+0x164>
 800c810:	3501      	adds	r5, #1
 800c812:	68e3      	ldr	r3, [r4, #12]
 800c814:	9903      	ldr	r1, [sp, #12]
 800c816:	1a5b      	subs	r3, r3, r1
 800c818:	42ab      	cmp	r3, r5
 800c81a:	dcf2      	bgt.n	800c802 <_printf_i+0x21e>
 800c81c:	e7eb      	b.n	800c7f6 <_printf_i+0x212>
 800c81e:	2500      	movs	r5, #0
 800c820:	f104 0619 	add.w	r6, r4, #25
 800c824:	e7f5      	b.n	800c812 <_printf_i+0x22e>
 800c826:	bf00      	nop
 800c828:	0800cc85 	.word	0x0800cc85
 800c82c:	0800cc96 	.word	0x0800cc96

0800c830 <_free_r>:
 800c830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c832:	2900      	cmp	r1, #0
 800c834:	d044      	beq.n	800c8c0 <_free_r+0x90>
 800c836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83a:	9001      	str	r0, [sp, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f1a1 0404 	sub.w	r4, r1, #4
 800c842:	bfb8      	it	lt
 800c844:	18e4      	addlt	r4, r4, r3
 800c846:	f000 f913 	bl	800ca70 <__malloc_lock>
 800c84a:	4a1e      	ldr	r2, [pc, #120]	; (800c8c4 <_free_r+0x94>)
 800c84c:	9801      	ldr	r0, [sp, #4]
 800c84e:	6813      	ldr	r3, [r2, #0]
 800c850:	b933      	cbnz	r3, 800c860 <_free_r+0x30>
 800c852:	6063      	str	r3, [r4, #4]
 800c854:	6014      	str	r4, [r2, #0]
 800c856:	b003      	add	sp, #12
 800c858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c85c:	f000 b90e 	b.w	800ca7c <__malloc_unlock>
 800c860:	42a3      	cmp	r3, r4
 800c862:	d908      	bls.n	800c876 <_free_r+0x46>
 800c864:	6825      	ldr	r5, [r4, #0]
 800c866:	1961      	adds	r1, r4, r5
 800c868:	428b      	cmp	r3, r1
 800c86a:	bf01      	itttt	eq
 800c86c:	6819      	ldreq	r1, [r3, #0]
 800c86e:	685b      	ldreq	r3, [r3, #4]
 800c870:	1949      	addeq	r1, r1, r5
 800c872:	6021      	streq	r1, [r4, #0]
 800c874:	e7ed      	b.n	800c852 <_free_r+0x22>
 800c876:	461a      	mov	r2, r3
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	b10b      	cbz	r3, 800c880 <_free_r+0x50>
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d9fa      	bls.n	800c876 <_free_r+0x46>
 800c880:	6811      	ldr	r1, [r2, #0]
 800c882:	1855      	adds	r5, r2, r1
 800c884:	42a5      	cmp	r5, r4
 800c886:	d10b      	bne.n	800c8a0 <_free_r+0x70>
 800c888:	6824      	ldr	r4, [r4, #0]
 800c88a:	4421      	add	r1, r4
 800c88c:	1854      	adds	r4, r2, r1
 800c88e:	42a3      	cmp	r3, r4
 800c890:	6011      	str	r1, [r2, #0]
 800c892:	d1e0      	bne.n	800c856 <_free_r+0x26>
 800c894:	681c      	ldr	r4, [r3, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	6053      	str	r3, [r2, #4]
 800c89a:	4421      	add	r1, r4
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	e7da      	b.n	800c856 <_free_r+0x26>
 800c8a0:	d902      	bls.n	800c8a8 <_free_r+0x78>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	e7d6      	b.n	800c856 <_free_r+0x26>
 800c8a8:	6825      	ldr	r5, [r4, #0]
 800c8aa:	1961      	adds	r1, r4, r5
 800c8ac:	428b      	cmp	r3, r1
 800c8ae:	bf04      	itt	eq
 800c8b0:	6819      	ldreq	r1, [r3, #0]
 800c8b2:	685b      	ldreq	r3, [r3, #4]
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	bf04      	itt	eq
 800c8b8:	1949      	addeq	r1, r1, r5
 800c8ba:	6021      	streq	r1, [r4, #0]
 800c8bc:	6054      	str	r4, [r2, #4]
 800c8be:	e7ca      	b.n	800c856 <_free_r+0x26>
 800c8c0:	b003      	add	sp, #12
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	20001544 	.word	0x20001544

0800c8c8 <sbrk_aligned>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	4e0e      	ldr	r6, [pc, #56]	; (800c904 <sbrk_aligned+0x3c>)
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	6831      	ldr	r1, [r6, #0]
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	b911      	cbnz	r1, 800c8da <sbrk_aligned+0x12>
 800c8d4:	f000 f8bc 	bl	800ca50 <_sbrk_r>
 800c8d8:	6030      	str	r0, [r6, #0]
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f000 f8b7 	bl	800ca50 <_sbrk_r>
 800c8e2:	1c43      	adds	r3, r0, #1
 800c8e4:	d00a      	beq.n	800c8fc <sbrk_aligned+0x34>
 800c8e6:	1cc4      	adds	r4, r0, #3
 800c8e8:	f024 0403 	bic.w	r4, r4, #3
 800c8ec:	42a0      	cmp	r0, r4
 800c8ee:	d007      	beq.n	800c900 <sbrk_aligned+0x38>
 800c8f0:	1a21      	subs	r1, r4, r0
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f000 f8ac 	bl	800ca50 <_sbrk_r>
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d101      	bne.n	800c900 <sbrk_aligned+0x38>
 800c8fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c900:	4620      	mov	r0, r4
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	20001548 	.word	0x20001548

0800c908 <_malloc_r>:
 800c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c90c:	1ccd      	adds	r5, r1, #3
 800c90e:	f025 0503 	bic.w	r5, r5, #3
 800c912:	3508      	adds	r5, #8
 800c914:	2d0c      	cmp	r5, #12
 800c916:	bf38      	it	cc
 800c918:	250c      	movcc	r5, #12
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	4607      	mov	r7, r0
 800c91e:	db01      	blt.n	800c924 <_malloc_r+0x1c>
 800c920:	42a9      	cmp	r1, r5
 800c922:	d905      	bls.n	800c930 <_malloc_r+0x28>
 800c924:	230c      	movs	r3, #12
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	2600      	movs	r6, #0
 800c92a:	4630      	mov	r0, r6
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	4e2e      	ldr	r6, [pc, #184]	; (800c9ec <_malloc_r+0xe4>)
 800c932:	f000 f89d 	bl	800ca70 <__malloc_lock>
 800c936:	6833      	ldr	r3, [r6, #0]
 800c938:	461c      	mov	r4, r3
 800c93a:	bb34      	cbnz	r4, 800c98a <_malloc_r+0x82>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4638      	mov	r0, r7
 800c940:	f7ff ffc2 	bl	800c8c8 <sbrk_aligned>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	4604      	mov	r4, r0
 800c948:	d14d      	bne.n	800c9e6 <_malloc_r+0xde>
 800c94a:	6834      	ldr	r4, [r6, #0]
 800c94c:	4626      	mov	r6, r4
 800c94e:	2e00      	cmp	r6, #0
 800c950:	d140      	bne.n	800c9d4 <_malloc_r+0xcc>
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	4631      	mov	r1, r6
 800c956:	4638      	mov	r0, r7
 800c958:	eb04 0803 	add.w	r8, r4, r3
 800c95c:	f000 f878 	bl	800ca50 <_sbrk_r>
 800c960:	4580      	cmp	r8, r0
 800c962:	d13a      	bne.n	800c9da <_malloc_r+0xd2>
 800c964:	6821      	ldr	r1, [r4, #0]
 800c966:	3503      	adds	r5, #3
 800c968:	1a6d      	subs	r5, r5, r1
 800c96a:	f025 0503 	bic.w	r5, r5, #3
 800c96e:	3508      	adds	r5, #8
 800c970:	2d0c      	cmp	r5, #12
 800c972:	bf38      	it	cc
 800c974:	250c      	movcc	r5, #12
 800c976:	4629      	mov	r1, r5
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff ffa5 	bl	800c8c8 <sbrk_aligned>
 800c97e:	3001      	adds	r0, #1
 800c980:	d02b      	beq.n	800c9da <_malloc_r+0xd2>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	442b      	add	r3, r5
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	e00e      	b.n	800c9a8 <_malloc_r+0xa0>
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	1b52      	subs	r2, r2, r5
 800c98e:	d41e      	bmi.n	800c9ce <_malloc_r+0xc6>
 800c990:	2a0b      	cmp	r2, #11
 800c992:	d916      	bls.n	800c9c2 <_malloc_r+0xba>
 800c994:	1961      	adds	r1, r4, r5
 800c996:	42a3      	cmp	r3, r4
 800c998:	6025      	str	r5, [r4, #0]
 800c99a:	bf18      	it	ne
 800c99c:	6059      	strne	r1, [r3, #4]
 800c99e:	6863      	ldr	r3, [r4, #4]
 800c9a0:	bf08      	it	eq
 800c9a2:	6031      	streq	r1, [r6, #0]
 800c9a4:	5162      	str	r2, [r4, r5]
 800c9a6:	604b      	str	r3, [r1, #4]
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f104 060b 	add.w	r6, r4, #11
 800c9ae:	f000 f865 	bl	800ca7c <__malloc_unlock>
 800c9b2:	f026 0607 	bic.w	r6, r6, #7
 800c9b6:	1d23      	adds	r3, r4, #4
 800c9b8:	1af2      	subs	r2, r6, r3
 800c9ba:	d0b6      	beq.n	800c92a <_malloc_r+0x22>
 800c9bc:	1b9b      	subs	r3, r3, r6
 800c9be:	50a3      	str	r3, [r4, r2]
 800c9c0:	e7b3      	b.n	800c92a <_malloc_r+0x22>
 800c9c2:	6862      	ldr	r2, [r4, #4]
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	bf0c      	ite	eq
 800c9c8:	6032      	streq	r2, [r6, #0]
 800c9ca:	605a      	strne	r2, [r3, #4]
 800c9cc:	e7ec      	b.n	800c9a8 <_malloc_r+0xa0>
 800c9ce:	4623      	mov	r3, r4
 800c9d0:	6864      	ldr	r4, [r4, #4]
 800c9d2:	e7b2      	b.n	800c93a <_malloc_r+0x32>
 800c9d4:	4634      	mov	r4, r6
 800c9d6:	6876      	ldr	r6, [r6, #4]
 800c9d8:	e7b9      	b.n	800c94e <_malloc_r+0x46>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	603b      	str	r3, [r7, #0]
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f000 f84c 	bl	800ca7c <__malloc_unlock>
 800c9e4:	e7a1      	b.n	800c92a <_malloc_r+0x22>
 800c9e6:	6025      	str	r5, [r4, #0]
 800c9e8:	e7de      	b.n	800c9a8 <_malloc_r+0xa0>
 800c9ea:	bf00      	nop
 800c9ec:	20001544 	.word	0x20001544

0800c9f0 <_realloc_r>:
 800c9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4614      	mov	r4, r2
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	b921      	cbnz	r1, 800ca06 <_realloc_r+0x16>
 800c9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	4611      	mov	r1, r2
 800ca02:	f7ff bf81 	b.w	800c908 <_malloc_r>
 800ca06:	b92a      	cbnz	r2, 800ca14 <_realloc_r+0x24>
 800ca08:	f7ff ff12 	bl	800c830 <_free_r>
 800ca0c:	4625      	mov	r5, r4
 800ca0e:	4628      	mov	r0, r5
 800ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca14:	f000 f838 	bl	800ca88 <_malloc_usable_size_r>
 800ca18:	4284      	cmp	r4, r0
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	d802      	bhi.n	800ca24 <_realloc_r+0x34>
 800ca1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca22:	d812      	bhi.n	800ca4a <_realloc_r+0x5a>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4640      	mov	r0, r8
 800ca28:	f7ff ff6e 	bl	800c908 <_malloc_r>
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d0ed      	beq.n	800ca0e <_realloc_r+0x1e>
 800ca32:	42bc      	cmp	r4, r7
 800ca34:	4622      	mov	r2, r4
 800ca36:	4631      	mov	r1, r6
 800ca38:	bf28      	it	cs
 800ca3a:	463a      	movcs	r2, r7
 800ca3c:	f7ff fba4 	bl	800c188 <memcpy>
 800ca40:	4631      	mov	r1, r6
 800ca42:	4640      	mov	r0, r8
 800ca44:	f7ff fef4 	bl	800c830 <_free_r>
 800ca48:	e7e1      	b.n	800ca0e <_realloc_r+0x1e>
 800ca4a:	4635      	mov	r5, r6
 800ca4c:	e7df      	b.n	800ca0e <_realloc_r+0x1e>
	...

0800ca50 <_sbrk_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d06      	ldr	r5, [pc, #24]	; (800ca6c <_sbrk_r+0x1c>)
 800ca54:	2300      	movs	r3, #0
 800ca56:	4604      	mov	r4, r0
 800ca58:	4608      	mov	r0, r1
 800ca5a:	602b      	str	r3, [r5, #0]
 800ca5c:	f7f4 fc90 	bl	8001380 <_sbrk>
 800ca60:	1c43      	adds	r3, r0, #1
 800ca62:	d102      	bne.n	800ca6a <_sbrk_r+0x1a>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	b103      	cbz	r3, 800ca6a <_sbrk_r+0x1a>
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	bd38      	pop	{r3, r4, r5, pc}
 800ca6c:	2000154c 	.word	0x2000154c

0800ca70 <__malloc_lock>:
 800ca70:	4801      	ldr	r0, [pc, #4]	; (800ca78 <__malloc_lock+0x8>)
 800ca72:	f000 b811 	b.w	800ca98 <__retarget_lock_acquire_recursive>
 800ca76:	bf00      	nop
 800ca78:	20001550 	.word	0x20001550

0800ca7c <__malloc_unlock>:
 800ca7c:	4801      	ldr	r0, [pc, #4]	; (800ca84 <__malloc_unlock+0x8>)
 800ca7e:	f000 b80c 	b.w	800ca9a <__retarget_lock_release_recursive>
 800ca82:	bf00      	nop
 800ca84:	20001550 	.word	0x20001550

0800ca88 <_malloc_usable_size_r>:
 800ca88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca8c:	1f18      	subs	r0, r3, #4
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	bfbc      	itt	lt
 800ca92:	580b      	ldrlt	r3, [r1, r0]
 800ca94:	18c0      	addlt	r0, r0, r3
 800ca96:	4770      	bx	lr

0800ca98 <__retarget_lock_acquire_recursive>:
 800ca98:	4770      	bx	lr

0800ca9a <__retarget_lock_release_recursive>:
 800ca9a:	4770      	bx	lr
 800ca9c:	0000      	movs	r0, r0
	...

0800caa0 <floor>:
 800caa0:	ec51 0b10 	vmov	r0, r1, d0
 800caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800caac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cab0:	2e13      	cmp	r6, #19
 800cab2:	ee10 5a10 	vmov	r5, s0
 800cab6:	ee10 8a10 	vmov	r8, s0
 800caba:	460c      	mov	r4, r1
 800cabc:	dc32      	bgt.n	800cb24 <floor+0x84>
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	da14      	bge.n	800caec <floor+0x4c>
 800cac2:	a333      	add	r3, pc, #204	; (adr r3, 800cb90 <floor+0xf0>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fd1a 	bl	8000500 <__adddf3>
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	f7f3 ff4a 	bl	8000968 <__aeabi_dcmpgt>
 800cad4:	b138      	cbz	r0, 800cae6 <floor+0x46>
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	da57      	bge.n	800cb8a <floor+0xea>
 800cada:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cade:	431d      	orrs	r5, r3
 800cae0:	d001      	beq.n	800cae6 <floor+0x46>
 800cae2:	4c2d      	ldr	r4, [pc, #180]	; (800cb98 <floor+0xf8>)
 800cae4:	2500      	movs	r5, #0
 800cae6:	4621      	mov	r1, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	e025      	b.n	800cb38 <floor+0x98>
 800caec:	4f2b      	ldr	r7, [pc, #172]	; (800cb9c <floor+0xfc>)
 800caee:	4137      	asrs	r7, r6
 800caf0:	ea01 0307 	and.w	r3, r1, r7
 800caf4:	4303      	orrs	r3, r0
 800caf6:	d01f      	beq.n	800cb38 <floor+0x98>
 800caf8:	a325      	add	r3, pc, #148	; (adr r3, 800cb90 <floor+0xf0>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fcff 	bl	8000500 <__adddf3>
 800cb02:	2200      	movs	r2, #0
 800cb04:	2300      	movs	r3, #0
 800cb06:	f7f3 ff2f 	bl	8000968 <__aeabi_dcmpgt>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d0eb      	beq.n	800cae6 <floor+0x46>
 800cb0e:	2c00      	cmp	r4, #0
 800cb10:	bfbe      	ittt	lt
 800cb12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cb16:	fa43 f606 	asrlt.w	r6, r3, r6
 800cb1a:	19a4      	addlt	r4, r4, r6
 800cb1c:	ea24 0407 	bic.w	r4, r4, r7
 800cb20:	2500      	movs	r5, #0
 800cb22:	e7e0      	b.n	800cae6 <floor+0x46>
 800cb24:	2e33      	cmp	r6, #51	; 0x33
 800cb26:	dd0b      	ble.n	800cb40 <floor+0xa0>
 800cb28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cb2c:	d104      	bne.n	800cb38 <floor+0x98>
 800cb2e:	ee10 2a10 	vmov	r2, s0
 800cb32:	460b      	mov	r3, r1
 800cb34:	f7f3 fce4 	bl	8000500 <__adddf3>
 800cb38:	ec41 0b10 	vmov	d0, r0, r1
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cb44:	f04f 33ff 	mov.w	r3, #4294967295
 800cb48:	fa23 f707 	lsr.w	r7, r3, r7
 800cb4c:	4207      	tst	r7, r0
 800cb4e:	d0f3      	beq.n	800cb38 <floor+0x98>
 800cb50:	a30f      	add	r3, pc, #60	; (adr r3, 800cb90 <floor+0xf0>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f7f3 fcd3 	bl	8000500 <__adddf3>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f7f3 ff03 	bl	8000968 <__aeabi_dcmpgt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0bf      	beq.n	800cae6 <floor+0x46>
 800cb66:	2c00      	cmp	r4, #0
 800cb68:	da02      	bge.n	800cb70 <floor+0xd0>
 800cb6a:	2e14      	cmp	r6, #20
 800cb6c:	d103      	bne.n	800cb76 <floor+0xd6>
 800cb6e:	3401      	adds	r4, #1
 800cb70:	ea25 0507 	bic.w	r5, r5, r7
 800cb74:	e7b7      	b.n	800cae6 <floor+0x46>
 800cb76:	2301      	movs	r3, #1
 800cb78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cb7c:	fa03 f606 	lsl.w	r6, r3, r6
 800cb80:	4435      	add	r5, r6
 800cb82:	4545      	cmp	r5, r8
 800cb84:	bf38      	it	cc
 800cb86:	18e4      	addcc	r4, r4, r3
 800cb88:	e7f2      	b.n	800cb70 <floor+0xd0>
 800cb8a:	2500      	movs	r5, #0
 800cb8c:	462c      	mov	r4, r5
 800cb8e:	e7aa      	b.n	800cae6 <floor+0x46>
 800cb90:	8800759c 	.word	0x8800759c
 800cb94:	7e37e43c 	.word	0x7e37e43c
 800cb98:	bff00000 	.word	0xbff00000
 800cb9c:	000fffff 	.word	0x000fffff

0800cba0 <_init>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr

0800cbac <_fini>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	bf00      	nop
 800cbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb2:	bc08      	pop	{r3}
 800cbb4:	469e      	mov	lr, r3
 800cbb6:	4770      	bx	lr
