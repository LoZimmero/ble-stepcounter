
Pedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa44  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0001ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800ad84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000f8  0800ae7c  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800ae7c  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031fe6  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eca  00000000  00000000  0005210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00055fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024c8  00000000  00000000  00058640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035579  00000000  00000000  0005ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002832b  00000000  00000000  00090081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013f0e5  00000000  00000000  000b83ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae94  00000000  00000000  001f74e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f8 	.word	0x200000f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800abec 	.word	0x0800abec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000fc 	.word	0x200000fc
 80001fc:	0800abec 	.word	0x0800abec

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <BSP_I2C1_Init+0x70>)
 80005b0:	4a19      	ldr	r2, [pc, #100]	; (8000618 <BSP_I2C1_Init+0x74>)
 80005b2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <BSP_I2C1_Init+0x78>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	4918      	ldr	r1, [pc, #96]	; (800061c <BSP_I2C1_Init+0x78>)
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d122      	bne.n	8000608 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <BSP_I2C1_Init+0x70>)
 80005c4:	f005 fe62 	bl	800628c <HAL_I2C_GetState>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d11c      	bne.n	8000608 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <BSP_I2C1_Init+0x70>)
 80005d0:	f000 f8fe 	bl	80007d0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d116      	bne.n	8000608 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80005da:	480e      	ldr	r0, [pc, #56]	; (8000614 <BSP_I2C1_Init+0x70>)
 80005dc:	f000 f8b4 	bl	8000748 <MX_I2C1_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005e6:	f06f 0307 	mvn.w	r3, #7
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	e00c      	b.n	8000608 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <BSP_I2C1_Init+0x70>)
 80005f2:	f006 f90b 	bl	800680c <HAL_I2CEx_ConfigAnalogFilter>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005fc:	f06f 0307 	mvn.w	r3, #7
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e001      	b.n	8000608 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000114 	.word	0x20000114
 8000618:	40005400 	.word	0x40005400
 800061c:	20000168 	.word	0x20000168

08000620 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <BSP_I2C1_DeInit+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d014      	beq.n	800065c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <BSP_I2C1_DeInit+0x48>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <BSP_I2C1_DeInit+0x48>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <BSP_I2C1_DeInit+0x48>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10b      	bne.n	800065c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <BSP_I2C1_DeInit+0x4c>)
 8000646:	f000 f923 	bl	8000890 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <BSP_I2C1_DeInit+0x4c>)
 800064c:	f005 fbad 	bl	8005daa <HAL_I2C_DeInit>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000656:	f06f 0307 	mvn.w	r3, #7
 800065a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000168 	.word	0x20000168
 800066c:	20000114 	.word	0x20000114

08000670 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af04      	add	r7, sp, #16
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	461a      	mov	r2, r3
 800067a:	4603      	mov	r3, r0
 800067c:	81fb      	strh	r3, [r7, #14]
 800067e:	460b      	mov	r3, r1
 8000680:	81bb      	strh	r3, [r7, #12]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800068a:	89ba      	ldrh	r2, [r7, #12]
 800068c:	89f9      	ldrh	r1, [r7, #14]
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <BSP_I2C1_WriteReg+0x60>)
 80006a0:	f005 fbc6 	bl	8005e30 <HAL_I2C_Mem_Write>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <BSP_I2C1_WriteReg+0x60>)
 80006ac:	f005 fdfc 	bl	80062a8 <HAL_I2C_GetError>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d103      	bne.n	80006be <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80006b6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e002      	b.n	80006c4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80006be:	f06f 0303 	mvn.w	r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80006c4:	697b      	ldr	r3, [r7, #20]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000114 	.word	0x20000114

080006d4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60ba      	str	r2, [r7, #8]
 80006dc:	461a      	mov	r2, r3
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
 80006e2:	460b      	mov	r3, r1
 80006e4:	81bb      	strh	r3, [r7, #12]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80006ee:	89ba      	ldrh	r2, [r7, #12]
 80006f0:	89f9      	ldrh	r1, [r7, #14]
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <BSP_I2C1_ReadReg+0x60>)
 8000704:	f005 fca8 	bl	8006058 <HAL_I2C_Mem_Read>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00c      	beq.n	8000728 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <BSP_I2C1_ReadReg+0x60>)
 8000710:	f005 fdca 	bl	80062a8 <HAL_I2C_GetError>
 8000714:	4603      	mov	r3, r0
 8000716:	2b04      	cmp	r3, #4
 8000718:	d103      	bne.n	8000722 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800071a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e002      	b.n	8000728 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000722:	f06f 0303 	mvn.w	r3, #3
 8000726:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000728:	697b      	ldr	r3, [r7, #20]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000114 	.word	0x20000114

08000738 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800073c:	f004 fd98 	bl	8005270 <HAL_GetTick>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_I2C1_Init+0x84>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000760:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f005 fa7d 	bl	8005c8c <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f006 f834 	bl	800680c <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x66>
  {
    ret = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f006 f876 	bl	80068a2 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x78>
  {
    ret = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005400 	.word	0x40005400

080007d0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0b0      	sub	sp, #192	; 0xc0
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	229c      	movs	r2, #156	; 0x9c
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f009 f87d 	bl	80098e0 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 f83e 	bl	8007874 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <I2C1_MspInit+0xb8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <I2C1_MspInit+0xb8>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <I2C1_MspInit+0xb8>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800082a:	2304      	movs	r3, #4
 800082c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000830:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000834:	4619      	mov	r1, r3
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <I2C1_MspInit+0xbc>)
 8000838:	f004 ff74 	bl	8005724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000844:	2312      	movs	r3, #18
 8000846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000856:	2304      	movs	r3, #4
 8000858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800085c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000860:	4619      	mov	r1, r3
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <I2C1_MspInit+0xbc>)
 8000864:	f004 ff5e 	bl	8005724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <I2C1_MspInit+0xb8>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <I2C1_MspInit+0xb8>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <I2C1_MspInit+0xb8>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	37c0      	adds	r7, #192	; 0xc0
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <I2C1_MspDeInit+0x30>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <I2C1_MspDeInit+0x30>)
 800089e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008a2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80008a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <I2C1_MspDeInit+0x34>)
 80008aa:	f005 f8cd 	bl	8005a48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <I2C1_MspDeInit+0x34>)
 80008b4:	f005 f8c8 	bl	8005a48 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f004 fc68 	bl	80051a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f80d 	bl	80008ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 f8ec 	bl	8000ab0 <MX_GPIO_Init>
  MX_CRC_Init();
 80008d8:	f000 f852 	bl	8000980 <MX_CRC_Init>
  MX_TIM4_Init();
 80008dc:	f000 f89a 	bl	8000a14 <MX_TIM4_Init>
  MX_RTC_Init();
 80008e0:	f000 f870 	bl	80009c4 <MX_RTC_Init>
  MX_MEMS_Init();
 80008e4:	f000 faa2 	bl	8000e2c <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80008e8:	f000 faa6 	bl	8000e38 <MX_MEMS_Process>
 80008ec:	e7fc      	b.n	80008e8 <main+0x20>

080008ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b096      	sub	sp, #88	; 0x58
 80008f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2244      	movs	r2, #68	; 0x44
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 ffef 	bl	80098e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000910:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000914:	f006 f832 	bl	800697c <HAL_PWREx_ControlVoltageScaling>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800091e:	f000 f91b 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000922:	2318      	movs	r3, #24
 8000924:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000926:	2301      	movs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4618      	mov	r0, r3
 8000940:	f006 f8c0 	bl	8006ac4 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800094a:	f000 f905 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f006 fcc6 	bl	80072f8 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000972:	f000 f8f1 	bl	8000b58 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3758      	adds	r7, #88	; 0x58
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_CRC_Init+0x3c>)
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <MX_CRC_Init+0x40>)
 8000988:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_CRC_Init+0x3c>)
 800098c:	2200      	movs	r2, #0
 800098e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_CRC_Init+0x3c>)
 8000992:	2200      	movs	r2, #0
 8000994:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_CRC_Init+0x3c>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_CRC_Init+0x3c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_CRC_Init+0x3c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_CRC_Init+0x3c>)
 80009aa:	f004 fda3 	bl	80054f4 <HAL_CRC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009b4:	f000 f8d0 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000016c 	.word	0x2000016c
 80009c0:	40023000 	.word	0x40023000

080009c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_RTC_Init+0x48>)
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <MX_RTC_Init+0x4c>)
 80009cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_RTC_Init+0x48>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_RTC_Init+0x48>)
 80009d6:	227f      	movs	r2, #127	; 0x7f
 80009d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_RTC_Init+0x48>)
 80009dc:	22ff      	movs	r2, #255	; 0xff
 80009de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_RTC_Init+0x48>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_RTC_Init+0x48>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_RTC_Init+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_RTC_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_RTC_Init+0x48>)
 80009fa:	f007 fcb3 	bl	8008364 <HAL_RTC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a04:	f000 f8a8 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000190 	.word	0x20000190
 8000a10:	40002800 	.word	0x40002800

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <MX_TIM4_Init+0x98>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a5a:	f007 fd95 	bl	8008588 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a64:	f000 f878 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a76:	f007 fdde 	bl	8008636 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a80:	f000 f86a 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a92:	f007 ffcd 	bl	8008a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f85c 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001b4 	.word	0x200001b4
 8000aac:	40000800 	.word	0x40000800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_GPIO_Init+0x9c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0xa0>)
 8000b22:	f004 fdff 	bl	8005724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000b3e:	f004 fdf1 	bl	8005724 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000c00 	.word	0x48000c00
 8000b54:	48000400 	.word	0x48000400

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6613      	str	r3, [r2, #96]	; 0x60
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_CRC_MspInit+0x38>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_CRC_MspInit+0x3c>)
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_CRC_MspInit+0x3c>)
 8000bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <HAL_CRC_MspInit+0x3c>)
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023000 	.word	0x40023000
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0aa      	sub	sp, #168	; 0xa8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	229c      	movs	r2, #156	; 0x9c
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 fe6f 	bl	80098e0 <memset>
  if(hrtc->Instance==RTC)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_RTC_MspInit+0x5c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d118      	bne.n	8000c3e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 fe28 	bl	8007874 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c2a:	f7ff ff95 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_RTC_MspInit+0x60>)
 8000c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_RTC_MspInit+0x60>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	37a8      	adds	r7, #168	; 0xa8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40002800 	.word	0x40002800
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x38>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10b      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40000800 	.word	0x40000800
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f004 fab4 	bl	8005248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
  }

  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 f9a5 	bl	8005088 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
  }
  return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f008 fd4c 	bl	800988c <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200a0000 	.word	0x200a0000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	20000200 	.word	0x20000200
 8000e28:	20000410 	.word	0x20000410

08000e2c <MX_MEMS_Init>:
static uint32_t user_currentTimeGetTick(void);
static uint32_t user_currentTimeGetElapsedMS(uint32_t Tick1);
static void Send_Step_Count(void);

void MX_MEMS_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_LSM6DSO_Pedometer_Init();
 8000e30:	f000 f808 	bl	8000e44 <MX_LSM6DSO_Pedometer_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_LSM6DSO_Pedometer_Process();
 8000e3c:	f000 f83e 	bl	8000ebc <MX_LSM6DSO_Pedometer_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MX_LSM6DSO_Pedometer_Init>:
/**
  * @brief  Initialize the LSM6DSO Pedometer application
  * @retval None
  */
void MX_LSM6DSO_Pedometer_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f003 ff5d 	bl	8004d08 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2000      	movs	r0, #0
 8000e52:	f003 ffd7 	bl	8004e04 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000e56:	2000      	movs	r0, #0
 8000e58:	f004 f828 	bl	8004eac <BSP_PB_GetState>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf0c      	ite	eq
 8000e62:	2301      	moveq	r3, #1
 8000e64:	2300      	movne	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_LSM6DSO_Pedometer_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Set EXTI settings for Interrupt A */
  set_mems_int_pin_a_exti();
 8000e6e:	f000 f8d1 	bl	8001014 <set_mems_int_pin_a_exti>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f004 f878 	bl	8004f68 <BSP_COM_Init>

  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f8f2 	bl	8001064 <CUSTOM_MOTION_SENSOR_Init>

  /* Enable pedometer */
  (void)CUSTOM_MOTION_SENSOR_Enable_Pedometer(CUSTOM_LSM6DSO_0);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fa33 	bl	80012ec <CUSTOM_MOTION_SENSOR_Enable_Pedometer>

  /* Store current tick. */
  previous_tick = user_currentTimeGetTick();
 8000e86:	f000 f885 	bl	8000f94 <user_currentTimeGetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a02      	ldr	r2, [pc, #8]	; (8000e98 <MX_LSM6DSO_Pedometer_Init+0x54>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000310 	.word	0x20000310
 8000e98:	2000030c 	.word	0x2000030c

08000e9c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <BSP_PB_Callback+0x1c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000205 	.word	0x20000205

08000ebc <MX_LSM6DSO_Pedometer_Process>:
/**
  * @brief  Process of the LSM6DSO Pedometer application
  * @retval None
  */
void MX_LSM6DSO_Pedometer_Process(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  CUSTOM_MOTION_SENSOR_Event_Status_t status;

  if (PushButtonDetected != 0U)
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_LSM6DSO_Pedometer_Process+0xc4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d014      	beq.n	8000ef6 <MX_LSM6DSO_Pedometer_Process+0x3a>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f004 f9db 	bl	8005288 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 8000ed2:	bf00      	nop
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f003 ffe9 	bl	8004eac <BSP_PB_GetState>
 8000eda:	4602      	mov	r2, r0
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_LSM6DSO_Pedometer_Process+0xc8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d0f7      	beq.n	8000ed4 <MX_LSM6DSO_Pedometer_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8000ee4:	2032      	movs	r0, #50	; 0x32
 8000ee6:	f004 f9cf 	bl	8005288 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <MX_LSM6DSO_Pedometer_Process+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

    /* Reset step counter of pedometer */
    StepCountResetRequest = 1;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_LSM6DSO_Pedometer_Process+0xcc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  if (StepCountResetRequest != 0U)
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_LSM6DSO_Pedometer_Process+0xcc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00a      	beq.n	8000f14 <MX_LSM6DSO_Pedometer_Process+0x58>
  {
    StepCountResetRequest = 0;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_LSM6DSO_Pedometer_Process+0xcc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

    if (CUSTOM_MOTION_SENSOR_Reset_Step_Counter(CUSTOM_LSM6DSO_0) != BSP_ERROR_NONE)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 fa15 	bl	8001334 <CUSTOM_MOTION_SENSOR_Reset_Step_Counter>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_LSM6DSO_Pedometer_Process+0x58>
    {
      Error_Handler();
 8000f10:	f7ff fe22 	bl	8000b58 <Error_Handler>
    }
  }

  if (MemsEventDetected != 0U)
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_LSM6DSO_Pedometer_Process+0xd0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01b      	beq.n	8000f56 <MX_LSM6DSO_Pedometer_Process+0x9a>
  {
    MemsEventDetected = 0;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_LSM6DSO_Pedometer_Process+0xd0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

    if (CUSTOM_MOTION_SENSOR_Get_Event_Status(CUSTOM_LSM6DSO_0, &status) == BSP_ERROR_NONE)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fa4d 	bl	80013c8 <CUSTOM_MOTION_SENSOR_Get_Event_Status>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d110      	bne.n	8000f56 <MX_LSM6DSO_Pedometer_Process+0x9a>
    {
      if (status.StepStatus != 0U)
 8000f34:	793b      	ldrb	r3, [r7, #4]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00a      	beq.n	8000f56 <MX_LSM6DSO_Pedometer_Process+0x9a>
      {
        Send_Step_Count();
 8000f40:	f000 f840 	bl	8000fc4 <Send_Step_Count>
        BSP_LED_On(LED2);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f003 fef1 	bl	8004d2c <BSP_LED_On>
        HAL_Delay(INDICATION_DELAY);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f004 f99c 	bl	8005288 <HAL_Delay>
        BSP_LED_Off(LED2);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f003 ff01 	bl	8004d58 <BSP_LED_Off>
      }
    }
  }

  /* After defined timeout send time stamp and step count to UART. */
  if (user_currentTimeGetElapsedMS(previous_tick) >= SEND_STEP_COUNT_TIMEOUT)
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_LSM6DSO_Pedometer_Process+0xd4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f821 	bl	8000fa2 <user_currentTimeGetElapsedMS>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d906      	bls.n	8000f78 <MX_LSM6DSO_Pedometer_Process+0xbc>
  {
    Send_Step_Count();
 8000f6a:	f000 f82b 	bl	8000fc4 <Send_Step_Count>
    previous_tick = user_currentTimeGetTick();
 8000f6e:	f000 f811 	bl	8000f94 <user_currentTimeGetTick>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <MX_LSM6DSO_Pedometer_Process+0xd4>)
 8000f76:	6013      	str	r3, [r2, #0]
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000205 	.word	0x20000205
 8000f84:	20000310 	.word	0x20000310
 8000f88:	20000206 	.word	0x20000206
 8000f8c:	20000204 	.word	0x20000204
 8000f90:	2000030c 	.word	0x2000030c

08000f94 <user_currentTimeGetTick>:
/**
  * @brief  Provides SysTick time in milliseconds
  * @retval SysTick time
  */
static uint32_t user_currentTimeGetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f98:	f004 f96a 	bl	8005270 <HAL_GetTick>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <user_currentTimeGetElapsedMS>:
  * @brief  Provides a SysTick time elapsed from 'Tick1' start value in milliseconds
  * @param  Tick1 Elapsed time start value
  * @retval SysTick time elapsed
  */
static uint32_t user_currentTimeGetElapsedMS(uint32_t Tick1)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  uint32_t delta;
  uint32_t tick2;

  tick2 = HAL_GetTick();
 8000faa:	f004 f961 	bl	8005270 <HAL_GetTick>
 8000fae:	60f8      	str	r0, [r7, #12]
  delta = tick2 - Tick1;
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	60bb      	str	r3, [r7, #8]
  return delta;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <Send_Step_Count>:
/**
  * @brief  Send time stamp and step count to UART
  * @retval None
  */
static void Send_Step_Count(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  if (CUSTOM_MOTION_SENSOR_Get_Step_Count(CUSTOM_LSM6DSO_0, &StepCount) != BSP_ERROR_NONE)
 8000fc8:	490d      	ldr	r1, [pc, #52]	; (8001000 <Send_Step_Count+0x3c>)
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f9d6 	bl	800137c <CUSTOM_MOTION_SENSOR_Get_Step_Count>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <Send_Step_Count+0x20>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting step count from LSM6DSO - accelerometer.\r\n");
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <Send_Step_Count+0x40>)
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <Send_Step_Count+0x44>)
 8000fde:	f008 fc9f 	bl	8009920 <sniprintf>
 8000fe2:	e007      	b.n	8000ff4 <Send_Step_Count+0x30>
  }
  else
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Step count: %d\r\n", StepCount);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <Send_Step_Count+0x3c>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <Send_Step_Count+0x48>)
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <Send_Step_Count+0x44>)
 8000ff0:	f008 fc96 	bl	8009920 <sniprintf>
  }

  printf("%s", dataOut);
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <Send_Step_Count+0x44>)
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <Send_Step_Count+0x4c>)
 8000ff8:	f008 fc7a 	bl	80098f0 <iprintf>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000308 	.word	0x20000308
 8001004:	0800ac04 	.word	0x0800ac04
 8001008:	20000208 	.word	0x20000208
 800100c:	0800ac40 	.word	0x0800ac40
 8001010:	0800ac54 	.word	0x0800ac54

08001014 <set_mems_int_pin_a_exti>:
extern volatile uint8_t MemsEventDetected;

static void mems_int_pin_a_hardware_event_isr(void);

void set_mems_int_pin_a_exti(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* register event irq handler */
  HAL_EXTI_GetHandle(&hexti10, EXTI_LINE_10);
 8001018:	4909      	ldr	r1, [pc, #36]	; (8001040 <set_mems_int_pin_a_exti+0x2c>)
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <set_mems_int_pin_a_exti+0x30>)
 800101c:	f004 fb6e 	bl	80056fc <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti10, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <set_mems_int_pin_a_exti+0x34>)
 8001022:	2100      	movs	r1, #0
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <set_mems_int_pin_a_exti+0x30>)
 8001026:	f004 fb4f 	bl	80056c8 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	f004 fa29 	bl	8005486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001034:	2028      	movs	r0, #40	; 0x28
 8001036:	f004 fa42 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	1600000a 	.word	0x1600000a
 8001044:	20000000 	.word	0x20000000
 8001048:	0800104d 	.word	0x0800104d

0800104c <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  MemsEventDetected = 1;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <mems_int_pin_a_hardware_event_isr+0x14>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000204 	.word	0x20000204

08001064 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8001072:	2301      	movs	r3, #1
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d131      	bne.n	80010e4 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f000 f877 	bl	8001174 <LSM6DSO_0_Probe>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	e064      	b.n	800115c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4932      	ldr	r1, [pc, #200]	; (8001168 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010a4:	f107 010c 	add.w	r1, r7, #12
 80010a8:	4610      	mov	r0, r2
 80010aa:	4798      	blx	r3
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80010b2:	f06f 0306 	mvn.w	r3, #6
 80010b6:	e051      	b.n	800115c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d103      	bne.n	80010c6 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 80010da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80010e2:	e003      	b.n	80010ec <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80010e4:	f06f 0301 	mvn.w	r3, #1
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80010ea:	e000      	b.n	80010ee <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 80010ec:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 80010f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f6:	e031      	b.n	800115c <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	e02a      	b.n	8001154 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	4013      	ands	r3, r2
 8001104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001106:	429a      	cmp	r2, r3
 8001108:	d11e      	bne.n	8001148 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800110a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110e:	4013      	ands	r3, r2
 8001110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001112:	429a      	cmp	r2, r3
 8001114:	d118      	bne.n	8001148 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8001118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	440b      	add	r3, r1
 800112a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	490d      	ldr	r1, [pc, #52]	; (8001168 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001138:	4610      	mov	r0, r2
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8001142:	f06f 0304 	mvn.w	r3, #4
 8001146:	e009      	b.n	800115c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8001148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	3301      	adds	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	2b02      	cmp	r3, #2
 8001158:	d9d1      	bls.n	80010fe <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800115c:	4618      	mov	r0, r3
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000324 	.word	0x20000324
 8001168:	20000314 	.word	0x20000314
 800116c:	20000008 	.word	0x20000008
 8001170:	20000318 	.word	0x20000318

08001174 <LSM6DSO_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H; /* SA0 = VDD */
 8001184:	23d7      	movs	r3, #215	; 0xd7
 8001186:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = CUSTOM_LSM6DSO_0_I2C_Init;
 800118a:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <LSM6DSO_0_Probe+0x140>)
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSO_0_I2C_DeInit;
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <LSM6DSO_0_Probe+0x144>)
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSO_0_I2C_ReadReg;
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <LSM6DSO_0_Probe+0x148>)
 8001194:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSO_0_I2C_WriteReg;
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <LSM6DSO_0_Probe+0x14c>)
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800119a:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <LSM6DSO_0_Probe+0x150>)
 800119c:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4848      	ldr	r0, [pc, #288]	; (80012c8 <LSM6DSO_0_Probe+0x154>)
 80011a6:	f000 f95f 	bl	8001468 <LSM6DSO_RegisterBusIO>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80011b0:	f06f 0306 	mvn.w	r3, #6
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011b6:	e077      	b.n	80012a8 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80011b8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80011bc:	4619      	mov	r1, r3
 80011be:	4842      	ldr	r0, [pc, #264]	; (80012c8 <LSM6DSO_0_Probe+0x154>)
 80011c0:	f000 fa58 	bl	8001674 <LSM6DSO_ReadID>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80011ca:	f06f 0306 	mvn.w	r3, #6
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011d0:	e06a      	b.n	80012a8 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 80011d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011d6:	2b6c      	cmp	r3, #108	; 0x6c
 80011d8:	d003      	beq.n	80011e2 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80011da:	f06f 0306 	mvn.w	r3, #6
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011e0:	e062      	b.n	80012a8 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <LSM6DSO_0_Probe+0x154>)
 80011ea:	f000 fa59 	bl	80016a0 <LSM6DSO_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	461a      	mov	r2, r3
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4313      	orrs	r3, r2
 80011fe:	4a33      	ldr	r2, [pc, #204]	; (80012cc <LSM6DSO_0_Probe+0x158>)
 8001200:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSO_0] = &lsm6dso_obj_0;
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <LSM6DSO_0_Probe+0x15c>)
 8001204:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <LSM6DSO_0_Probe+0x154>)
 8001206:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <LSM6DSO_0_Probe+0x160>)
 800120a:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <LSM6DSO_0_Probe+0x164>)
 800120c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d11d      	bne.n	8001250 <LSM6DSO_0_Probe+0xdc>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d018      	beq.n	8001250 <LSM6DSO_0_Probe+0xdc>
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d115      	bne.n	8001250 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <LSM6DSO_0_Probe+0x168>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <LSM6DSO_0_Probe+0x16c>)
 800122a:	492e      	ldr	r1, [pc, #184]	; (80012e4 <LSM6DSO_0_Probe+0x170>)
 800122c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <LSM6DSO_0_Probe+0x160>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <LSM6DSO_0_Probe+0x15c>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	4610      	mov	r0, r2
 800123c:	4798      	blx	r3
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001244:	f06f 0304 	mvn.w	r3, #4
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800124a:	e001      	b.n	8001250 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8001250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001252:	2b00      	cmp	r3, #0
 8001254:	d11d      	bne.n	8001292 <LSM6DSO_0_Probe+0x11e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d018      	beq.n	8001292 <LSM6DSO_0_Probe+0x11e>
 8001260:	7b3b      	ldrb	r3, [r7, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d115      	bne.n	8001292 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <LSM6DSO_0_Probe+0x168>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <LSM6DSO_0_Probe+0x16c>)
 800126c:	491e      	ldr	r1, [pc, #120]	; (80012e8 <LSM6DSO_0_Probe+0x174>)
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <LSM6DSO_0_Probe+0x160>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <LSM6DSO_0_Probe+0x15c>)
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	4610      	mov	r0, r2
 800127e:	4798      	blx	r3
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001286:	f06f 0304 	mvn.w	r3, #4
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800128c:	e001      	b.n	8001292 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8001292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <LSM6DSO_0_Probe+0x134>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012a2:	f06f 0304 	mvn.w	r3, #4
 80012a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 80012a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3750      	adds	r7, #80	; 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	080005a5 	.word	0x080005a5
 80012b8:	08000621 	.word	0x08000621
 80012bc:	080006d5 	.word	0x080006d5
 80012c0:	08000671 	.word	0x08000671
 80012c4:	08000739 	.word	0x08000739
 80012c8:	2000032c 	.word	0x2000032c
 80012cc:	20000328 	.word	0x20000328
 80012d0:	20000314 	.word	0x20000314
 80012d4:	20000324 	.word	0x20000324
 80012d8:	2000001c 	.word	0x2000001c
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000318 	.word	0x20000318
 80012e4:	20000050 	.word	0x20000050
 80012e8:	2000002c 	.word	0x2000002c

080012ec <CUSTOM_MOTION_SENSOR_Enable_Pedometer>:
 * @brief  Enable the pedometer detection
 * @param  Instance the device instance
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable_Pedometer(uint32_t Instance)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  switch (Instance)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d110      	bne.n	800131c <CUSTOM_MOTION_SENSOR_Enable_Pedometer+0x30>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Pedometer(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <CUSTOM_MOTION_SENSOR_Enable_Pedometer+0x44>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f87e 	bl	8002404 <LSM6DSO_ACC_Enable_Pedometer>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <CUSTOM_MOTION_SENSOR_Enable_Pedometer+0x2a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800130e:	f06f 0304 	mvn.w	r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001314:	e006      	b.n	8001324 <CUSTOM_MOTION_SENSOR_Enable_Pedometer+0x38>
        ret = BSP_ERROR_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
      break;
 800131a:	e003      	b.n	8001324 <CUSTOM_MOTION_SENSOR_Enable_Pedometer+0x38>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800131c:	f06f 0301 	mvn.w	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
      break;
 8001322:	bf00      	nop
  }

  return ret;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000314 	.word	0x20000314

08001334 <CUSTOM_MOTION_SENSOR_Reset_Step_Counter>:
 * @brief  Reset step counter
 * @param  Instance the device instance
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Reset_Step_Counter(uint32_t Instance)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  switch (Instance)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d110      	bne.n	8001364 <CUSTOM_MOTION_SENSOR_Reset_Step_Counter+0x30>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Step_Counter_Reset(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <CUSTOM_MOTION_SENSOR_Reset_Step_Counter+0x44>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f8ea 	bl	8002524 <LSM6DSO_ACC_Step_Counter_Reset>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <CUSTOM_MOTION_SENSOR_Reset_Step_Counter+0x2a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001356:	f06f 0304 	mvn.w	r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800135c:	e006      	b.n	800136c <CUSTOM_MOTION_SENSOR_Reset_Step_Counter+0x38>
        ret = BSP_ERROR_NONE;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
      break;
 8001362:	e003      	b.n	800136c <CUSTOM_MOTION_SENSOR_Reset_Step_Counter+0x38>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001364:	f06f 0301 	mvn.w	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
      break;
 800136a:	bf00      	nop
  }

  return ret;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000314 	.word	0x20000314

0800137c <CUSTOM_MOTION_SENSOR_Get_Step_Count>:
 * @param  Instance the device instance
 * @param  StepCount number of steps
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Get_Step_Count(uint32_t Instance, uint16_t *StepCount)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d111      	bne.n	80013b0 <CUSTOM_MOTION_SENSOR_Get_Step_Count+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_Step_Count(MotionCompObj[Instance], StepCount) != BSP_ERROR_NONE)
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <CUSTOM_MOTION_SENSOR_Get_Step_Count+0x48>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f8ae 	bl	80024f8 <LSM6DSO_ACC_Get_Step_Count>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <CUSTOM_MOTION_SENSOR_Get_Step_Count+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80013a2:	f06f 0304 	mvn.w	r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80013a8:	e006      	b.n	80013b8 <CUSTOM_MOTION_SENSOR_Get_Step_Count+0x3c>
        ret = BSP_ERROR_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
      break;
 80013ae:	e003      	b.n	80013b8 <CUSTOM_MOTION_SENSOR_Get_Step_Count+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80013b0:	f06f 0301 	mvn.w	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      break;
 80013b6:	bf00      	nop
  }

  return ret;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000314 	.word	0x20000314

080013c8 <CUSTOM_MOTION_SENSOR_Get_Event_Status>:
 * @param  Instance the device instance
 * @param  Status the pointer to the status of all hardware events
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, CUSTOM_MOTION_SENSOR_Event_Status_t *Status)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d111      	bne.n	80013fc <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x48>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f8b2 	bl	800254c <LSM6DSO_ACC_Get_Event_Status>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80013ee:	f06f 0304 	mvn.w	r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80013f4:	e006      	b.n	8001404 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
        ret = BSP_ERROR_NONE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
      break;
 80013fa:	e003      	b.n	8001404 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80013fc:	f06f 0301 	mvn.w	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
      break;
 8001402:	bf00      	nop
  }

  return ret;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000314 	.word	0x20000314

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f003 feb0 	bl	800517c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f008 fa29 	bl	8009898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff fa3f 	bl	80008c8 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800144c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001458:	0800ad84 	.word	0x0800ad84
  ldr r2, =_sbss
 800145c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001460:	2000040c 	.word	0x2000040c

08001464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_IRQHandler>
	...

08001468 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e051      	b.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7b1a      	ldrb	r2, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <LSM6DSO_RegisterBusIO+0xcc>)
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <LSM6DSO_RegisterBusIO+0xd0>)
 80014c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e020      	b.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e016      	b.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d112      	bne.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800150c:	230c      	movs	r3, #12
 800150e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	461a      	mov	r2, r3
 8001514:	2112      	movs	r1, #18
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 ff59 	bl	80023ce <LSM6DSO_Write_Reg>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001528:	68fb      	ldr	r3, [r7, #12]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	08002c81 	.word	0x08002c81
 8001538:	08002cb7 	.word	0x08002cb7

0800153c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3320      	adds	r3, #32
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fa15 	bl	800397a <lsm6dso_i3c_disable_set>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e060      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3320      	adds	r3, #32
 8001560:	2101      	movs	r1, #1
 8001562:	4618      	mov	r0, r3
 8001564:	f002 f9e3 	bl	800392e <lsm6dso_auto_increment_set>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e054      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3320      	adds	r3, #32
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f001 ff6e 	bl	800345c <lsm6dso_block_data_update_set>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e048      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3320      	adds	r3, #32
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fa37 	bl	8003a06 <lsm6dso_fifo_mode_set>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e03c      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3320      	adds	r3, #32
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fc28 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e02c      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3320      	adds	r3, #32
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fbbe 	bl	8002d4c <lsm6dso_xl_full_scale_set>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e020      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3320      	adds	r3, #32
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fdd8 	bl	80031a0 <lsm6dso_gy_data_rate_set>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e010      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3320      	adds	r3, #32
 8001600:	2106      	movs	r1, #6
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fd64 	bl	80030d0 <lsm6dso_gy_full_scale_set>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e004      	b.n	800161e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f888 	bl	8001744 <LSM6DSO_ACC_Disable>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e015      	b.n	800166c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fc2e 	bl	8001ea2 <LSM6DSO_GYRO_Disable>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e00c      	b.n	800166c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3320      	adds	r3, #32
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 f941 	bl	800390c <lsm6dso_device_id_get>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	e000      	b.n	8001698 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016c8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <LSM6DSO_GetCapabilities+0x58>)
 80016da:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <LSM6DSO_GetCapabilities+0x58>)
 80016e0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	45d02000 	.word	0x45d02000

080016fc <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e014      	b.n	800173c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f103 0220 	add.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f001 fb71 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	e004      	b.n	800173c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e01f      	b.n	800179a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f103 0220 	add.w	r2, r3, #32
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3333      	adds	r3, #51	; 0x33
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f001 fc4a 	bl	8003000 <lsm6dso_xl_data_rate_get>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e010      	b.n	800179a <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3320      	adds	r3, #32
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fb42 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e004      	b.n	800179a <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3320      	adds	r3, #32
 80017b6:	f107 020b 	add.w	r2, r7, #11
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 faeb 	bl	8002d98 <lsm6dso_xl_full_scale_get>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	e023      	b.n	8001816 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d81b      	bhi.n	800180c <LSM6DSO_ACC_GetSensitivity+0x68>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <LSM6DSO_ACC_GetSensitivity+0x38>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001805 	.word	0x08001805
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080017fd 	.word	0x080017fd
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80017f0:	601a      	str	r2, [r3, #0]
      break;
 80017f2:	e00f      	b.n	8001814 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80017f8:	601a      	str	r2, [r3, #0]
      break;
 80017fa:	e00b      	b.n	8001814 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001800:	601a      	str	r2, [r3, #0]
      break;
 8001802:	e007      	b.n	8001814 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8001808:	601a      	str	r2, [r3, #0]
      break;
 800180a:	e003      	b.n	8001814 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	60fb      	str	r3, [r7, #12]
      break;
 8001812:	bf00      	nop
  }

  return ret;
 8001814:	68fb      	ldr	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	3d79db23 	.word	0x3d79db23
 8001824:	3df9db23 	.word	0x3df9db23
 8001828:	3e79db23 	.word	0x3e79db23
 800182c:	3ef9db23 	.word	0x3ef9db23

08001830 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3320      	adds	r3, #32
 8001842:	f107 020b 	add.w	r2, r7, #11
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fbd9 	bl	8003000 <lsm6dso_xl_data_rate_get>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e054      	b.n	8001904 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	2b0b      	cmp	r3, #11
 800185e:	d84c      	bhi.n	80018fa <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8001860:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8001862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001866:	bf00      	nop
 8001868:	08001899 	.word	0x08001899
 800186c:	080018ab 	.word	0x080018ab
 8001870:	080018b3 	.word	0x080018b3
 8001874:	080018bb 	.word	0x080018bb
 8001878:	080018c3 	.word	0x080018c3
 800187c:	080018cb 	.word	0x080018cb
 8001880:	080018d3 	.word	0x080018d3
 8001884:	080018db 	.word	0x080018db
 8001888:	080018e3 	.word	0x080018e3
 800188c:	080018eb 	.word	0x080018eb
 8001890:	080018f3 	.word	0x080018f3
 8001894:	080018a3 	.word	0x080018a3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
      break;
 80018a0:	e02f      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80018a6:	601a      	str	r2, [r3, #0]
      break;
 80018a8:	e02b      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80018ae:	601a      	str	r2, [r3, #0]
      break;
 80018b0:	e027      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80018b6:	601a      	str	r2, [r3, #0]
      break;
 80018b8:	e023      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80018be:	601a      	str	r2, [r3, #0]
      break;
 80018c0:	e01f      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80018c6:	601a      	str	r2, [r3, #0]
      break;
 80018c8:	e01b      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80018ce:	601a      	str	r2, [r3, #0]
      break;
 80018d0:	e017      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80018d6:	601a      	str	r2, [r3, #0]
      break;
 80018d8:	e013      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80018de:	601a      	str	r2, [r3, #0]
      break;
 80018e0:	e00f      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80018e6:	601a      	str	r2, [r3, #0]
      break;
 80018e8:	e00b      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80018ee:	601a      	str	r2, [r3, #0]
      break;
 80018f0:	e007      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80018f6:	601a      	str	r2, [r3, #0]
      break;
 80018f8:	e003      	b.n	8001902 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	60fb      	str	r3, [r7, #12]
      break;
 8001900:	bf00      	nop
  }

  return ret;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	3fcccccd 	.word	0x3fcccccd
 8001910:	41480000 	.word	0x41480000
 8001914:	41d00000 	.word	0x41d00000
 8001918:	42500000 	.word	0x42500000
 800191c:	42d00000 	.word	0x42d00000
 8001920:	43500000 	.word	0x43500000
 8001924:	43d08000 	.word	0x43d08000
 8001928:	44504000 	.word	0x44504000
 800192c:	44d06000 	.word	0x44d06000
 8001930:	45505000 	.word	0x45505000
 8001934:	45d05800 	.word	0x45d05800

08001938 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8001944:	2100      	movs	r1, #0
 8001946:	ed97 0a00 	vldr	s0, [r7]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f806 	bl	800195c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	ed87 0a02 	vstr	s0, [r7, #8]
 8001968:	460b      	mov	r3, r1
 800196a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b02      	cmp	r3, #2
 8001978:	f000 80ea 	beq.w	8001b50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 800197c:	2b02      	cmp	r3, #2
 800197e:	f300 8163 	bgt.w	8001c48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d074      	beq.n	8001a74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800198a:	e15d      	b.n	8001c48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f103 0020 	add.w	r0, r3, #32
 8001992:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001996:	2301      	movs	r3, #1
 8001998:	2114      	movs	r1, #20
 800199a:	f001 f9a7 	bl	8002cec <lsm6dso_read_reg>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	e16c      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80019aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d025      	beq.n	8001a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10b      	bne.n	80019da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3320      	adds	r3, #32
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fa1d 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	e154      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80019da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019de:	f36f 13c7 	bfc	r3, #7, #1
 80019e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f103 0020 	add.w	r0, r3, #32
 80019ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019f0:	2301      	movs	r3, #1
 80019f2:	2114      	movs	r1, #20
 80019f4:	f001 f992 	bl	8002d1c <lsm6dso_write_reg>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e13f      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f103 0020 	add.w	r0, r3, #32
 8001a0a:	f107 0220 	add.w	r2, r7, #32
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2115      	movs	r1, #21
 8001a12:	f001 f96b 	bl	8002cec <lsm6dso_read_reg>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e130      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8001a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8001a30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a34:	f36f 1304 	bfc	r3, #4, #1
 8001a38:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f103 0020 	add.w	r0, r3, #32
 8001a42:	f107 0220 	add.w	r2, r7, #32
 8001a46:	2301      	movs	r3, #1
 8001a48:	2115      	movs	r1, #21
 8001a4a:	f001 f967 	bl	8002d1c <lsm6dso_write_reg>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	e114      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8001a5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a5e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d400      	bmi.n	8001a6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8001a6c:	e0f0      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8001a6e:	4b87      	ldr	r3, [pc, #540]	; (8001c8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a72:	e0ed      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f103 0020 	add.w	r0, r3, #32
 8001a7a:	f107 021c 	add.w	r2, r7, #28
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2114      	movs	r1, #20
 8001a82:	f001 f933 	bl	8002cec <lsm6dso_read_reg>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a90:	e0f8      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8001a92:	7f3b      	ldrb	r3, [r7, #28]
 8001a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10b      	bne.n	8001ac0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3320      	adds	r3, #32
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f9aa 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e0e1      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8001ac0:	7f3b      	ldrb	r3, [r7, #28]
 8001ac2:	f36f 13c7 	bfc	r3, #7, #1
 8001ac6:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f103 0020 	add.w	r0, r3, #32
 8001ace:	f107 021c 	add.w	r2, r7, #28
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2114      	movs	r1, #20
 8001ad6:	f001 f921 	bl	8002d1c <lsm6dso_write_reg>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e0ce      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f103 0020 	add.w	r0, r3, #32
 8001aec:	f107 0218 	add.w	r2, r7, #24
 8001af0:	2301      	movs	r3, #1
 8001af2:	2115      	movs	r1, #21
 8001af4:	f001 f8fa 	bl	8002cec <lsm6dso_read_reg>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e0bf      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8001b04:	7e3b      	ldrb	r3, [r7, #24]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d112      	bne.n	8001b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8001b10:	7e3b      	ldrb	r3, [r7, #24]
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f103 0020 	add.w	r0, r3, #32
 8001b1e:	f107 0218 	add.w	r2, r7, #24
 8001b22:	2301      	movs	r3, #1
 8001b24:	2115      	movs	r1, #21
 8001b26:	f001 f8f9 	bl	8002d1c <lsm6dso_write_reg>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	e0a6      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001b36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b3a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001c90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dc00      	bgt.n	8001b4a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8001b48:	e082      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4e:	e07f      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f103 0020 	add.w	r0, r3, #32
 8001b56:	f107 0210 	add.w	r2, r7, #16
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2115      	movs	r1, #21
 8001b5e:	f001 f8c5 	bl	8002cec <lsm6dso_read_reg>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	e08a      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8001b7a:	7c3b      	ldrb	r3, [r7, #16]
 8001b7c:	f36f 1304 	bfc	r3, #4, #1
 8001b80:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f103 0020 	add.w	r0, r3, #32
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2115      	movs	r1, #21
 8001b90:	f001 f8c4 	bl	8002d1c <lsm6dso_write_reg>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e071      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f979 	bl	8001ea2 <LSM6DSO_GYRO_Disable>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e063      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f103 0020 	add.w	r0, r3, #32
 8001bc2:	f107 0214 	add.w	r2, r7, #20
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2114      	movs	r1, #20
 8001bca:	f001 f88f 	bl	8002cec <lsm6dso_read_reg>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	e054      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8001bda:	7d3b      	ldrb	r3, [r7, #20]
 8001bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d123      	bne.n	8001c2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10b      	bne.n	8001c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3320      	adds	r3, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f906 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e03d      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8001c08:	7d3b      	ldrb	r3, [r7, #20]
 8001c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f103 0020 	add.w	r0, r3, #32
 8001c16:	f107 0214 	add.w	r2, r7, #20
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2114      	movs	r1, #20
 8001c1e:	f001 f87d 	bl	8002d1c <lsm6dso_write_reg>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	e02a      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001c2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c32:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8001c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dc00      	bgt.n	8001c42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8001c40:	e006      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c46:	e003      	b.n	8001c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001c4e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d102      	bne.n	8001c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	e012      	b.n	8001c84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8001c68:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fdb7 	bl	80027e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8001c72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c74:	e005      	b.n	8001c82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8001c76:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fe48 	bl	8002910 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8001c80:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	41480000 	.word	0x41480000
 8001c90:	43500000 	.word	0x43500000
 8001c94:	43500000 	.word	0x43500000

08001c98 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3320      	adds	r3, #32
 8001caa:	f107 020b 	add.w	r2, r7, #11
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 f871 	bl	8002d98 <lsm6dso_xl_full_scale_get>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e023      	b.n	8001d0a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d81b      	bhi.n	8001d00 <LSM6DSO_ACC_GetFullScale+0x68>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <LSM6DSO_ACC_GetFullScale+0x38>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001cf9 	.word	0x08001cf9
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cf1 	.word	0x08001cf1
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
      break;
 8001ce6:	e00f      	b.n	8001d08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	601a      	str	r2, [r3, #0]
      break;
 8001cee:	e00b      	b.n	8001d08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
      break;
 8001cf6:	e007      	b.n	8001d08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	601a      	str	r2, [r3, #0]
      break;
 8001cfe:	e003      	b.n	8001d08 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	60fb      	str	r3, [r7, #12]
      break;
 8001d06:	bf00      	nop
  }

  return ret;
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	dd0b      	ble.n	8001d3c <LSM6DSO_ACC_SetFullScale+0x28>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	dd06      	ble.n	8001d38 <LSM6DSO_ACC_SetFullScale+0x24>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	dc01      	bgt.n	8001d34 <LSM6DSO_ACC_SetFullScale+0x20>
 8001d30:	2303      	movs	r3, #3
 8001d32:	e004      	b.n	8001d3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e002      	b.n	8001d3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e000      	b.n	8001d3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8001d3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8001d3e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3320      	adds	r3, #32
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 ffff 	bl	8002d4c <lsm6dso_xl_full_scale_set>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e000      	b.n	8001d5c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3320      	adds	r3, #32
 8001d72:	f107 0208 	add.w	r2, r7, #8
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fbe0 	bl	800353e <lsm6dso_acceleration_raw_get>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e00c      	b.n	8001da4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001d8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001d92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001d9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fbb9 	bl	800353e <lsm6dso_acceleration_raw_get>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e03c      	b.n	8001e52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fce0 	bl	80017a4 <LSM6DSO_ACC_GetSensitivity>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e030      	b.n	8001e52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001df0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e08:	ee17 2a90 	vmov	r2, s15
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e28:	ee17 2a90 	vmov	r2, s15
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001e30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e48:	ee17 2a90 	vmov	r2, s15
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e014      	b.n	8001e9a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 0220 	add.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f001 f98e 	bl	80031a0 <lsm6dso_gy_data_rate_set>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e004      	b.n	8001e9a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e01f      	b.n	8001ef8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f103 0220 	add.w	r2, r3, #32
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3334      	adds	r3, #52	; 0x34
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f001 fa67 	bl	8003398 <lsm6dso_gy_data_rate_get>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	e010      	b.n	8001ef8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3320      	adds	r3, #32
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 f95f 	bl	80031a0 <lsm6dso_gy_data_rate_set>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	e004      	b.n	8001ef8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3320      	adds	r3, #32
 8001f12:	f107 020b 	add.w	r2, r7, #11
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 f8ff 	bl	800311c <lsm6dso_gy_full_scale_get>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	e02d      	b.n	8001f86 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	2b06      	cmp	r3, #6
 8001f2e:	d825      	bhi.n	8001f7c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f5d 	.word	0x08001f5d
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f65 	.word	0x08001f65
 8001f44:	08001f7d 	.word	0x08001f7d
 8001f48:	08001f6d 	.word	0x08001f6d
 8001f4c:	08001f7d 	.word	0x08001f7d
 8001f50:	08001f75 	.word	0x08001f75
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001f58:	601a      	str	r2, [r3, #0]
      break;
 8001f5a:	e013      	b.n	8001f84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8001f60:	601a      	str	r2, [r3, #0]
      break;
 8001f62:	e00f      	b.n	8001f84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001f68:	601a      	str	r2, [r3, #0]
      break;
 8001f6a:	e00b      	b.n	8001f84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8001f70:	601a      	str	r2, [r3, #0]
      break;
 8001f72:	e007      	b.n	8001f84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001f78:	601a      	str	r2, [r3, #0]
      break;
 8001f7a:	e003      	b.n	8001f84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	60fb      	str	r3, [r7, #12]
      break;
 8001f82:	bf00      	nop
  }

  return ret;
 8001f84:	68fb      	ldr	r3, [r7, #12]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	408c0000 	.word	0x408c0000
 8001f94:	410c0000 	.word	0x410c0000
 8001f98:	418c0000 	.word	0x418c0000
 8001f9c:	420c0000 	.word	0x420c0000
 8001fa0:	428c0000 	.word	0x428c0000

08001fa4 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	f107 020b 	add.w	r2, r7, #11
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f9eb 	bl	8003398 <lsm6dso_gy_data_rate_get>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	e04e      	b.n	800206c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	2b0a      	cmp	r3, #10
 8001fd2:	d846      	bhi.n	8002062 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08002009 	.word	0x08002009
 8001fe0:	08002013 	.word	0x08002013
 8001fe4:	0800201b 	.word	0x0800201b
 8001fe8:	08002023 	.word	0x08002023
 8001fec:	0800202b 	.word	0x0800202b
 8001ff0:	08002033 	.word	0x08002033
 8001ff4:	0800203b 	.word	0x0800203b
 8001ff8:	08002043 	.word	0x08002043
 8001ffc:	0800204b 	.word	0x0800204b
 8002000:	08002053 	.word	0x08002053
 8002004:	0800205b 	.word	0x0800205b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
      break;
 8002010:	e02b      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8002016:	601a      	str	r2, [r3, #0]
      break;
 8002018:	e027      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	4a16      	ldr	r2, [pc, #88]	; (8002078 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800201e:	601a      	str	r2, [r3, #0]
      break;
 8002020:	e023      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8002026:	601a      	str	r2, [r3, #0]
      break;
 8002028:	e01f      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800202e:	601a      	str	r2, [r3, #0]
      break;
 8002030:	e01b      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8002036:	601a      	str	r2, [r3, #0]
      break;
 8002038:	e017      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800203e:	601a      	str	r2, [r3, #0]
      break;
 8002040:	e013      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8002046:	601a      	str	r2, [r3, #0]
      break;
 8002048:	e00f      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800204e:	601a      	str	r2, [r3, #0]
      break;
 8002050:	e00b      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8002056:	601a      	str	r2, [r3, #0]
      break;
 8002058:	e007      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800205e:	601a      	str	r2, [r3, #0]
      break;
 8002060:	e003      	b.n	800206a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	60fb      	str	r3, [r7, #12]
      break;
 8002068:	bf00      	nop
  }

  return ret;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	41480000 	.word	0x41480000
 8002078:	41d00000 	.word	0x41d00000
 800207c:	42500000 	.word	0x42500000
 8002080:	42d00000 	.word	0x42d00000
 8002084:	43500000 	.word	0x43500000
 8002088:	43d08000 	.word	0x43d08000
 800208c:	44504000 	.word	0x44504000
 8002090:	44d06000 	.word	0x44d06000
 8002094:	45505000 	.word	0x45505000
 8002098:	45d05800 	.word	0x45d05800

0800209c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80020a8:	2100      	movs	r1, #0
 80020aa:	ed97 0a00 	vldr	s0, [r7]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f806 	bl	80020c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80020cc:	460b      	mov	r3, r1
 80020ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d028      	beq.n	8002134 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80020e2:	e05c      	b.n	800219e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f103 0020 	add.w	r0, r3, #32
 80020ea:	f107 0214 	add.w	r2, r7, #20
 80020ee:	2301      	movs	r3, #1
 80020f0:	2116      	movs	r1, #22
 80020f2:	f000 fdfb 	bl	8002cec <lsm6dso_read_reg>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	e06c      	b.n	80021dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8002102:	7d3b      	ldrb	r3, [r7, #20]
 8002104:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d04b      	beq.n	80021a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800210e:	7d3b      	ldrb	r3, [r7, #20]
 8002110:	f36f 13c7 	bfc	r3, #7, #1
 8002114:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f103 0020 	add.w	r0, r3, #32
 800211c:	f107 0214 	add.w	r2, r7, #20
 8002120:	2301      	movs	r3, #1
 8002122:	2116      	movs	r1, #22
 8002124:	f000 fdfa 	bl	8002d1c <lsm6dso_write_reg>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03b      	beq.n	80021a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e053      	b.n	80021dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f103 0020 	add.w	r0, r3, #32
 800213a:	f107 0210 	add.w	r2, r7, #16
 800213e:	2301      	movs	r3, #1
 8002140:	2116      	movs	r1, #22
 8002142:	f000 fdd3 	bl	8002cec <lsm6dso_read_reg>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	e044      	b.n	80021dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8002152:	7c3b      	ldrb	r3, [r7, #16]
 8002154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d112      	bne.n	8002184 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800215e:	7c3b      	ldrb	r3, [r7, #16]
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f103 0020 	add.w	r0, r3, #32
 800216c:	f107 0210 	add.w	r2, r7, #16
 8002170:	2301      	movs	r3, #1
 8002172:	2116      	movs	r1, #22
 8002174:	f000 fdd2 	bl	8002d1c <lsm6dso_write_reg>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e02b      	b.n	80021dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8002184:	edd7 7a06 	vldr	s15, [r7, #24]
 8002188:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80021e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 800218c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dc00      	bgt.n	8002198 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8002196:	e007      	b.n	80021a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e004      	b.n	80021a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	61fb      	str	r3, [r7, #28]
      break;
 80021a4:	e000      	b.n	80021a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80021a6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d102      	bne.n	80021b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	e012      	b.n	80021dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80021c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fc33 	bl	8002a30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80021ca:	61f8      	str	r0, [r7, #28]
 80021cc:	e005      	b.n	80021da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80021ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fcb8 	bl	8002b48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80021d8:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80021da:	69fb      	ldr	r3, [r7, #28]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	43500000 	.word	0x43500000
 80021e8:	43500000 	.word	0x43500000

080021ec <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3320      	adds	r3, #32
 80021fe:	f107 020b 	add.w	r2, r7, #11
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f000 ff89 	bl	800311c <lsm6dso_gy_full_scale_get>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	e030      	b.n	8002278 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d828      	bhi.n	800226e <LSM6DSO_GYRO_GetFullScale+0x82>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002249 	.word	0x08002249
 8002228:	08002241 	.word	0x08002241
 800222c:	08002251 	.word	0x08002251
 8002230:	0800226f 	.word	0x0800226f
 8002234:	0800225b 	.word	0x0800225b
 8002238:	0800226f 	.word	0x0800226f
 800223c:	08002265 	.word	0x08002265
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	227d      	movs	r2, #125	; 0x7d
 8002244:	601a      	str	r2, [r3, #0]
      break;
 8002246:	e016      	b.n	8002276 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	22fa      	movs	r2, #250	; 0xfa
 800224c:	601a      	str	r2, [r3, #0]
      break;
 800224e:	e012      	b.n	8002276 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002256:	601a      	str	r2, [r3, #0]
      break;
 8002258:	e00d      	b.n	8002276 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002260:	601a      	str	r2, [r3, #0]
      break;
 8002262:	e008      	b.n	8002276 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800226a:	601a      	str	r2, [r3, #0]
      break;
 800226c:	e003      	b.n	8002276 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	60fb      	str	r3, [r7, #12]
      break;
 8002274:	bf00      	nop
  }

  return ret;
 8002276:	68fb      	ldr	r3, [r7, #12]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b7d      	cmp	r3, #125	; 0x7d
 800228e:	dd12      	ble.n	80022b6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2bfa      	cmp	r3, #250	; 0xfa
 8002294:	dd0d      	ble.n	80022b2 <LSM6DSO_GYRO_SetFullScale+0x32>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800229c:	dd07      	ble.n	80022ae <LSM6DSO_GYRO_SetFullScale+0x2e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a4:	dc01      	bgt.n	80022aa <LSM6DSO_GYRO_SetFullScale+0x2a>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e004      	b.n	80022b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80022b6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80022b8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3320      	adds	r3, #32
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 ff04 	bl	80030d0 <lsm6dso_gy_full_scale_set>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e000      	b.n	80022d6 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3320      	adds	r3, #32
 80022ec:	f107 0208 	add.w	r2, r7, #8
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 f8d8 	bl	80034a8 <lsm6dso_angular_rate_raw_get>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e00c      	b.n	800231e <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002304:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800230c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002314:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3320      	adds	r3, #32
 8002334:	f107 0210 	add.w	r2, r7, #16
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f8b4 	bl	80034a8 <lsm6dso_angular_rate_raw_get>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e03c      	b.n	80023c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fdd4 	bl	8001f00 <LSM6DSO_GYRO_GetSensitivity>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e030      	b.n	80023c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8002364:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002370:	edd7 7a03 	vldr	s15, [r7, #12]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 2a90 	vmov	r2, s15
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8002384:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002390:	edd7 7a03 	vldr	s15, [r7, #12]
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80023a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 2a90 	vmov	r2, s15
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
 80023da:	4613      	mov	r3, r2
 80023dc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f103 0020 	add.w	r0, r3, #32
 80023e4:	1cba      	adds	r2, r7, #2
 80023e6:	78f9      	ldrb	r1, [r7, #3]
 80023e8:	2301      	movs	r3, #1
 80023ea:	f000 fc97 	bl	8002d1c <lsm6dso_write_reg>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	e000      	b.n	80023fc <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <LSM6DSO_ACC_Enable_Pedometer>:
  * @brief  Enable pedometer
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_Pedometer(LSM6DSO_Object_t *pObj)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  lsm6dso_pin_int1_route_t val;
  lsm6dso_emb_sens_t emb_sens;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSO_OK)
 800240c:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fa91 	bl	8001938 <LSM6DSO_ACC_SetOutputDataRate>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <LSM6DSO_ACC_Enable_Pedometer+0x1e>
  {
    return LSM6DSO_ERROR;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	e066      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 8002422:	2102      	movs	r1, #2
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fc75 	bl	8001d14 <LSM6DSO_ACC_SetFullScale>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <LSM6DSO_ACC_Enable_Pedometer+0x32>
  {
    return LSM6DSO_ERROR;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e05c      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Save current embedded features */
  if (lsm6dso_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3320      	adds	r3, #32
 800243a:	f107 020c 	add.w	r2, r7, #12
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fba4 	bl	8004b8e <lsm6dso_embedded_sens_get>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <LSM6DSO_ACC_Enable_Pedometer+0x4e>
  {
    return LSM6DSO_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e04e      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Turn off embedded features */
  if (lsm6dso_embedded_sens_off(&(pObj->Ctx)) != LSM6DSO_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3320      	adds	r3, #32
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fbfc 	bl	8004c54 <lsm6dso_embedded_sens_off>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <LSM6DSO_ACC_Enable_Pedometer+0x64>
  {
    return LSM6DSO_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e043      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Wait for 10 ms */
  LSM6DSO_Delay(pObj, 10);
 8002468:	210a      	movs	r1, #10
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fbee 	bl	8002c4c <LSM6DSO_Delay>

  /* Enable pedometer algorithm. */
  emb_sens.step = PROPERTY_ENABLE;
 8002470:	7b3b      	ldrb	r3, [r7, #12]
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	733b      	strb	r3, [r7, #12]

  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_BASE_MODE) != LSM6DSO_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3320      	adds	r3, #32
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fae7 	bl	8003a52 <lsm6dso_pedo_sens_set>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <LSM6DSO_ACC_Enable_Pedometer+0x8c>
  {
    return LSM6DSO_ERROR;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e02f      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Turn on embedded features */
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3320      	adds	r3, #32
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fafe 	bl	8004a9c <lsm6dso_embedded_sens_set>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <LSM6DSO_ACC_Enable_Pedometer+0xa8>
  {
    return LSM6DSO_ERROR;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e021      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  /* Enable step detector on INT1 pin */
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val) != LSM6DSO_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3320      	adds	r3, #32
 80024b0:	f107 0210 	add.w	r2, r7, #16
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 ff23 	bl	8004302 <lsm6dso_pin_int1_route_get>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <LSM6DSO_ACC_Enable_Pedometer+0xc4>
  {
    return LSM6DSO_ERROR;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e013      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  val.step_detector = PROPERTY_ENABLE;
 80024c8:	7cbb      	ldrb	r3, [r7, #18]
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	74bb      	strb	r3, [r7, #18]

  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val) != LSM6DSO_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0020 	add.w	r0, r3, #32
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80024de:	f001 fb7d 	bl	8003bdc <lsm6dso_pin_int1_route_set>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <LSM6DSO_ACC_Enable_Pedometer+0xea>
  {
    return LSM6DSO_ERROR;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ec:	e000      	b.n	80024f0 <LSM6DSO_ACC_Enable_Pedometer+0xec>
  }

  return LSM6DSO_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <LSM6DSO_ACC_Get_Step_Count>:
  * @param  pObj the device pObj
  * @param  StepCount step counter
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_Step_Count(LSM6DSO_Object_t *pObj, uint16_t *StepCount)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  if (lsm6dso_number_of_steps_get(&(pObj->Ctx), StepCount) != LSM6DSO_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f863 	bl	80035d4 <lsm6dso_number_of_steps_get>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <LSM6DSO_ACC_Get_Step_Count+0x22>
  {
    return LSM6DSO_ERROR;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	e000      	b.n	800251c <LSM6DSO_ACC_Get_Step_Count+0x24>
  }

  return LSM6DSO_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <LSM6DSO_ACC_Step_Counter_Reset>:
  * @brief  Enable step counter reset
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Step_Counter_Reset(LSM6DSO_Object_t *pObj)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if (lsm6dso_steps_reset(&(pObj->Ctx)) != LSM6DSO_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3320      	adds	r3, #32
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f87f 	bl	8003634 <lsm6dso_steps_reset>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <LSM6DSO_ACC_Step_Counter_Reset+0x1e>
  {
    return LSM6DSO_ERROR;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	e000      	b.n	8002544 <LSM6DSO_ACC_Step_Counter_Reset+0x20>
  }

  return LSM6DSO_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <LSM6DSO_ACC_Get_Event_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of all hardware events
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_Event_Status(LSM6DSO_Object_t *pObj, LSM6DSO_Event_Status_t *Status)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  lsm6dso_md1_cfg_t md1_cfg;
  lsm6dso_md2_cfg_t md2_cfg;
  lsm6dso_emb_func_int1_t int1_ctrl;
  lsm6dso_emb_func_int2_t int2_ctrl;

  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 8002556:	2204      	movs	r2, #4
 8002558:	2100      	movs	r1, #0
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f007 f9c0 	bl	80098e0 <memset>

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0020 	add.w	r0, r3, #32
 8002566:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800256a:	2301      	movs	r3, #1
 800256c:	211b      	movs	r1, #27
 800256e:	f000 fbbd 	bl	8002cec <lsm6dso_read_reg>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <LSM6DSO_ACC_Get_Event_Status+0x32>
  {
    return LSM6DSO_ERROR;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	e12c      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 0020 	add.w	r0, r3, #32
 8002584:	f107 0220 	add.w	r2, r7, #32
 8002588:	2301      	movs	r3, #1
 800258a:	211c      	movs	r1, #28
 800258c:	f000 fbae 	bl	8002cec <lsm6dso_read_reg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <LSM6DSO_ACC_Get_Event_Status+0x50>
  {
    return LSM6DSO_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e11d      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f103 0020 	add.w	r0, r3, #32
 80025a2:	f107 021c 	add.w	r2, r7, #28
 80025a6:	2301      	movs	r3, #1
 80025a8:	211d      	movs	r1, #29
 80025aa:	f000 fb9f 	bl	8002cec <lsm6dso_read_reg>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <LSM6DSO_ACC_Get_Event_Status+0x6e>
  {
    return LSM6DSO_ERROR;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e10e      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3320      	adds	r3, #32
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f867 	bl	8003694 <lsm6dso_mem_bank_set>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <LSM6DSO_ACC_Get_Event_Status+0x86>
  {
    return LSM6DSO_ERROR;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e102      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0020 	add.w	r0, r3, #32
 80025d8:	f107 0218 	add.w	r2, r7, #24
 80025dc:	2301      	movs	r3, #1
 80025de:	2164      	movs	r1, #100	; 0x64
 80025e0:	f000 fb84 	bl	8002cec <lsm6dso_read_reg>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <LSM6DSO_ACC_Get_Event_Status+0xa4>
  {
    return LSM6DSO_ERROR;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e0f3      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f103 0020 	add.w	r0, r3, #32
 80025f6:	f107 020c 	add.w	r2, r7, #12
 80025fa:	2301      	movs	r3, #1
 80025fc:	210a      	movs	r1, #10
 80025fe:	f000 fb75 	bl	8002cec <lsm6dso_read_reg>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <LSM6DSO_ACC_Get_Event_Status+0xc2>
  {
    return LSM6DSO_ERROR;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	e0e4      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 0020 	add.w	r0, r3, #32
 8002614:	f107 0208 	add.w	r2, r7, #8
 8002618:	2301      	movs	r3, #1
 800261a:	210e      	movs	r1, #14
 800261c:	f000 fb66 	bl	8002cec <lsm6dso_read_reg>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <LSM6DSO_ACC_Get_Event_Status+0xe0>
  {
    return LSM6DSO_ERROR;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e0d5      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3320      	adds	r3, #32
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f001 f82e 	bl	8003694 <lsm6dso_mem_bank_set>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <LSM6DSO_ACC_Get_Event_Status+0xf8>
  {
    return LSM6DSO_ERROR;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e0c9      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0020 	add.w	r0, r3, #32
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	2301      	movs	r3, #1
 8002650:	215e      	movs	r1, #94	; 0x5e
 8002652:	f000 fb4b 	bl	8002cec <lsm6dso_read_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <LSM6DSO_ACC_Get_Event_Status+0x116>
  {
    return LSM6DSO_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	e0ba      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f103 0020 	add.w	r0, r3, #32
 8002668:	f107 0210 	add.w	r2, r7, #16
 800266c:	2301      	movs	r3, #1
 800266e:	215f      	movs	r1, #95	; 0x5f
 8002670:	f000 fb3c 	bl	8002cec <lsm6dso_read_reg>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <LSM6DSO_ACC_Get_Event_Status+0x134>
  {
    return LSM6DSO_ERROR;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e0ab      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3320      	adds	r3, #32
 8002684:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fa13 	bl	8003ab6 <lsm6dso_tilt_flag_data_ready_get>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <LSM6DSO_ACC_Get_Event_Status+0x150>
  {
    return LSM6DSO_ERROR;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e09d      	b.n	80027d8 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 800269c:	7d3b      	ldrb	r3, [r7, #20]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <LSM6DSO_ACC_Get_Event_Status+0x168>
 80026a8:	7c3b      	ldrb	r3, [r7, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <LSM6DSO_ACC_Get_Event_Status+0x180>
  {
    if (wake_up_src.ff_ia == 1U)
 80026b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <LSM6DSO_ACC_Get_Event_Status+0x180>
    {
      Status->FreeFallStatus = 1;
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	7813      	ldrb	r3, [r2, #0]
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 80026cc:	7d3b      	ldrb	r3, [r7, #20]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <LSM6DSO_ACC_Get_Event_Status+0x198>
 80026d8:	7c3b      	ldrb	r3, [r7, #16]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <LSM6DSO_ACC_Get_Event_Status+0x1b0>
  {
    if (wake_up_src.wu_ia == 1U)
 80026e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <LSM6DSO_ACC_Get_Event_Status+0x1b0>
    {
      Status->WakeUpStatus = 1;
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	7813      	ldrb	r3, [r2, #0]
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 80026fc:	7d3b      	ldrb	r3, [r7, #20]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <LSM6DSO_ACC_Get_Event_Status+0x1c8>
 8002708:	7c3b      	ldrb	r3, [r7, #16]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <LSM6DSO_ACC_Get_Event_Status+0x1e0>
  {
    if (tap_src.single_tap == 1U)
 8002714:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <LSM6DSO_ACC_Get_Event_Status+0x1e0>
    {
      Status->TapStatus = 1;
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	7813      	ldrb	r3, [r2, #0]
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 800272c:	7d3b      	ldrb	r3, [r7, #20]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <LSM6DSO_ACC_Get_Event_Status+0x1f8>
 8002738:	7c3b      	ldrb	r3, [r7, #16]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <LSM6DSO_ACC_Get_Event_Status+0x210>
  {
    if (tap_src.double_tap == 1U)
 8002744:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <LSM6DSO_ACC_Get_Event_Status+0x210>
    {
      Status->DoubleTapStatus = 1;
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	7813      	ldrb	r3, [r2, #0]
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 800275c:	7d3b      	ldrb	r3, [r7, #20]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <LSM6DSO_ACC_Get_Event_Status+0x228>
 8002768:	7c3b      	ldrb	r3, [r7, #16]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <LSM6DSO_ACC_Get_Event_Status+0x23e>
  {
    if (d6d_src.d6d_ia == 1U)
 8002774:	7f3b      	ldrb	r3, [r7, #28]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <LSM6DSO_ACC_Get_Event_Status+0x23e>
    {
      Status->D6DOrientationStatus = 1;
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	7813      	ldrb	r3, [r2, #0]
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	7013      	strb	r3, [r2, #0]
    }
  }

  if (int1_ctrl.int1_step_detector == 1U)
 800278a:	7b3b      	ldrb	r3, [r7, #12]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <LSM6DSO_ACC_Get_Event_Status+0x260>
  {
    if (func_src.step_detected == 1U)
 8002796:	7e3b      	ldrb	r3, [r7, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <LSM6DSO_ACC_Get_Event_Status+0x260>
    {
      Status->StepStatus = 1;
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	7813      	ldrb	r3, [r2, #0]
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <LSM6DSO_ACC_Get_Event_Status+0x278>
 80027b8:	7a3b      	ldrb	r3, [r7, #8]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <LSM6DSO_ACC_Get_Event_Status+0x28a>
  {
    if (tilt_ia == 1U)
 80027c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d104      	bne.n	80027d6 <LSM6DSO_ACC_Get_Event_Status+0x28a>
    {
      Status->TiltStatus = 1;
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	7813      	ldrb	r3, [r2, #0]
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	7013      	strb	r3, [r2, #0]
    }
  }

  return LSM6DSO_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80027ec:	edd7 7a00 	vldr	s15, [r7]
 80027f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80028f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80027f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fc:	d801      	bhi.n	8002802 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80027fe:	230b      	movs	r3, #11
 8002800:	e063      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002802:	edd7 7a00 	vldr	s15, [r7]
 8002806:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	d801      	bhi.n	8002818 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002814:	2301      	movs	r3, #1
 8002816:	e058      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002818:	edd7 7a00 	vldr	s15, [r7]
 800281c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	d801      	bhi.n	800282e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800282a:	2302      	movs	r3, #2
 800282c:	e04d      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800282e:	edd7 7a00 	vldr	s15, [r7]
 8002832:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80028f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283e:	d801      	bhi.n	8002844 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002840:	2303      	movs	r3, #3
 8002842:	e042      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002844:	edd7 7a00 	vldr	s15, [r7]
 8002848:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80028f8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 800284c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d801      	bhi.n	800285a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002856:	2304      	movs	r3, #4
 8002858:	e037      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800285a:	edd7 7a00 	vldr	s15, [r7]
 800285e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80028fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8002862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d801      	bhi.n	8002870 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 800286c:	2305      	movs	r3, #5
 800286e:	e02c      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002870:	edd7 7a00 	vldr	s15, [r7]
 8002874:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002900 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8002878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	d801      	bhi.n	8002886 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002882:	2306      	movs	r3, #6
 8002884:	e021      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002886:	edd7 7a00 	vldr	s15, [r7]
 800288a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002904 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800288e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002896:	d801      	bhi.n	800289c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002898:	2307      	movs	r3, #7
 800289a:	e016      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800289c:	edd7 7a00 	vldr	s15, [r7]
 80028a0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002908 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80028a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	d801      	bhi.n	80028b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e00b      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80028b2:	edd7 7a00 	vldr	s15, [r7]
 80028b6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800290c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80028ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	d801      	bhi.n	80028c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80028c4:	2309      	movs	r3, #9
 80028c6:	e000      	b.n	80028ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80028c8:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80028ca:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3320      	adds	r3, #32
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa97 	bl	8002e08 <lsm6dso_xl_data_rate_set>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e000      	b.n	80028e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	3fcccccd 	.word	0x3fcccccd
 80028f4:	42500000 	.word	0x42500000
 80028f8:	42d00000 	.word	0x42d00000
 80028fc:	43500000 	.word	0x43500000
 8002900:	43d08000 	.word	0x43d08000
 8002904:	44504000 	.word	0x44504000
 8002908:	44d06000 	.word	0x44d06000
 800290c:	45505000 	.word	0x45505000

08002910 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800291c:	edd7 7a00 	vldr	s15, [r7]
 8002920:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002a10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d801      	bhi.n	8002932 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800292e:	230b      	movs	r3, #11
 8002930:	e063      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002932:	edd7 7a00 	vldr	s15, [r7]
 8002936:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800293a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d801      	bhi.n	8002948 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002944:	2301      	movs	r3, #1
 8002946:	e058      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002948:	edd7 7a00 	vldr	s15, [r7]
 800294c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002958:	d801      	bhi.n	800295e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800295a:	2302      	movs	r3, #2
 800295c:	e04d      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800295e:	edd7 7a00 	vldr	s15, [r7]
 8002962:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002a14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8002966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d801      	bhi.n	8002974 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002970:	2303      	movs	r3, #3
 8002972:	e042      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002974:	edd7 7a00 	vldr	s15, [r7]
 8002978:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002a18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800297c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	d801      	bhi.n	800298a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002986:	2304      	movs	r3, #4
 8002988:	e037      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800298a:	edd7 7a00 	vldr	s15, [r7]
 800298e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8002992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299a:	d801      	bhi.n	80029a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800299c:	2305      	movs	r3, #5
 800299e:	e02c      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80029a0:	edd7 7a00 	vldr	s15, [r7]
 80029a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002a20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80029a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	d801      	bhi.n	80029b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e021      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80029b6:	edd7 7a00 	vldr	s15, [r7]
 80029ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002a24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80029be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d801      	bhi.n	80029cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80029c8:	2307      	movs	r3, #7
 80029ca:	e016      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80029cc:	edd7 7a00 	vldr	s15, [r7]
 80029d0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002a28 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80029d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029dc:	d801      	bhi.n	80029e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00b      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80029e2:	edd7 7a00 	vldr	s15, [r7]
 80029e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002a2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80029ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d801      	bhi.n	80029f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80029f4:	2309      	movs	r3, #9
 80029f6:	e000      	b.n	80029fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80029f8:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	3fcccccd 	.word	0x3fcccccd
 8002a14:	42500000 	.word	0x42500000
 8002a18:	42d00000 	.word	0x42d00000
 8002a1c:	43500000 	.word	0x43500000
 8002a20:	43d08000 	.word	0x43d08000
 8002a24:	44504000 	.word	0x44504000
 8002a28:	44d06000 	.word	0x44d06000
 8002a2c:	45505000 	.word	0x45505000

08002a30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002a3c:	edd7 7a00 	vldr	s15, [r7]
 8002a40:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	d801      	bhi.n	8002a52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e058      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002a52:	edd7 7a00 	vldr	s15, [r7]
 8002a56:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	d801      	bhi.n	8002a68 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e04d      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002a68:	edd7 7a00 	vldr	s15, [r7]
 8002a6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002b2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	d801      	bhi.n	8002a7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e042      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002a7e:	edd7 7a00 	vldr	s15, [r7]
 8002a82:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002b30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8002a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d801      	bhi.n	8002a94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e037      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002a94:	edd7 7a00 	vldr	s15, [r7]
 8002a98:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8002a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d801      	bhi.n	8002aaa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	e02c      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002aaa:	edd7 7a00 	vldr	s15, [r7]
 8002aae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002b38 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8002ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d801      	bhi.n	8002ac0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002abc:	2306      	movs	r3, #6
 8002abe:	e021      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002ac0:	edd7 7a00 	vldr	s15, [r7]
 8002ac4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002b3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8002ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	d801      	bhi.n	8002ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	e016      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002ad6:	edd7 7a00 	vldr	s15, [r7]
 8002ada:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002b40 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8002ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d801      	bhi.n	8002aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002ae8:	2308      	movs	r3, #8
 8002aea:	e00b      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002aec:	edd7 7a00 	vldr	s15, [r7]
 8002af0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8002af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d801      	bhi.n	8002b02 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8002afe:	2309      	movs	r3, #9
 8002b00:	e000      	b.n	8002b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002b02:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002b04:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3320      	adds	r3, #32
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fb46 	bl	80031a0 <lsm6dso_gy_data_rate_set>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	e000      	b.n	8002b22 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	42500000 	.word	0x42500000
 8002b30:	42d00000 	.word	0x42d00000
 8002b34:	43500000 	.word	0x43500000
 8002b38:	43d08000 	.word	0x43d08000
 8002b3c:	44504000 	.word	0x44504000
 8002b40:	44d06000 	.word	0x44d06000
 8002b44:	45505000 	.word	0x45505000

08002b48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002b54:	edd7 7a00 	vldr	s15, [r7]
 8002b58:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	d801      	bhi.n	8002b6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e058      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002b6a:	edd7 7a00 	vldr	s15, [r7]
 8002b6e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d801      	bhi.n	8002b80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e04d      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002b80:	edd7 7a00 	vldr	s15, [r7]
 8002b84:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002c30 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d801      	bhi.n	8002b96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e042      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002b96:	edd7 7a00 	vldr	s15, [r7]
 8002b9a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c34 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8002b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d801      	bhi.n	8002bac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e037      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002bac:	edd7 7a00 	vldr	s15, [r7]
 8002bb0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8002bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	d801      	bhi.n	8002bc2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	e02c      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002bc2:	edd7 7a00 	vldr	s15, [r7]
 8002bc6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8002bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d801      	bhi.n	8002bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	e021      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002bd8:	edd7 7a00 	vldr	s15, [r7]
 8002bdc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002c40 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8002be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d801      	bhi.n	8002bee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8002bea:	2307      	movs	r3, #7
 8002bec:	e016      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002bee:	edd7 7a00 	vldr	s15, [r7]
 8002bf2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c44 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d801      	bhi.n	8002c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002c00:	2308      	movs	r3, #8
 8002c02:	e00b      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002c04:	edd7 7a00 	vldr	s15, [r7]
 8002c08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d801      	bhi.n	8002c1a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8002c16:	2309      	movs	r3, #9
 8002c18:	e000      	b.n	8002c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002c1a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	42500000 	.word	0x42500000
 8002c34:	42d00000 	.word	0x42d00000
 8002c38:	43500000 	.word	0x43500000
 8002c3c:	43d08000 	.word	0x43d08000
 8002c40:	44504000 	.word	0x44504000
 8002c44:	44d06000 	.word	0x44d06000
 8002c48:	45505000 	.word	0x45505000

08002c4c <LSM6DSO_Delay>:
  * @param  pObj the device pObj
  * @param  msDelay delay expressed in ms
  * @retval None
  */
static void LSM6DSO_Delay(LSM6DSO_Object_t *pObj, uint32_t msDelay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = pObj->IO.GetTick();
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4798      	blx	r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]

  while ((pObj->IO.GetTick() - tickstart) < msDelay)
 8002c60:	bf00      	nop
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4798      	blx	r3
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d8f5      	bhi.n	8002c62 <LSM6DSO_Delay+0x16>
  {
  }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	72fb      	strb	r3, [r7, #11]
 8002c90:	4613      	mov	r3, r2
 8002c92:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	695c      	ldr	r4, [r3, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ca0:	b298      	uxth	r0, r3
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	b299      	uxth	r1, r3
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	47a0      	blx	r4
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	72fb      	strb	r3, [r7, #11]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	691c      	ldr	r4, [r3, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	7b1b      	ldrb	r3, [r3, #12]
 8002cd6:	b298      	uxth	r0, r3
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	b299      	uxth	r1, r3
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	47a0      	blx	r4
 8002ce2:	4603      	mov	r3, r0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd90      	pop	{r4, r7, pc}

08002cec <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	72fb      	strb	r3, [r7, #11]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685c      	ldr	r4, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68d8      	ldr	r0, [r3, #12]
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	7af9      	ldrb	r1, [r7, #11]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	47a0      	blx	r4
 8002d10:	6178      	str	r0, [r7, #20]

  return ret;
 8002d12:	697b      	ldr	r3, [r7, #20]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}

08002d1c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	460b      	mov	r3, r1
 8002d2a:	72fb      	strb	r3, [r7, #11]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	68d8      	ldr	r0, [r3, #12]
 8002d38:	893b      	ldrh	r3, [r7, #8]
 8002d3a:	7af9      	ldrb	r1, [r7, #11]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	47a0      	blx	r4
 8002d40:	6178      	str	r0, [r7, #20]

  return ret;
 8002d42:	697b      	ldr	r3, [r7, #20]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d58:	f107 0208 	add.w	r2, r7, #8
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	2110      	movs	r1, #16
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffc3 	bl	8002cec <lsm6dso_read_reg>
 8002d66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	7a3b      	ldrb	r3, [r7, #8]
 8002d78:	f362 0383 	bfi	r3, r2, #2, #2
 8002d7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	2301      	movs	r3, #1
 8002d84:	2110      	movs	r1, #16
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffc8 	bl	8002d1c <lsm6dso_write_reg>
 8002d8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002da2:	f107 0208 	add.w	r2, r7, #8
 8002da6:	2301      	movs	r3, #1
 8002da8:	2110      	movs	r1, #16
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ff9e 	bl	8002cec <lsm6dso_read_reg>
 8002db0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8002db2:	7a3b      	ldrb	r3, [r7, #8]
 8002db4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d81a      	bhi.n	8002df4 <lsm6dso_xl_full_scale_get+0x5c>
 8002dbe:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <lsm6dso_xl_full_scale_get+0x2c>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002ddd 	.word	0x08002ddd
 8002dcc:	08002de5 	.word	0x08002de5
 8002dd0:	08002ded 	.word	0x08002ded
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e00f      	b.n	8002dfc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
      break;
 8002de2:	e00b      	b.n	8002dfc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
      break;
 8002dea:	e007      	b.n	8002dfc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2203      	movs	r2, #3
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e003      	b.n	8002dfc <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
      break;
 8002dfa:	bf00      	nop
  }

  return ret;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fe72 	bl	8003b08 <lsm6dso_fsm_enable_get>
 8002e24:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f040 80c4 	bne.w	8002fb6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002e36:	7b3b      	ldrb	r3, [r7, #12]
 8002e38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e3c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002e4e:	7b3b      	ldrb	r3, [r7, #12]
 8002e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002e5a:	7b3b      	ldrb	r3, [r7, #12]
 8002e5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002e66:	7b3b      	ldrb	r3, [r7, #12]
 8002e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002e72:	7b3b      	ldrb	r3, [r7, #12]
 8002e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002e7e:	7b3b      	ldrb	r3, [r7, #12]
 8002e80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e8a:	7b7b      	ldrb	r3, [r7, #13]
 8002e8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002e92:	4313      	orrs	r3, r2
 8002e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002e96:	7b7b      	ldrb	r3, [r7, #13]
 8002e98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002ea2:	7b7b      	ldrb	r3, [r7, #13]
 8002ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002eae:	7b7b      	ldrb	r3, [r7, #13]
 8002eb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002ec6:	7b7b      	ldrb	r3, [r7, #13]
 8002ec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002ede:	7b7b      	ldrb	r3, [r7, #13]
 8002ee0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d163      	bne.n	8002fb6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002eee:	f107 030b 	add.w	r3, r7, #11
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fe29 	bl	8003b4c <lsm6dso_fsm_data_rate_get>
 8002efa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d159      	bne.n	8002fb6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d853      	bhi.n	8002fb0 <lsm6dso_xl_data_rate_set+0x1a8>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <lsm6dso_xl_data_rate_set+0x108>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f33 	.word	0x08002f33
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f7b 	.word	0x08002f7b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002f2a:	e045      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f30:	e042      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002f3c:	e03c      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002f44:	2302      	movs	r3, #2
 8002f46:	75fb      	strb	r3, [r7, #23]
            break;
 8002f48:	e036      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	75fb      	strb	r3, [r7, #23]
            break;
 8002f4e:	e033      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002f56:	2303      	movs	r3, #3
 8002f58:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002f5a:	e02d      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002f62:	2303      	movs	r3, #3
 8002f64:	75fb      	strb	r3, [r7, #23]
            break;
 8002f66:	e027      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d102      	bne.n	8002f74 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	75fb      	strb	r3, [r7, #23]
            break;
 8002f72:	e021      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	75fb      	strb	r3, [r7, #23]
            break;
 8002f78:	e01e      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002f80:	2304      	movs	r3, #4
 8002f82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002f84:	e018      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f90:	e012      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d102      	bne.n	8002f9e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8002f9c:	e00c      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d102      	bne.n	8002faa <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8002fa8:	e006      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	75fb      	strb	r3, [r7, #23]
            break;
 8002fae:	e003      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8002fb4:	e000      	b.n	8002fb8 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8002fb6:	bf00      	nop
    }
  }

  if (ret == 0)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002fbe:	f107 0208 	add.w	r2, r7, #8
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fe90 	bl	8002cec <lsm6dso_read_reg>
 8002fcc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	7a3b      	ldrb	r3, [r7, #8]
 8002fde:	f362 1307 	bfi	r3, r2, #4, #4
 8002fe2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2110      	movs	r1, #16
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fe95 	bl	8002d1c <lsm6dso_write_reg>
 8002ff2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8002ff4:	693b      	ldr	r3, [r7, #16]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop

08003000 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800300a:	f107 0208 	add.w	r2, r7, #8
 800300e:	2301      	movs	r3, #1
 8003010:	2110      	movs	r1, #16
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe6a 	bl	8002cec <lsm6dso_read_reg>
 8003018:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800301a:	7a3b      	ldrb	r3, [r7, #8]
 800301c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b0b      	cmp	r3, #11
 8003024:	d84a      	bhi.n	80030bc <lsm6dso_xl_data_rate_get+0xbc>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <lsm6dso_xl_data_rate_get+0x2c>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	0800305d 	.word	0x0800305d
 8003030:	08003065 	.word	0x08003065
 8003034:	0800306d 	.word	0x0800306d
 8003038:	08003075 	.word	0x08003075
 800303c:	0800307d 	.word	0x0800307d
 8003040:	08003085 	.word	0x08003085
 8003044:	0800308d 	.word	0x0800308d
 8003048:	08003095 	.word	0x08003095
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030a5 	.word	0x080030a5
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030b5 	.word	0x080030b5
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	e02f      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
      break;
 800306a:	e02b      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
      break;
 8003072:	e027      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2203      	movs	r2, #3
 8003078:	701a      	strb	r2, [r3, #0]
      break;
 800307a:	e023      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2204      	movs	r2, #4
 8003080:	701a      	strb	r2, [r3, #0]
      break;
 8003082:	e01f      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2205      	movs	r2, #5
 8003088:	701a      	strb	r2, [r3, #0]
      break;
 800308a:	e01b      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2206      	movs	r2, #6
 8003090:	701a      	strb	r2, [r3, #0]
      break;
 8003092:	e017      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2207      	movs	r2, #7
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	e013      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
      break;
 80030a2:	e00f      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2209      	movs	r2, #9
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e00b      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	220a      	movs	r2, #10
 80030b0:	701a      	strb	r2, [r3, #0]
      break;
 80030b2:	e007      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	220b      	movs	r2, #11
 80030b8:	701a      	strb	r2, [r3, #0]
      break;
 80030ba:	e003      	b.n	80030c4 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
      break;
 80030c2:	bf00      	nop
  }

  return ret;
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80030dc:	f107 0208 	add.w	r2, r7, #8
 80030e0:	2301      	movs	r3, #1
 80030e2:	2111      	movs	r1, #17
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fe01 	bl	8002cec <lsm6dso_read_reg>
 80030ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	7a3b      	ldrb	r3, [r7, #8]
 80030fc:	f362 0343 	bfi	r3, r2, #1, #3
 8003100:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003102:	f107 0208 	add.w	r2, r7, #8
 8003106:	2301      	movs	r3, #1
 8003108:	2111      	movs	r1, #17
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fe06 	bl	8002d1c <lsm6dso_write_reg>
 8003110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003126:	f107 0208 	add.w	r2, r7, #8
 800312a:	2301      	movs	r3, #1
 800312c:	2111      	movs	r1, #17
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fddc 	bl	8002cec <lsm6dso_read_reg>
 8003134:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8003136:	7a3b      	ldrb	r3, [r7, #8]
 8003138:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b06      	cmp	r3, #6
 8003140:	d824      	bhi.n	800318c <lsm6dso_gy_full_scale_get+0x70>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <lsm6dso_gy_full_scale_get+0x2c>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	08003165 	.word	0x08003165
 800314c:	0800316d 	.word	0x0800316d
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318d 	.word	0x0800318d
 8003158:	0800317d 	.word	0x0800317d
 800315c:	0800318d 	.word	0x0800318d
 8003160:	08003185 	.word	0x08003185
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e013      	b.n	8003194 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
      break;
 8003172:	e00f      	b.n	8003194 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
      break;
 800317a:	e00b      	b.n	8003194 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	701a      	strb	r2, [r3, #0]
      break;
 8003182:	e007      	b.n	8003194 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2206      	movs	r2, #6
 8003188:	701a      	strb	r2, [r3, #0]
      break;
 800318a:	e003      	b.n	8003194 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
      break;
 8003192:	bf00      	nop
  }

  return ret;
 8003194:	68fb      	ldr	r3, [r7, #12]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop

080031a0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fca6 	bl	8003b08 <lsm6dso_fsm_enable_get>
 80031bc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 80c4 	bne.w	800334e <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80031c6:	7b3b      	ldrb	r3, [r7, #12]
 80031c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80031ce:	7b3b      	ldrb	r3, [r7, #12]
 80031d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031d4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80031da:	7b3b      	ldrb	r3, [r7, #12]
 80031dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80031e6:	7b3b      	ldrb	r3, [r7, #12]
 80031e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80031f2:	7b3b      	ldrb	r3, [r7, #12]
 80031f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80031fe:	7b3b      	ldrb	r3, [r7, #12]
 8003200:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003204:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003206:	4313      	orrs	r3, r2
 8003208:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800320a:	7b3b      	ldrb	r3, [r7, #12]
 800320c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003210:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003212:	4313      	orrs	r3, r2
 8003214:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003216:	7b3b      	ldrb	r3, [r7, #12]
 8003218:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800321c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800321e:	4313      	orrs	r3, r2
 8003220:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003222:	7b7b      	ldrb	r3, [r7, #13]
 8003224:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800322a:	4313      	orrs	r3, r2
 800322c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003234:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003236:	4313      	orrs	r3, r2
 8003238:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800323a:	7b7b      	ldrb	r3, [r7, #13]
 800323c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003240:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003242:	4313      	orrs	r3, r2
 8003244:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003246:	7b7b      	ldrb	r3, [r7, #13]
 8003248:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800324c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800324e:	4313      	orrs	r3, r2
 8003250:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003252:	7b7b      	ldrb	r3, [r7, #13]
 8003254:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800325a:	4313      	orrs	r3, r2
 800325c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800325e:	7b7b      	ldrb	r3, [r7, #13]
 8003260:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003264:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003266:	4313      	orrs	r3, r2
 8003268:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800326a:	7b7b      	ldrb	r3, [r7, #13]
 800326c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003270:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003272:	4313      	orrs	r3, r2
 8003274:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003276:	7b7b      	ldrb	r3, [r7, #13]
 8003278:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800327c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800327e:	4313      	orrs	r3, r2
 8003280:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003282:	2b01      	cmp	r3, #1
 8003284:	d163      	bne.n	800334e <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8003286:	f107 030b 	add.w	r3, r7, #11
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fc5d 	bl	8003b4c <lsm6dso_fsm_data_rate_get>
 8003292:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d159      	bne.n	800334e <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d853      	bhi.n	8003348 <lsm6dso_gy_data_rate_set+0x1a8>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <lsm6dso_gy_data_rate_set+0x108>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032cb 	.word	0x080032cb
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	08003313 	.word	0x08003313
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80032c2:	e045      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	75fb      	strb	r3, [r7, #23]
            break;
 80032c8:	e042      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80032d0:	2302      	movs	r3, #2
 80032d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80032d4:	e03c      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80032dc:	2302      	movs	r3, #2
 80032de:	75fb      	strb	r3, [r7, #23]
            break;
 80032e0:	e036      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	75fb      	strb	r3, [r7, #23]
            break;
 80032e6:	e033      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80032ee:	2303      	movs	r3, #3
 80032f0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80032f2:	e02d      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80032fa:	2303      	movs	r3, #3
 80032fc:	75fb      	strb	r3, [r7, #23]
            break;
 80032fe:	e027      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d102      	bne.n	800330c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003306:	2303      	movs	r3, #3
 8003308:	75fb      	strb	r3, [r7, #23]
            break;
 800330a:	e021      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	75fb      	strb	r3, [r7, #23]
            break;
 8003310:	e01e      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003318:	2304      	movs	r3, #4
 800331a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800331c:	e018      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003324:	2304      	movs	r3, #4
 8003326:	75fb      	strb	r3, [r7, #23]
            break;
 8003328:	e012      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d102      	bne.n	8003336 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003330:	2304      	movs	r3, #4
 8003332:	75fb      	strb	r3, [r7, #23]
            break;
 8003334:	e00c      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d102      	bne.n	8003342 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800333c:	2304      	movs	r3, #4
 800333e:	75fb      	strb	r3, [r7, #23]
            break;
 8003340:	e006      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	75fb      	strb	r3, [r7, #23]
            break;
 8003346:	e003      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	75fb      	strb	r3, [r7, #23]
            break;
 800334c:	e000      	b.n	8003350 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800334e:	bf00      	nop
    }
  }

  if (ret == 0)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003356:	f107 0208 	add.w	r2, r7, #8
 800335a:	2301      	movs	r3, #1
 800335c:	2111      	movs	r1, #17
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fcc4 	bl	8002cec <lsm6dso_read_reg>
 8003364:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	b2da      	uxtb	r2, r3
 8003374:	7a3b      	ldrb	r3, [r7, #8]
 8003376:	f362 1307 	bfi	r3, r2, #4, #4
 800337a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800337c:	f107 0208 	add.w	r2, r7, #8
 8003380:	2301      	movs	r3, #1
 8003382:	2111      	movs	r1, #17
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff fcc9 	bl	8002d1c <lsm6dso_write_reg>
 800338a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800338c:	693b      	ldr	r3, [r7, #16]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop

08003398 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80033a2:	f107 0208 	add.w	r2, r7, #8
 80033a6:	2301      	movs	r3, #1
 80033a8:	2111      	movs	r1, #17
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fc9e 	bl	8002cec <lsm6dso_read_reg>
 80033b0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80033b2:	7a3b      	ldrb	r3, [r7, #8]
 80033b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b0a      	cmp	r3, #10
 80033bc:	d844      	bhi.n	8003448 <lsm6dso_gy_data_rate_get+0xb0>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <lsm6dso_gy_data_rate_get+0x2c>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	080033f9 	.word	0x080033f9
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003409 	.word	0x08003409
 80033d4:	08003411 	.word	0x08003411
 80033d8:	08003419 	.word	0x08003419
 80033dc:	08003421 	.word	0x08003421
 80033e0:	08003429 	.word	0x08003429
 80033e4:	08003431 	.word	0x08003431
 80033e8:	08003439 	.word	0x08003439
 80033ec:	08003441 	.word	0x08003441
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
      break;
 80033f6:	e02b      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
      break;
 80033fe:	e027      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
      break;
 8003406:	e023      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2203      	movs	r2, #3
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e01f      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2204      	movs	r2, #4
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e01b      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2205      	movs	r2, #5
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e017      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2206      	movs	r2, #6
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	e013      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2207      	movs	r2, #7
 800342c:	701a      	strb	r2, [r3, #0]
      break;
 800342e:	e00f      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2208      	movs	r2, #8
 8003434:	701a      	strb	r2, [r3, #0]
      break;
 8003436:	e00b      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2209      	movs	r2, #9
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	e007      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	220a      	movs	r2, #10
 8003444:	701a      	strb	r2, [r3, #0]
      break;
 8003446:	e003      	b.n	8003450 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
      break;
 800344e:	bf00      	nop
  }

  return ret;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop

0800345c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003468:	f107 0208 	add.w	r2, r7, #8
 800346c:	2301      	movs	r3, #1
 800346e:	2112      	movs	r1, #18
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fc3b 	bl	8002cec <lsm6dso_read_reg>
 8003476:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	7a3b      	ldrb	r3, [r7, #8]
 8003488:	f362 1386 	bfi	r3, r2, #6, #1
 800348c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800348e:	f107 0208 	add.w	r2, r7, #8
 8003492:	2301      	movs	r3, #1
 8003494:	2112      	movs	r1, #18
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fc40 	bl	8002d1c <lsm6dso_write_reg>
 800349c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80034b2:	f107 020c 	add.w	r2, r7, #12
 80034b6:	2306      	movs	r3, #6
 80034b8:	2122      	movs	r1, #34	; 0x22
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fc16 	bl	8002cec <lsm6dso_read_reg>
 80034c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80034c2:	7b7b      	ldrb	r3, [r7, #13]
 80034c4:	b21a      	sxth	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	7b3b      	ldrb	r3, [r7, #12]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4413      	add	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b21a      	sxth	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3302      	adds	r3, #2
 80034ea:	b212      	sxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	3302      	adds	r3, #2
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4413      	add	r3, r2
 8003502:	b29a      	uxth	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	3302      	adds	r3, #2
 8003508:	b212      	sxth	r2, r2
 800350a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800350c:	7c7a      	ldrb	r2, [r7, #17]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	b212      	sxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3304      	adds	r3, #4
 800351a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351e:	b29b      	uxth	r3, r3
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b29a      	uxth	r2, r3
 8003524:	7c3b      	ldrb	r3, [r7, #16]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4413      	add	r3, r2
 800352a:	b29a      	uxth	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3304      	adds	r3, #4
 8003530:	b212      	sxth	r2, r2
 8003532:	801a      	strh	r2, [r3, #0]

  return ret;
 8003534:	697b      	ldr	r3, [r7, #20]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8003548:	f107 020c 	add.w	r2, r7, #12
 800354c:	2306      	movs	r3, #6
 800354e:	2128      	movs	r1, #40	; 0x28
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fbcb 	bl	8002cec <lsm6dso_read_reg>
 8003556:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	b21a      	sxth	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003566:	b29b      	uxth	r3, r3
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	b29a      	uxth	r2, r3
 800356c:	7b3b      	ldrb	r3, [r7, #12]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4413      	add	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21a      	sxth	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	3302      	adds	r3, #2
 8003580:	b212      	sxth	r2, r2
 8003582:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	3302      	adds	r3, #2
 8003588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800358c:	b29b      	uxth	r3, r3
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	b29a      	uxth	r2, r3
 8003592:	7bbb      	ldrb	r3, [r7, #14]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4413      	add	r3, r2
 8003598:	b29a      	uxth	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3302      	adds	r3, #2
 800359e:	b212      	sxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80035a2:	7c7a      	ldrb	r2, [r7, #17]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	3304      	adds	r3, #4
 80035a8:	b212      	sxth	r2, r2
 80035aa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3304      	adds	r3, #4
 80035b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	7c3b      	ldrb	r3, [r7, #16]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4413      	add	r3, r2
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	b212      	sxth	r2, r2
 80035c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <lsm6dso_number_of_steps_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_number_of_steps_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80035de:	2102      	movs	r1, #2
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f857 	bl	8003694 <lsm6dso_mem_bank_set>
 80035e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <lsm6dso_number_of_steps_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_STEP_COUNTER_L, buff, 2);
 80035ee:	f107 0208 	add.w	r2, r7, #8
 80035f2:	2302      	movs	r3, #2
 80035f4:	2162      	movs	r1, #98	; 0x62
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fb78 	bl	8002cec <lsm6dso_read_reg>
 80035fc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d112      	bne.n	800362a <lsm6dso_number_of_steps_get+0x56>
  {
    *val = buff[1];
 8003604:	7a7b      	ldrb	r3, [r7, #9]
 8003606:	b29a      	uxth	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  buff[0];
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	b29a      	uxth	r2, r3
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4413      	add	r3, r2
 800361a:	b29a      	uxth	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	801a      	strh	r2, [r3, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003620:	2100      	movs	r1, #0
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f836 	bl	8003694 <lsm6dso_mem_bank_set>
 8003628:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <lsm6dso_steps_reset>:
  * @param  ctx      read / write interface definitions
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_steps_reset(stmdev_ctx_t *ctx)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  lsm6dso_emb_func_src_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800363c:	2102      	movs	r1, #2
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f828 	bl	8003694 <lsm6dso_mem_bank_set>
 8003644:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <lsm6dso_steps_reset+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&reg, 1);
 800364c:	f107 0208 	add.w	r2, r7, #8
 8003650:	2301      	movs	r3, #1
 8003652:	2164      	movs	r1, #100	; 0x64
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fb49 	bl	8002cec <lsm6dso_read_reg>
 800365a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <lsm6dso_steps_reset+0x46>
  {
    reg.pedo_rst_step = PROPERTY_ENABLE;
 8003662:	7a3b      	ldrb	r3, [r7, #8]
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&reg, 1);
 800366a:	f107 0208 	add.w	r2, r7, #8
 800366e:	2301      	movs	r3, #1
 8003670:	2164      	movs	r1, #100	; 0x64
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fb52 	bl	8002d1c <lsm6dso_write_reg>
 8003678:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <lsm6dso_steps_reset+0x56>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003680:	2100      	movs	r1, #0
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f806 	bl	8003694 <lsm6dso_mem_bank_set>
 8003688:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80036a0:	f107 0208 	add.w	r2, r7, #8
 80036a4:	2301      	movs	r3, #1
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff fb1f 	bl	8002cec <lsm6dso_read_reg>
 80036ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	7a3b      	ldrb	r3, [r7, #8]
 80036c0:	f362 1387 	bfi	r3, r2, #6, #2
 80036c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	2301      	movs	r3, #1
 80036cc:	2101      	movs	r1, #1
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fb24 	bl	8002d1c <lsm6dso_write_reg>
 80036d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <lsm6dso_ln_pg_write_byte>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_ln_pg_write_byte(stmdev_ctx_t *ctx, uint16_t address,
                                 uint8_t *val)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	460b      	mov	r3, r1
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	817b      	strh	r3, [r7, #10]
  lsm6dso_page_rw_t page_rw;
  lsm6dso_page_sel_t page_sel;
  lsm6dso_page_address_t page_address;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80036ee:	2102      	movs	r1, #2
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ffcf 	bl	8003694 <lsm6dso_mem_bank_set>
 80036f6:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <lsm6dso_ln_pg_write_byte+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 80036fe:	f107 0218 	add.w	r2, r7, #24
 8003702:	2301      	movs	r3, #1
 8003704:	2117      	movs	r1, #23
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff faf0 	bl	8002cec <lsm6dso_read_reg>
 800370c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10c      	bne.n	800372e <lsm6dso_ln_pg_write_byte+0x4e>
  {
    page_rw.page_rw = 0x02; /* page_write enable */
 8003714:	7e3b      	ldrb	r3, [r7, #24]
 8003716:	2202      	movs	r2, #2
 8003718:	f362 1346 	bfi	r3, r2, #5, #2
 800371c:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 800371e:	f107 0218 	add.w	r2, r7, #24
 8003722:	2301      	movs	r3, #1
 8003724:	2117      	movs	r1, #23
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff faf8 	bl	8002d1c <lsm6dso_write_reg>
 800372c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <lsm6dso_ln_pg_write_byte+0x64>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel, 1);
 8003734:	f107 0214 	add.w	r2, r7, #20
 8003738:	2301      	movs	r3, #1
 800373a:	2102      	movs	r1, #2
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fad5 	bl	8002cec <lsm6dso_read_reg>
 8003742:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <lsm6dso_ln_pg_write_byte+0x98>
  {
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b29b      	uxth	r3, r3
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	7d3b      	ldrb	r3, [r7, #20]
 8003758:	f362 1307 	bfi	r3, r2, #4, #4
 800375c:	753b      	strb	r3, [r7, #20]
    page_sel.not_used_01 = 1;
 800375e:	7d3b      	ldrb	r3, [r7, #20]
 8003760:	2201      	movs	r2, #1
 8003762:	f362 0303 	bfi	r3, r2, #0, #4
 8003766:	753b      	strb	r3, [r7, #20]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel, 1);
 8003768:	f107 0214 	add.w	r2, r7, #20
 800376c:	2301      	movs	r3, #1
 800376e:	2102      	movs	r1, #2
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fad3 	bl	8002d1c <lsm6dso_write_reg>
 8003776:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <lsm6dso_ln_pg_write_byte+0xb4>
  {
    page_address.page_addr = (uint8_t)address & 0xFFU;
 800377e:	897b      	ldrh	r3, [r7, #10]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
 8003784:	f107 0210 	add.w	r2, r7, #16
 8003788:	2301      	movs	r3, #1
 800378a:	2108      	movs	r1, #8
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff fac5 	bl	8002d1c <lsm6dso_write_reg>
 8003792:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <lsm6dso_ln_pg_write_byte+0xc8>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_VALUE, val, 1);
 800379a:	2301      	movs	r3, #1
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	2109      	movs	r1, #9
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff fabb 	bl	8002d1c <lsm6dso_write_reg>
 80037a6:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <lsm6dso_ln_pg_write_byte+0xde>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 80037ae:	f107 0218 	add.w	r2, r7, #24
 80037b2:	2301      	movs	r3, #1
 80037b4:	2117      	movs	r1, #23
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fa98 	bl	8002cec <lsm6dso_read_reg>
 80037bc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <lsm6dso_ln_pg_write_byte+0xfc>
  {
    page_rw.page_rw = 0x00; /* page_write disable */
 80037c4:	7e3b      	ldrb	r3, [r7, #24]
 80037c6:	f36f 1346 	bfc	r3, #5, #2
 80037ca:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 80037cc:	f107 0218 	add.w	r2, r7, #24
 80037d0:	2301      	movs	r3, #1
 80037d2:	2117      	movs	r1, #23
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff faa1 	bl	8002d1c <lsm6dso_write_reg>
 80037da:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <lsm6dso_ln_pg_write_byte+0x10c>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80037e2:	2100      	movs	r1, #0
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff55 	bl	8003694 <lsm6dso_mem_bank_set>
 80037ea:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80037ec:	69fb      	ldr	r3, [r7, #28]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <lsm6dso_ln_pg_read_byte>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_ln_pg_read_byte(stmdev_ctx_t *ctx, uint16_t address,
                                uint8_t *val)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	460b      	mov	r3, r1
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	817b      	strh	r3, [r7, #10]
  lsm6dso_page_rw_t page_rw;
  lsm6dso_page_sel_t page_sel;
  lsm6dso_page_address_t  page_address;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003804:	2102      	movs	r1, #2
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ff44 	bl	8003694 <lsm6dso_mem_bank_set>
 800380c:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <lsm6dso_ln_pg_read_byte+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 8003814:	f107 0218 	add.w	r2, r7, #24
 8003818:	2301      	movs	r3, #1
 800381a:	2117      	movs	r1, #23
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fa65 	bl	8002cec <lsm6dso_read_reg>
 8003822:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <lsm6dso_ln_pg_read_byte+0x4e>
  {
    page_rw.page_rw = 0x01; /* page_read enable*/
 800382a:	7e3b      	ldrb	r3, [r7, #24]
 800382c:	2201      	movs	r2, #1
 800382e:	f362 1346 	bfi	r3, r2, #5, #2
 8003832:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 8003834:	f107 0218 	add.w	r2, r7, #24
 8003838:	2301      	movs	r3, #1
 800383a:	2117      	movs	r1, #23
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fa6d 	bl	8002d1c <lsm6dso_write_reg>
 8003842:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <lsm6dso_ln_pg_read_byte+0x64>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel, 1);
 800384a:	f107 0214 	add.w	r2, r7, #20
 800384e:	2301      	movs	r3, #1
 8003850:	2102      	movs	r1, #2
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fa4a 	bl	8002cec <lsm6dso_read_reg>
 8003858:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <lsm6dso_ln_pg_read_byte+0x98>
  {
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 8003860:	897b      	ldrh	r3, [r7, #10]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	b2da      	uxtb	r2, r3
 800386c:	7d3b      	ldrb	r3, [r7, #20]
 800386e:	f362 1307 	bfi	r3, r2, #4, #4
 8003872:	753b      	strb	r3, [r7, #20]
    page_sel.not_used_01 = 1;
 8003874:	7d3b      	ldrb	r3, [r7, #20]
 8003876:	2201      	movs	r2, #1
 8003878:	f362 0303 	bfi	r3, r2, #0, #4
 800387c:	753b      	strb	r3, [r7, #20]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel, 1);
 800387e:	f107 0214 	add.w	r2, r7, #20
 8003882:	2301      	movs	r3, #1
 8003884:	2102      	movs	r1, #2
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff fa48 	bl	8002d1c <lsm6dso_write_reg>
 800388c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <lsm6dso_ln_pg_read_byte+0xb4>
  {
    page_address.page_addr = (uint8_t)address & 0x00FFU;
 8003894:	897b      	ldrh	r3, [r7, #10]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
 800389a:	f107 0210 	add.w	r2, r7, #16
 800389e:	2301      	movs	r3, #1
 80038a0:	2108      	movs	r1, #8
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fa3a 	bl	8002d1c <lsm6dso_write_reg>
 80038a8:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <lsm6dso_ln_pg_read_byte+0xc8>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_VALUE, val, 1);
 80038b0:	2301      	movs	r3, #1
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	2109      	movs	r1, #9
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fa18 	bl	8002cec <lsm6dso_read_reg>
 80038bc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <lsm6dso_ln_pg_read_byte+0xde>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 80038c4:	f107 0218 	add.w	r2, r7, #24
 80038c8:	2301      	movs	r3, #1
 80038ca:	2117      	movs	r1, #23
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fa0d 	bl	8002cec <lsm6dso_read_reg>
 80038d2:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <lsm6dso_ln_pg_read_byte+0xfc>
  {
    page_rw.page_rw = 0x00; /* page_read disable */
 80038da:	7e3b      	ldrb	r3, [r7, #24]
 80038dc:	f36f 1346 	bfc	r3, #5, #2
 80038e0:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
 80038e2:	f107 0218 	add.w	r2, r7, #24
 80038e6:	2301      	movs	r3, #1
 80038e8:	2117      	movs	r1, #23
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fa16 	bl	8002d1c <lsm6dso_write_reg>
 80038f0:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <lsm6dso_ln_pg_read_byte+0x10c>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80038f8:	2100      	movs	r1, #0
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff feca 	bl	8003694 <lsm6dso_mem_bank_set>
 8003900:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8003902:	69fb      	ldr	r3, [r7, #28]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8003916:	2301      	movs	r3, #1
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	210f      	movs	r1, #15
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff f9e5 	bl	8002cec <lsm6dso_read_reg>
 8003922:	60f8      	str	r0, [r7, #12]

  return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800393a:	f107 0208 	add.w	r2, r7, #8
 800393e:	2301      	movs	r3, #1
 8003940:	2112      	movs	r1, #18
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f9d2 	bl	8002cec <lsm6dso_read_reg>
 8003948:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	7a3b      	ldrb	r3, [r7, #8]
 800395a:	f362 0382 	bfi	r3, r2, #2, #1
 800395e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003960:	f107 0208 	add.w	r2, r7, #8
 8003964:	2301      	movs	r3, #1
 8003966:	2112      	movs	r1, #18
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff f9d7 	bl	8002d1c <lsm6dso_write_reg>
 800396e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003970:	68fb      	ldr	r3, [r7, #12]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003986:	f107 020c 	add.w	r2, r7, #12
 800398a:	2301      	movs	r3, #1
 800398c:	2118      	movs	r1, #24
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff f9ac 	bl	8002cec <lsm6dso_read_reg>
 8003994:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	09db      	lsrs	r3, r3, #7
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	7b3b      	ldrb	r3, [r7, #12]
 80039aa:	f362 0341 	bfi	r3, r2, #1, #1
 80039ae:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80039b0:	f107 020c 	add.w	r2, r7, #12
 80039b4:	2301      	movs	r3, #1
 80039b6:	2118      	movs	r1, #24
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff f9af 	bl	8002d1c <lsm6dso_write_reg>
 80039be:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80039c6:	f107 0210 	add.w	r2, r7, #16
 80039ca:	2301      	movs	r3, #1
 80039cc:	2162      	movs	r1, #98	; 0x62
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff f98c 	bl	8002cec <lsm6dso_read_reg>
 80039d4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10f      	bne.n	80039fc <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	7c3b      	ldrb	r3, [r7, #16]
 80039e6:	f362 03c4 	bfi	r3, r2, #3, #2
 80039ea:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80039ec:	f107 0210 	add.w	r2, r7, #16
 80039f0:	2301      	movs	r3, #1
 80039f2:	2162      	movs	r1, #98	; 0x62
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff f991 	bl	8002d1c <lsm6dso_write_reg>
 80039fa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003a12:	f107 0208 	add.w	r2, r7, #8
 8003a16:	2301      	movs	r3, #1
 8003a18:	210a      	movs	r1, #10
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff f966 	bl	8002cec <lsm6dso_read_reg>
 8003a20:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	7a3b      	ldrb	r3, [r7, #8]
 8003a32:	f362 0302 	bfi	r3, r2, #0, #3
 8003a36:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003a38:	f107 0208 	add.w	r2, r7, #8
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	210a      	movs	r1, #10
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff f96b 	bl	8002d1c <lsm6dso_write_reg>
 8003a46:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <lsm6dso_pedo_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pedo_sens_set(stmdev_ctx_t *ctx,
                              lsm6dso_pedo_md_t val)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dso_ln_pg_read_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	461a      	mov	r2, r3
 8003a64:	f240 1183 	movw	r1, #387	; 0x183
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fec4 	bl	80037f6 <lsm6dso_ln_pg_read_byte>
 8003a6e:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&pedo_cmd_reg);

  if (ret == 0)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11a      	bne.n	8003aac <lsm6dso_pedo_sens_set+0x5a>
  {
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x10U) >> 4;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	7a3b      	ldrb	r3, [r7, #8]
 8003a82:	f362 0382 	bfi	r3, r2, #2, #1
 8003a86:	723b      	strb	r3, [r7, #8]
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U) >> 5;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	7a3b      	ldrb	r3, [r7, #8]
 8003a94:	f362 0300 	bfi	r3, r2, #0, #1
 8003a98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f240 1183 	movw	r1, #387	; 0x183
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fe1b 	bl	80036e0 <lsm6dso_ln_pg_write_byte>
 8003aaa:	60f8      	str	r0, [r7, #12]
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <lsm6dso_tilt_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fde6 	bl	8003694 <lsm6dso_mem_bank_set>
 8003ac8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <lsm6dso_tilt_flag_data_ready_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t *)&reg, 1);
 8003ad0:	f107 0208 	add.w	r2, r7, #8
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2112      	movs	r1, #18
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff f907 	bl	8002cec <lsm6dso_read_reg>
 8003ade:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <lsm6dso_tilt_flag_data_ready_get+0x48>
  {
    *val = reg.is_tilt;
 8003ae6:	7a3b      	ldrb	r3, [r7, #8]
 8003ae8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003af4:	2100      	movs	r1, #0
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fdcc 	bl	8003694 <lsm6dso_mem_bank_set>
 8003afc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003b12:	2102      	movs	r1, #2
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fdbd 	bl	8003694 <lsm6dso_mem_bank_set>
 8003b1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003b22:	2302      	movs	r3, #2
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	2146      	movs	r1, #70	; 0x46
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff f8df 	bl	8002cec <lsm6dso_read_reg>
 8003b2e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003b36:	2100      	movs	r1, #0
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fdab 	bl	8003694 <lsm6dso_mem_bank_set>
 8003b3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003b56:	2102      	movs	r1, #2
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fd9b 	bl	8003694 <lsm6dso_mem_bank_set>
 8003b5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8003b66:	f107 0208 	add.w	r2, r7, #8
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	215f      	movs	r1, #95	; 0x5f
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff f8bc 	bl	8002cec <lsm6dso_read_reg>
 8003b74:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d12a      	bne.n	8003bd2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8003b7c:	7a3b      	ldrb	r3, [r7, #8]
 8003b7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d81b      	bhi.n	8003bc0 <lsm6dso_fsm_data_rate_get+0x74>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <lsm6dso_fsm_data_rate_get+0x44>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003ba9 	.word	0x08003ba9
 8003b98:	08003bb1 	.word	0x08003bb1
 8003b9c:	08003bb9 	.word	0x08003bb9
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
        break;
 8003ba6:	e00f      	b.n	8003bc8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
        break;
 8003bae:	e00b      	b.n	8003bc8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	701a      	strb	r2, [r3, #0]
        break;
 8003bb6:	e007      	b.n	8003bc8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	701a      	strb	r2, [r3, #0]
        break;
 8003bbe:	e003      	b.n	8003bc8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
        break;
 8003bc6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fd62 	bl	8003694 <lsm6dso_mem_bank_set>
 8003bd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b090      	sub	sp, #64	; 0x40
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_tap_cfg2_t        tap_cfg2;
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8003bea:	793b      	ldrb	r3, [r7, #4]
 8003bec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bf6:	f362 0300 	bfi	r3, r2, #0, #1
 8003bfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8003bfe:	793b      	ldrb	r3, [r7, #4]
 8003c00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c0a:	f362 0341 	bfi	r3, r2, #1, #1
 8003c0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_boot      = val.boot;
 8003c12:	793b      	ldrb	r3, [r7, #4]
 8003c14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c1e:	f362 0382 	bfi	r3, r2, #2, #1
 8003c22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8003c26:	793b      	ldrb	r3, [r7, #4]
 8003c28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c32:	f362 03c3 	bfi	r3, r2, #3, #1
 8003c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8003c3a:	793b      	ldrb	r3, [r7, #4]
 8003c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c46:	f362 1304 	bfi	r3, r2, #4, #1
 8003c4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8003c4e:	793b      	ldrb	r3, [r7, #4]
 8003c50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c5a:	f362 1345 	bfi	r3, r2, #5, #1
 8003c5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8003c62:	793b      	ldrb	r3, [r7, #4]
 8003c64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c6e:	f362 1386 	bfi	r3, r2, #6, #1
 8003c72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8003c76:	797b      	ldrb	r3, [r7, #5]
 8003c78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c82:	f362 13c7 	bfi	r3, r2, #7, #1
 8003c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  md1_cfg.int1_shub         = val.sh_endop;
 8003c8a:	797b      	ldrb	r3, [r7, #5]
 8003c8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	7d3b      	ldrb	r3, [r7, #20]
 8003c94:	f362 0300 	bfi	r3, r2, #0, #1
 8003c98:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 8003c9a:	797b      	ldrb	r3, [r7, #5]
 8003c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	7d3b      	ldrb	r3, [r7, #20]
 8003ca4:	f362 0382 	bfi	r3, r2, #2, #1
 8003ca8:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 8003caa:	797b      	ldrb	r3, [r7, #5]
 8003cac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	7d3b      	ldrb	r3, [r7, #20]
 8003cb4:	f362 03c3 	bfi	r3, r2, #3, #1
 8003cb8:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 8003cba:	797b      	ldrb	r3, [r7, #5]
 8003cbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	7d3b      	ldrb	r3, [r7, #20]
 8003cc4:	f362 1304 	bfi	r3, r2, #4, #1
 8003cc8:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 8003cca:	797b      	ldrb	r3, [r7, #5]
 8003ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	7d3b      	ldrb	r3, [r7, #20]
 8003cd4:	f362 1345 	bfi	r3, r2, #5, #1
 8003cd8:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 8003cda:	797b      	ldrb	r3, [r7, #5]
 8003cdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	7d3b      	ldrb	r3, [r7, #20]
 8003ce4:	f362 1386 	bfi	r3, r2, #6, #1
 8003ce8:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8003cea:	79bb      	ldrb	r3, [r7, #6]
 8003cec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	7d3b      	ldrb	r3, [r7, #20]
 8003cf4:	f362 13c7 	bfi	r3, r2, #7, #1
 8003cf8:	753b      	strb	r3, [r7, #20]
  emb_func_int1.not_used_01 = 0;
 8003cfa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cfe:	f36f 0302 	bfc	r3, #0, #3
 8003d02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8003d06:	79bb      	ldrb	r3, [r7, #6]
 8003d08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d12:	f362 03c3 	bfi	r3, r2, #3, #1
 8003d16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8003d1a:	79bb      	ldrb	r3, [r7, #6]
 8003d1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d26:	f362 1304 	bfi	r3, r2, #4, #1
 8003d2a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d3a:	f362 1345 	bfi	r3, r2, #5, #1
 8003d3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  emb_func_int1.not_used_02 = 0;
 8003d42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d46:	f36f 1386 	bfc	r3, #6, #1
 8003d4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8003d4e:	79bb      	ldrb	r3, [r7, #6]
 8003d50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d5a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8003d62:	79bb      	ldrb	r3, [r7, #6]
 8003d64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d6e:	f362 0300 	bfi	r3, r2, #0, #1
 8003d72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d82:	f362 0341 	bfi	r3, r2, #1, #1
 8003d86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8003d8a:	79bb      	ldrb	r3, [r7, #6]
 8003d8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d96:	f362 0382 	bfi	r3, r2, #2, #1
 8003d9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003daa:	f362 03c3 	bfi	r3, r2, #3, #1
 8003dae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003dbe:	f362 1304 	bfi	r3, r2, #4, #1
 8003dc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003dd2:	f362 1345 	bfi	r3, r2, #5, #1
 8003dd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003de6:	f362 1386 	bfi	r3, r2, #6, #1
 8003dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003dfa:	f362 13c7 	bfi	r3, r2, #7, #1
 8003dfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e0e:	f362 0300 	bfi	r3, r2, #0, #1
 8003e12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e22:	f362 0341 	bfi	r3, r2, #1, #1
 8003e26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e36:	f362 0382 	bfi	r3, r2, #2, #1
 8003e3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8003e3e:	7a3b      	ldrb	r3, [r7, #8]
 8003e40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e4a:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8003e52:	7a3b      	ldrb	r3, [r7, #8]
 8003e54:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e5e:	f362 1304 	bfi	r3, r2, #4, #1
 8003e62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8003e66:	7a3b      	ldrb	r3, [r7, #8]
 8003e68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e72:	f362 1345 	bfi	r3, r2, #5, #1
 8003e76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8003e7a:	7a3b      	ldrb	r3, [r7, #8]
 8003e7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e86:	f362 1386 	bfi	r3, r2, #6, #1
 8003e8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8003e8e:	7a3b      	ldrb	r3, [r7, #8]
 8003e90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e9a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003ea2:	f107 0210 	add.w	r2, r7, #16
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2113      	movs	r1, #19
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7fe ff1e 	bl	8002cec <lsm6dso_read_reg>
 8003eb0:	63f8      	str	r0, [r7, #60]	; 0x3c

  if (ret == 0)
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11c      	bne.n	8003ef2 <lsm6dso_pin_int1_route_set+0x316>
  {
    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8003eb8:	793b      	ldrb	r3, [r7, #4]
 8003eba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	797b      	ldrb	r3, [r7, #5]
 8003ec2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <lsm6dso_pin_int1_route_set+0x2fe>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8003ed0:	7c3b      	ldrb	r3, [r7, #16]
 8003ed2:	f043 0320 	orr.w	r3, r3, #32
 8003ed6:	743b      	strb	r3, [r7, #16]
 8003ed8:	e003      	b.n	8003ee2 <lsm6dso_pin_int1_route_set+0x306>
    }

    else
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8003eda:	7c3b      	ldrb	r3, [r7, #16]
 8003edc:	f36f 1345 	bfc	r3, #5, #1
 8003ee0:	743b      	strb	r3, [r7, #16]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003ee2:	f107 0210 	add.w	r2, r7, #16
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	2113      	movs	r1, #19
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fe ff16 	bl	8002d1c <lsm6dso_write_reg>
 8003ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8003ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <lsm6dso_pin_int1_route_set+0x326>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003ef8:	2102      	movs	r1, #2
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fbca 	bl	8003694 <lsm6dso_mem_bank_set>
 8003f00:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <lsm6dso_pin_int1_route_set+0x33c>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1,
 8003f08:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	210a      	movs	r1, #10
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7fe ff03 	bl	8002d1c <lsm6dso_write_reg>
 8003f16:	63f8      	str	r0, [r7, #60]	; 0x3c
                            (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <lsm6dso_pin_int1_route_set+0x352>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A,
 8003f1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003f22:	2301      	movs	r3, #1
 8003f24:	210b      	movs	r1, #11
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7fe fef8 	bl	8002d1c <lsm6dso_write_reg>
 8003f2c:	63f8      	str	r0, [r7, #60]	; 0x3c
                            (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d107      	bne.n	8003f44 <lsm6dso_pin_int1_route_set+0x368>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B,
 8003f34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f38:	2301      	movs	r3, #1
 8003f3a:	210c      	movs	r1, #12
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fe feed 	bl	8002d1c <lsm6dso_write_reg>
 8003f42:	63f8      	str	r0, [r7, #60]	; 0x3c
                            (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8003f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <lsm6dso_pin_int1_route_set+0x378>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff fba1 	bl	8003694 <lsm6dso_mem_bank_set>
 8003f52:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 809d 	bne.w	8004096 <lsm6dso_pin_int1_route_set+0x4ba>
  {
    if ((emb_func_int1.int1_fsm_lc
 8003f5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f64:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_sig_mot
 8003f66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_step_detector
 8003f74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_tilt
 8003f82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm1
 8003f90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm2
 8003f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fa2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm3
 8003fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm4
 8003fba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm5
 8003fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm6
 8003fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm7
 8003fe4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fe8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm8
 8003ff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ff6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm9
 8004000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004004:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm10
 800400e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004012:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm11
 800401c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004020:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	4313      	orrs	r3, r2
 8004028:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm12
 800402a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800402e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm13
 8004038:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800403c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm14
 8004046:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800404a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4313      	orrs	r3, r2
 8004052:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm15
 8004054:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004058:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8004062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004066:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	b2db      	uxtb	r3, r3
    if ((emb_func_int1.int1_fsm_lc
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <lsm6dso_pin_int1_route_set+0x4a2>
    {
      md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8004074:	7d3b      	ldrb	r3, [r7, #20]
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	753b      	strb	r3, [r7, #20]
 800407c:	e003      	b.n	8004086 <lsm6dso_pin_int1_route_set+0x4aa>
    }

    else
    {
      md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800407e:	7d3b      	ldrb	r3, [r7, #20]
 8004080:	f36f 0341 	bfc	r3, #1, #1
 8004084:	753b      	strb	r3, [r7, #20]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL,
 8004086:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800408a:	2301      	movs	r3, #1
 800408c:	210d      	movs	r1, #13
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7fe fe44 	bl	8002d1c <lsm6dso_write_reg>
 8004094:	63f8      	str	r0, [r7, #60]	; 0x3c
                            (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 8004096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <lsm6dso_pin_int1_route_set+0x4d0>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800409c:	f107 0214 	add.w	r2, r7, #20
 80040a0:	2301      	movs	r3, #1
 80040a2:	215e      	movs	r1, #94	; 0x5e
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7fe fe39 	bl	8002d1c <lsm6dso_write_reg>
 80040aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 80040ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <lsm6dso_pin_int1_route_set+0x4e6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80040b2:	f107 0220 	add.w	r2, r7, #32
 80040b6:	2301      	movs	r3, #1
 80040b8:	210e      	movs	r1, #14
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fe fe16 	bl	8002cec <lsm6dso_read_reg>
 80040c0:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d111      	bne.n	80040ec <lsm6dso_pin_int1_route_set+0x510>
  {
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 80040c8:	793b      	ldrb	r3, [r7, #4]
 80040ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040d4:	f362 0382 	bfi	r3, r2, #2, #1
 80040d8:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80040dc:	f107 0220 	add.w	r2, r7, #32
 80040e0:	2301      	movs	r3, #1
 80040e2:	210e      	movs	r1, #14
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7fe fe19 	bl	8002d1c <lsm6dso_write_reg>
 80040ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <lsm6dso_pin_int1_route_set+0x526>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80040f2:	f107 0218 	add.w	r2, r7, #24
 80040f6:	2301      	movs	r3, #1
 80040f8:	215f      	movs	r1, #95	; 0x5f
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7fe fdf6 	bl	8002cec <lsm6dso_read_reg>
 8004100:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10f      	bne.n	8004128 <lsm6dso_pin_int1_route_set+0x54c>
  {
    md2_cfg.int2_timestamp = val.timestamp;
 8004108:	797b      	ldrb	r3, [r7, #5]
 800410a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	7e3b      	ldrb	r3, [r7, #24]
 8004112:	f362 0300 	bfi	r3, r2, #0, #1
 8004116:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004118:	f107 0218 	add.w	r2, r7, #24
 800411c:	2301      	movs	r3, #1
 800411e:	215f      	movs	r1, #95	; 0x5f
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7fe fdfb 	bl	8002d1c <lsm6dso_write_reg>
 8004126:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <lsm6dso_pin_int1_route_set+0x562>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800412e:	f107 021c 	add.w	r2, r7, #28
 8004132:	2301      	movs	r3, #1
 8004134:	2158      	movs	r1, #88	; 0x58
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7fe fdd8 	bl	8002cec <lsm6dso_read_reg>
 800413c:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 800413e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <lsm6dso_pin_int1_route_set+0x578>
  {
    ret = lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8004144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004148:	461a      	mov	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fab9 	bl	80046c4 <lsm6dso_pin_int2_route_get>
 8004152:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  if (ret == 0)
 8004154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 80ce 	bne.w	80042f8 <lsm6dso_pin_int1_route_set+0x71c>
  {
    if ((pin_int2_route.fifo_bdr
 800415c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004160:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004164:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_g
 8004166:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800416a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_temp
 8004174:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004178:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_xl
 8004182:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004186:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4313      	orrs	r3, r2
 800418e:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_full
 8004190:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004194:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	4313      	orrs	r3, r2
 800419c:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_ovr
 800419e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_th
 80041ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b2da      	uxtb	r2, r3
         | pin_int2_route.six_d
 80041ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b2da      	uxtb	r2, r3
         | pin_int2_route.double_tap
 80041c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b2da      	uxtb	r2, r3
         | pin_int2_route.free_fall
 80041d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b2da      	uxtb	r2, r3
         | pin_int2_route.wake_up
 80041e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b2da      	uxtb	r2, r3
         | pin_int2_route.single_tap
 80041f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b2da      	uxtb	r2, r3
         | pin_int2_route.sleep_change
 8004200:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004204:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	b2da      	uxtb	r2, r3
         | int1_ctrl.den_drdy_flag
 800420e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004212:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_boot
 800421c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004220:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_cnt_bdr
 800422a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800422e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4313      	orrs	r3, r2
 8004236:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_g
 8004238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800423c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4313      	orrs	r3, r2
 8004244:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_xl
 8004246:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800424a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_full
 8004254:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004258:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_ovr
 8004262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004266:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_th
 8004270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004274:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_shub
 800427e:	7d3b      	ldrb	r3, [r7, #20]
 8004280:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_6d
 800428a:	7d3b      	ldrb	r3, [r7, #20]
 800428c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	4313      	orrs	r3, r2
 8004294:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_double_tap
 8004296:	7d3b      	ldrb	r3, [r7, #20]
 8004298:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_ff
 80042a2:	7d3b      	ldrb	r3, [r7, #20]
 80042a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4313      	orrs	r3, r2
 80042ac:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_wu
 80042ae:	7d3b      	ldrb	r3, [r7, #20]
 80042b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_single_tap
 80042ba:	7d3b      	ldrb	r3, [r7, #20]
 80042bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4313      	orrs	r3, r2
 80042c4:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 80042c6:	7d3b      	ldrb	r3, [r7, #20]
 80042c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b2db      	uxtb	r3, r3
    if ((pin_int2_route.fifo_bdr
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <lsm6dso_pin_int1_route_set+0x704>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 80042d6:	7f3b      	ldrb	r3, [r7, #28]
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	773b      	strb	r3, [r7, #28]
 80042de:	e003      	b.n	80042e8 <lsm6dso_pin_int1_route_set+0x70c>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80042e0:	7f3b      	ldrb	r3, [r7, #28]
 80042e2:	f36f 13c7 	bfc	r3, #7, #1
 80042e6:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80042e8:	f107 021c 	add.w	r2, r7, #28
 80042ec:	2301      	movs	r3, #1
 80042ee:	2158      	movs	r1, #88	; 0x58
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7fe fd13 	bl	8002d1c <lsm6dso_write_reg>
 80042f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  }

  return ret;
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3740      	adds	r7, #64	; 0x40
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08c      	sub	sp, #48	; 0x30
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  lsm6dso_int2_ctrl_t       int2_ctrl;
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800430c:	2102      	movs	r1, #2
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff f9c0 	bl	8003694 <lsm6dso_mem_bank_set>
 8004314:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (ret == 0)
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <lsm6dso_pin_int1_route_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1,
 800431c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004320:	2301      	movs	r3, #1
 8004322:	210a      	movs	r1, #10
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fe fce1 	bl	8002cec <lsm6dso_read_reg>
 800432a:	62f8      	str	r0, [r7, #44]	; 0x2c
                           (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <lsm6dso_pin_int1_route_get+0x40>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A,
 8004332:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004336:	2301      	movs	r3, #1
 8004338:	210b      	movs	r1, #11
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fe fcd6 	bl	8002cec <lsm6dso_read_reg>
 8004340:	62f8      	str	r0, [r7, #44]	; 0x2c
                           (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <lsm6dso_pin_int1_route_get+0x56>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B,
 8004348:	f107 0220 	add.w	r2, r7, #32
 800434c:	2301      	movs	r3, #1
 800434e:	210c      	movs	r1, #12
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fe fccb 	bl	8002cec <lsm6dso_read_reg>
 8004356:	62f8      	str	r0, [r7, #44]	; 0x2c
                           (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <lsm6dso_pin_int1_route_get+0x66>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff f997 	bl	8003694 <lsm6dso_mem_bank_set>
 8004366:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <lsm6dso_pin_int1_route_get+0x7c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL,
 800436e:	f107 021c 	add.w	r2, r7, #28
 8004372:	2301      	movs	r3, #1
 8004374:	210d      	movs	r1, #13
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe fcb8 	bl	8002cec <lsm6dso_read_reg>
 800437c:	62f8      	str	r0, [r7, #44]	; 0x2c
                           (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <lsm6dso_pin_int1_route_get+0x92>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8004384:	f107 0210 	add.w	r2, r7, #16
 8004388:	2301      	movs	r3, #1
 800438a:	215e      	movs	r1, #94	; 0x5e
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe fcad 	bl	8002cec <lsm6dso_read_reg>
 8004392:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <lsm6dso_pin_int1_route_get+0xa8>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800439a:	f107 020c 	add.w	r2, r7, #12
 800439e:	2301      	movs	r3, #1
 80043a0:	2113      	movs	r1, #19
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fe fca2 	bl	8002cec <lsm6dso_read_reg>
 80043a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 80043aa:	7b3b      	ldrb	r3, [r7, #12]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d028      	beq.n	8004408 <lsm6dso_pin_int1_route_get+0x106>
  {
    if (ret == 0)
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <lsm6dso_pin_int1_route_get+0xdc>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80043bc:	f107 0218 	add.w	r2, r7, #24
 80043c0:	2301      	movs	r3, #1
 80043c2:	210e      	movs	r1, #14
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fe fc91 	bl	8002cec <lsm6dso_read_reg>
 80043ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80043cc:	7e3b      	ldrb	r3, [r7, #24]
 80043ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043d2:	b2d9      	uxtb	r1, r3
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	7813      	ldrb	r3, [r2, #0]
 80043d8:	f361 0382 	bfi	r3, r1, #2, #1
 80043dc:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11b      	bne.n	800441c <lsm6dso_pin_int1_route_get+0x11a>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80043e4:	f107 0214 	add.w	r2, r7, #20
 80043e8:	2301      	movs	r3, #1
 80043ea:	215f      	movs	r1, #95	; 0x5f
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fe fc7d 	bl	8002cec <lsm6dso_read_reg>
 80043f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      val->timestamp = md2_cfg.int2_timestamp;
 80043f4:	7d3b      	ldrb	r3, [r7, #20]
 80043f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80043fa:	b2d9      	uxtb	r1, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	7853      	ldrb	r3, [r2, #1]
 8004400:	f361 0382 	bfi	r3, r1, #2, #1
 8004404:	7053      	strb	r3, [r2, #1]
 8004406:	e009      	b.n	800441c <lsm6dso_pin_int1_route_get+0x11a>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	7813      	ldrb	r3, [r2, #0]
 800440c:	f36f 0382 	bfc	r3, #2, #1
 8004410:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7853      	ldrb	r3, [r2, #1]
 8004416:	f36f 0382 	bfc	r3, #2, #1
 800441a:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 800441c:	7f3b      	ldrb	r3, [r7, #28]
 800441e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004422:	b2d9      	uxtb	r1, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	7813      	ldrb	r3, [r2, #0]
 8004428:	f361 0300 	bfi	r3, r1, #0, #1
 800442c:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 800442e:	7f3b      	ldrb	r3, [r7, #28]
 8004430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004434:	b2d9      	uxtb	r1, r3
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	7813      	ldrb	r3, [r2, #0]
 800443a:	f361 0341 	bfi	r3, r1, #1, #1
 800443e:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8004440:	7f3b      	ldrb	r3, [r7, #28]
 8004442:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004446:	b2d9      	uxtb	r1, r3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	7813      	ldrb	r3, [r2, #0]
 800444c:	f361 03c3 	bfi	r3, r1, #3, #1
 8004450:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 8004452:	7f3b      	ldrb	r3, [r7, #28]
 8004454:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004458:	b2d9      	uxtb	r1, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	7813      	ldrb	r3, [r2, #0]
 800445e:	f361 1304 	bfi	r3, r1, #4, #1
 8004462:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 8004464:	7f3b      	ldrb	r3, [r7, #28]
 8004466:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800446a:	b2d9      	uxtb	r1, r3
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	7813      	ldrb	r3, [r2, #0]
 8004470:	f361 1345 	bfi	r3, r1, #5, #1
 8004474:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 8004476:	7f3b      	ldrb	r3, [r7, #28]
 8004478:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	7813      	ldrb	r3, [r2, #0]
 8004482:	f361 1386 	bfi	r3, r1, #6, #1
 8004486:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8004488:	7f3b      	ldrb	r3, [r7, #28]
 800448a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800448e:	b2d9      	uxtb	r1, r3
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	7813      	ldrb	r3, [r2, #0]
 8004494:	f361 13c7 	bfi	r3, r1, #7, #1
 8004498:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800449a:	7f3b      	ldrb	r3, [r7, #28]
 800449c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80044a0:	b2d9      	uxtb	r1, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	7853      	ldrb	r3, [r2, #1]
 80044a6:	f361 0300 	bfi	r3, r1, #0, #1
 80044aa:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80044ac:	7c3b      	ldrb	r3, [r7, #16]
 80044ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80044b2:	b2d9      	uxtb	r1, r3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	7853      	ldrb	r3, [r2, #1]
 80044b8:	f361 0341 	bfi	r3, r1, #1, #1
 80044bc:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 80044be:	7c3b      	ldrb	r3, [r7, #16]
 80044c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80044c4:	b2d9      	uxtb	r1, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	7853      	ldrb	r3, [r2, #1]
 80044ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80044ce:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 80044d0:	7c3b      	ldrb	r3, [r7, #16]
 80044d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	7853      	ldrb	r3, [r2, #1]
 80044dc:	f361 1304 	bfi	r3, r1, #4, #1
 80044e0:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 80044e2:	7c3b      	ldrb	r3, [r7, #16]
 80044e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80044e8:	b2d9      	uxtb	r1, r3
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	7853      	ldrb	r3, [r2, #1]
 80044ee:	f361 1345 	bfi	r3, r1, #5, #1
 80044f2:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 80044f4:	7c3b      	ldrb	r3, [r7, #16]
 80044f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80044fa:	b2d9      	uxtb	r1, r3
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	7853      	ldrb	r3, [r2, #1]
 8004500:	f361 1386 	bfi	r3, r1, #6, #1
 8004504:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8004506:	7c3b      	ldrb	r3, [r7, #16]
 8004508:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800450c:	b2d9      	uxtb	r1, r3
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	7853      	ldrb	r3, [r2, #1]
 8004512:	f361 13c7 	bfi	r3, r1, #7, #1
 8004516:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8004518:	7c3b      	ldrb	r3, [r7, #16]
 800451a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800451e:	b2d9      	uxtb	r1, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	7893      	ldrb	r3, [r2, #2]
 8004524:	f361 0300 	bfi	r3, r1, #0, #1
 8004528:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 800452a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800452e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004532:	b2d9      	uxtb	r1, r3
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	7893      	ldrb	r3, [r2, #2]
 8004538:	f361 0341 	bfi	r3, r1, #1, #1
 800453c:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 800453e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004542:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004546:	b2d9      	uxtb	r1, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	7893      	ldrb	r3, [r2, #2]
 800454c:	f361 0382 	bfi	r3, r1, #2, #1
 8004550:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8004552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800455a:	b2d9      	uxtb	r1, r3
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	7893      	ldrb	r3, [r2, #2]
 8004560:	f361 03c3 	bfi	r3, r1, #3, #1
 8004564:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8004566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800456e:	b2d9      	uxtb	r1, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	7893      	ldrb	r3, [r2, #2]
 8004574:	f361 1304 	bfi	r3, r1, #4, #1
 8004578:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 800457a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800457e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004582:	b2d9      	uxtb	r1, r3
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	7893      	ldrb	r3, [r2, #2]
 8004588:	f361 1345 	bfi	r3, r1, #5, #1
 800458c:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 800458e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004592:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004596:	b2d9      	uxtb	r1, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	7893      	ldrb	r3, [r2, #2]
 800459c:	f361 1386 	bfi	r3, r1, #6, #1
 80045a0:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 80045a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045aa:	b2d9      	uxtb	r1, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	7893      	ldrb	r3, [r2, #2]
 80045b0:	f361 13c7 	bfi	r3, r1, #7, #1
 80045b4:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80045b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80045be:	b2d9      	uxtb	r1, r3
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	78d3      	ldrb	r3, [r2, #3]
 80045c4:	f361 0300 	bfi	r3, r1, #0, #1
 80045c8:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 80045ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045d2:	b2d9      	uxtb	r1, r3
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	78d3      	ldrb	r3, [r2, #3]
 80045d8:	f361 0341 	bfi	r3, r1, #1, #1
 80045dc:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 80045de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80045e6:	b2d9      	uxtb	r1, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	78d3      	ldrb	r3, [r2, #3]
 80045ec:	f361 0382 	bfi	r3, r1, #2, #1
 80045f0:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 80045f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80045fa:	b2d9      	uxtb	r1, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	78d3      	ldrb	r3, [r2, #3]
 8004600:	f361 03c3 	bfi	r3, r1, #3, #1
 8004604:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8004606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800460a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800460e:	b2d9      	uxtb	r1, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	78d3      	ldrb	r3, [r2, #3]
 8004614:	f361 1304 	bfi	r3, r1, #4, #1
 8004618:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 800461a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800461e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004622:	b2d9      	uxtb	r1, r3
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	78d3      	ldrb	r3, [r2, #3]
 8004628:	f361 1345 	bfi	r3, r1, #5, #1
 800462c:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 800462e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004632:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004636:	b2d9      	uxtb	r1, r3
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	78d3      	ldrb	r3, [r2, #3]
 800463c:	f361 1386 	bfi	r3, r1, #6, #1
 8004640:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 8004642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004646:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800464a:	b2d9      	uxtb	r1, r3
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	78d3      	ldrb	r3, [r2, #3]
 8004650:	f361 13c7 	bfi	r3, r1, #7, #1
 8004654:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8004656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800465a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800465e:	b2d9      	uxtb	r1, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	7913      	ldrb	r3, [r2, #4]
 8004664:	f361 0300 	bfi	r3, r1, #0, #1
 8004668:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 800466a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800466e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004672:	b2d9      	uxtb	r1, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	7913      	ldrb	r3, [r2, #4]
 8004678:	f361 0341 	bfi	r3, r1, #1, #1
 800467c:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 800467e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004682:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004686:	b2d9      	uxtb	r1, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	7913      	ldrb	r3, [r2, #4]
 800468c:	f361 0382 	bfi	r3, r1, #2, #1
 8004690:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 8004692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004696:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800469a:	b2d9      	uxtb	r1, r3
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	7913      	ldrb	r3, [r2, #4]
 80046a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80046a4:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 80046a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	7913      	ldrb	r3, [r2, #4]
 80046b4:	f361 1304 	bfi	r3, r1, #4, #1
 80046b8:	7113      	strb	r3, [r2, #4]

  return ret;
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	; 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (aux_ctx != NULL)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 80046da:	f107 0210 	add.w	r2, r7, #16
 80046de:	2301      	movs	r3, #1
 80046e0:	216f      	movs	r1, #111	; 0x6f
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f7fe fb02 	bl	8002cec <lsm6dso_read_reg>
 80046e8:	62f8      	str	r0, [r7, #44]	; 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 80046ea:	7c3b      	ldrb	r3, [r7, #16]
 80046ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046f0:	b2d9      	uxtb	r1, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	7813      	ldrb	r3, [r2, #0]
 80046f6:	f361 0300 	bfi	r3, r1, #0, #1
 80046fa:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 81c7 	beq.w	8004a92 <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800470a:	2102      	movs	r1, #2
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7fe ffc1 	bl	8003694 <lsm6dso_mem_bank_set>
 8004712:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    if (ret == 0)
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 800471a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800471e:	2301      	movs	r3, #1
 8004720:	210e      	movs	r1, #14
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7fe fae2 	bl	8002cec <lsm6dso_read_reg>
 8004728:	62f8      	str	r0, [r7, #44]	; 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8004730:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004734:	2301      	movs	r3, #1
 8004736:	210f      	movs	r1, #15
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fe fad7 	bl	8002cec <lsm6dso_read_reg>
 800473e:	62f8      	str	r0, [r7, #44]	; 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 8004746:	f107 0220 	add.w	r2, r7, #32
 800474a:	2301      	movs	r3, #1
 800474c:	2110      	movs	r1, #16
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7fe facc 	bl	8002cec <lsm6dso_read_reg>
 8004754:	62f8      	str	r0, [r7, #44]	; 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800475c:	2100      	movs	r1, #0
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7fe ff98 	bl	8003694 <lsm6dso_mem_bank_set>
 8004764:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    if (ret == 0)
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 800476c:	f107 021c 	add.w	r2, r7, #28
 8004770:	2301      	movs	r3, #1
 8004772:	210e      	movs	r1, #14
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7fe fab9 	bl	8002cec <lsm6dso_read_reg>
 800477a:	62f8      	str	r0, [r7, #44]	; 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8004782:	f107 0218 	add.w	r2, r7, #24
 8004786:	2301      	movs	r3, #1
 8004788:	215f      	movs	r1, #95	; 0x5f
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7fe faae 	bl	8002cec <lsm6dso_read_reg>
 8004790:	62f8      	str	r0, [r7, #44]	; 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004798:	f107 0214 	add.w	r2, r7, #20
 800479c:	2301      	movs	r3, #1
 800479e:	2113      	movs	r1, #19
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7fe faa3 	bl	8002cec <lsm6dso_read_reg>
 80047a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 80047a8:	7d3b      	ldrb	r3, [r7, #20]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d128      	bne.n	8004806 <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d110      	bne.n	80047dc <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 80047ba:	f107 021c 	add.w	r2, r7, #28
 80047be:	2301      	movs	r3, #1
 80047c0:	210e      	movs	r1, #14
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fe fa92 	bl	8002cec <lsm6dso_read_reg>
 80047c8:	62f8      	str	r0, [r7, #44]	; 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80047ca:	7f3b      	ldrb	r3, [r7, #28]
 80047cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80047d0:	b2d9      	uxtb	r1, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	7813      	ldrb	r3, [r2, #0]
 80047d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80047da:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11b      	bne.n	800481a <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80047e2:	f107 0218 	add.w	r2, r7, #24
 80047e6:	2301      	movs	r3, #1
 80047e8:	215f      	movs	r1, #95	; 0x5f
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7fe fa7e 	bl	8002cec <lsm6dso_read_reg>
 80047f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 80047f2:	7e3b      	ldrb	r3, [r7, #24]
 80047f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047f8:	b2d9      	uxtb	r1, r3
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	7853      	ldrb	r3, [r2, #1]
 80047fe:	f361 0300 	bfi	r3, r1, #0, #1
 8004802:	7053      	strb	r3, [r2, #1]
 8004804:	e009      	b.n	800481a <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	7813      	ldrb	r3, [r2, #0]
 800480a:	f36f 03c3 	bfc	r3, #3, #1
 800480e:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	7853      	ldrb	r3, [r2, #1]
 8004814:	f36f 0300 	bfc	r3, #0, #1
 8004818:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 800481a:	7f3b      	ldrb	r3, [r7, #28]
 800481c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004820:	b2d9      	uxtb	r1, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	7813      	ldrb	r3, [r2, #0]
 8004826:	f361 0341 	bfi	r3, r1, #1, #1
 800482a:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800482c:	7f3b      	ldrb	r3, [r7, #28]
 800482e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004832:	b2d9      	uxtb	r1, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	7813      	ldrb	r3, [r2, #0]
 8004838:	f361 0382 	bfi	r3, r1, #2, #1
 800483c:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800483e:	7f3b      	ldrb	r3, [r7, #28]
 8004840:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004844:	b2d9      	uxtb	r1, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	7813      	ldrb	r3, [r2, #0]
 800484a:	f361 03c3 	bfi	r3, r1, #3, #1
 800484e:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8004850:	7f3b      	ldrb	r3, [r7, #28]
 8004852:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004856:	b2d9      	uxtb	r1, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	7813      	ldrb	r3, [r2, #0]
 800485c:	f361 1304 	bfi	r3, r1, #4, #1
 8004860:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8004862:	7f3b      	ldrb	r3, [r7, #28]
 8004864:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004868:	b2d9      	uxtb	r1, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	7813      	ldrb	r3, [r2, #0]
 800486e:	f361 1345 	bfi	r3, r1, #5, #1
 8004872:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8004874:	7f3b      	ldrb	r3, [r7, #28]
 8004876:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800487a:	b2d9      	uxtb	r1, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	7813      	ldrb	r3, [r2, #0]
 8004880:	f361 1386 	bfi	r3, r1, #6, #1
 8004884:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 8004886:	7f3b      	ldrb	r3, [r7, #28]
 8004888:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800488c:	b2d9      	uxtb	r1, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	7813      	ldrb	r3, [r2, #0]
 8004892:	f361 13c7 	bfi	r3, r1, #7, #1
 8004896:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 8004898:	7e3b      	ldrb	r3, [r7, #24]
 800489a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800489e:	b2d9      	uxtb	r1, r3
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	7853      	ldrb	r3, [r2, #1]
 80048a4:	f361 0300 	bfi	r3, r1, #0, #1
 80048a8:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 80048aa:	7e3b      	ldrb	r3, [r7, #24]
 80048ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048b0:	b2d9      	uxtb	r1, r3
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	7853      	ldrb	r3, [r2, #1]
 80048b6:	f361 0341 	bfi	r3, r1, #1, #1
 80048ba:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 80048bc:	7e3b      	ldrb	r3, [r7, #24]
 80048be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048c2:	b2d9      	uxtb	r1, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	7853      	ldrb	r3, [r2, #1]
 80048c8:	f361 0382 	bfi	r3, r1, #2, #1
 80048cc:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 80048ce:	7e3b      	ldrb	r3, [r7, #24]
 80048d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048d4:	b2d9      	uxtb	r1, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	7853      	ldrb	r3, [r2, #1]
 80048da:	f361 03c3 	bfi	r3, r1, #3, #1
 80048de:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 80048e0:	7e3b      	ldrb	r3, [r7, #24]
 80048e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048e6:	b2d9      	uxtb	r1, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	7853      	ldrb	r3, [r2, #1]
 80048ec:	f361 1304 	bfi	r3, r1, #4, #1
 80048f0:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 80048f2:	7e3b      	ldrb	r3, [r7, #24]
 80048f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048f8:	b2d9      	uxtb	r1, r3
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	7853      	ldrb	r3, [r2, #1]
 80048fe:	f361 1345 	bfi	r3, r1, #5, #1
 8004902:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8004904:	7e3b      	ldrb	r3, [r7, #24]
 8004906:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800490a:	b2d9      	uxtb	r1, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	7853      	ldrb	r3, [r2, #1]
 8004910:	f361 1386 	bfi	r3, r1, #6, #1
 8004914:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 8004916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800491a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800491e:	b2d9      	uxtb	r1, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	7853      	ldrb	r3, [r2, #1]
 8004924:	f361 13c7 	bfi	r3, r1, #7, #1
 8004928:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 800492a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800492e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004932:	b2d9      	uxtb	r1, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	7893      	ldrb	r3, [r2, #2]
 8004938:	f361 0300 	bfi	r3, r1, #0, #1
 800493c:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800493e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004942:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004946:	b2d9      	uxtb	r1, r3
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	7893      	ldrb	r3, [r2, #2]
 800494c:	f361 0382 	bfi	r3, r1, #2, #1
 8004950:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8004952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004956:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800495a:	b2d9      	uxtb	r1, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	7893      	ldrb	r3, [r2, #2]
 8004960:	f361 03c3 	bfi	r3, r1, #3, #1
 8004964:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 8004966:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800496a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800496e:	b2d9      	uxtb	r1, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	7893      	ldrb	r3, [r2, #2]
 8004974:	f361 1304 	bfi	r3, r1, #4, #1
 8004978:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800497a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800497e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004982:	b2d9      	uxtb	r1, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	7893      	ldrb	r3, [r2, #2]
 8004988:	f361 1345 	bfi	r3, r1, #5, #1
 800498c:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800498e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004992:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004996:	b2d9      	uxtb	r1, r3
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	7893      	ldrb	r3, [r2, #2]
 800499c:	f361 1386 	bfi	r3, r1, #6, #1
 80049a0:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 80049a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80049aa:	b2d9      	uxtb	r1, r3
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	7893      	ldrb	r3, [r2, #2]
 80049b0:	f361 13c7 	bfi	r3, r1, #7, #1
 80049b4:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80049b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049be:	b2d9      	uxtb	r1, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	78d3      	ldrb	r3, [r2, #3]
 80049c4:	f361 0300 	bfi	r3, r1, #0, #1
 80049c8:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 80049ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049d2:	b2d9      	uxtb	r1, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	78d3      	ldrb	r3, [r2, #3]
 80049d8:	f361 0341 	bfi	r3, r1, #1, #1
 80049dc:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 80049de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049e6:	b2d9      	uxtb	r1, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	78d3      	ldrb	r3, [r2, #3]
 80049ec:	f361 0382 	bfi	r3, r1, #2, #1
 80049f0:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 80049f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049fa:	b2d9      	uxtb	r1, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	78d3      	ldrb	r3, [r2, #3]
 8004a00:	f361 03c3 	bfi	r3, r1, #3, #1
 8004a04:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 8004a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a0e:	b2d9      	uxtb	r1, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	78d3      	ldrb	r3, [r2, #3]
 8004a14:	f361 1304 	bfi	r3, r1, #4, #1
 8004a18:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8004a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a22:	b2d9      	uxtb	r1, r3
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	78d3      	ldrb	r3, [r2, #3]
 8004a28:	f361 1345 	bfi	r3, r1, #5, #1
 8004a2c:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8004a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a36:	b2d9      	uxtb	r1, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	78d3      	ldrb	r3, [r2, #3]
 8004a3c:	f361 1386 	bfi	r3, r1, #6, #1
 8004a40:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8004a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a4a:	b2d9      	uxtb	r1, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	78d3      	ldrb	r3, [r2, #3]
 8004a50:	f361 13c7 	bfi	r3, r1, #7, #1
 8004a54:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8004a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a5a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a5e:	b2d9      	uxtb	r1, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	7913      	ldrb	r3, [r2, #4]
 8004a64:	f361 0300 	bfi	r3, r1, #0, #1
 8004a68:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8004a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a72:	b2d9      	uxtb	r1, r3
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	7913      	ldrb	r3, [r2, #4]
 8004a78:	f361 0341 	bfi	r3, r1, #1, #1
 8004a7c:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8004a7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a82:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a86:	b2d9      	uxtb	r1, r3
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	7913      	ldrb	r3, [r2, #4]
 8004a8c:	f361 0382 	bfi	r3, r1, #2, #1
 8004a90:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3730      	adds	r7, #48	; 0x30
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <lsm6dso_embedded_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_embedded_sens_set(stmdev_ctx_t *ctx,
                                  lsm6dso_emb_sens_t *val)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fdf3 	bl	8003694 <lsm6dso_mem_bank_set>
 8004aae:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <lsm6dso_embedded_sens_set+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
 8004ab6:	f107 0210 	add.w	r2, r7, #16
 8004aba:	2301      	movs	r3, #1
 8004abc:	2104      	movs	r1, #4
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fe f914 	bl	8002cec <lsm6dso_read_reg>
 8004ac4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d13d      	bne.n	8004b48 <lsm6dso_embedded_sens_set+0xac>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
 8004acc:	f107 020c 	add.w	r2, r7, #12
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	2105      	movs	r1, #5
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fe f909 	bl	8002cec <lsm6dso_read_reg>
 8004ada:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.fsm_en = val->fsm;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	7b3b      	ldrb	r3, [r7, #12]
 8004ae8:	f362 0300 	bfi	r3, r2, #0, #1
 8004aec:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = val->tilt;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	7c3b      	ldrb	r3, [r7, #16]
 8004afa:	f362 1304 	bfi	r3, r2, #4, #1
 8004afe:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = val->step;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	7c3b      	ldrb	r3, [r7, #16]
 8004b0c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004b10:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.pedo_adv_en = val->step_adv;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	7b3b      	ldrb	r3, [r7, #12]
 8004b1e:	f362 1304 	bfi	r3, r2, #4, #1
 8004b22:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.sign_motion_en = val->sig_mot;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	7c3b      	ldrb	r3, [r7, #16]
 8004b30:	f362 1345 	bfi	r3, r2, #5, #1
 8004b34:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = val->fifo_compr;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	7b3b      	ldrb	r3, [r7, #12]
 8004b42:	f362 03c3 	bfi	r3, r2, #3, #1
 8004b46:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <lsm6dso_embedded_sens_set+0xc2>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
 8004b4e:	f107 0210 	add.w	r2, r7, #16
 8004b52:	2301      	movs	r3, #1
 8004b54:	2104      	movs	r1, #4
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fe f8e0 	bl	8002d1c <lsm6dso_write_reg>
 8004b5c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <lsm6dso_embedded_sens_set+0xd8>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
 8004b64:	f107 020c 	add.w	r2, r7, #12
 8004b68:	2301      	movs	r3, #1
 8004b6a:	2105      	movs	r1, #5
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fe f8d5 	bl	8002d1c <lsm6dso_write_reg>
 8004b72:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <lsm6dso_embedded_sens_set+0xe8>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fe fd89 	bl	8003694 <lsm6dso_mem_bank_set>
 8004b82:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b84:	697b      	ldr	r3, [r7, #20]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <lsm6dso_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_embedded_sens_get(stmdev_ctx_t *ctx,
                                  lsm6dso_emb_sens_t *emb_sens)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004b98:	2102      	movs	r1, #2
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe fd7a 	bl	8003694 <lsm6dso_mem_bank_set>
 8004ba0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <lsm6dso_embedded_sens_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
 8004ba8:	f107 0210 	add.w	r2, r7, #16
 8004bac:	2301      	movs	r3, #1
 8004bae:	2104      	movs	r1, #4
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fe f89b 	bl	8002cec <lsm6dso_read_reg>
 8004bb6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d13d      	bne.n	8004c3a <lsm6dso_embedded_sens_get+0xac>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
 8004bbe:	f107 020c 	add.w	r2, r7, #12
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	2105      	movs	r1, #5
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe f890 	bl	8002cec <lsm6dso_read_reg>
 8004bcc:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_b, 1);
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8004bce:	7b3b      	ldrb	r3, [r7, #12]
 8004bd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bd4:	b2d9      	uxtb	r1, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	7813      	ldrb	r3, [r2, #0]
 8004bda:	f361 1304 	bfi	r3, r1, #4, #1
 8004bde:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8004be0:	7c3b      	ldrb	r3, [r7, #16]
 8004be2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004be6:	b2d9      	uxtb	r1, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	7813      	ldrb	r3, [r2, #0]
 8004bec:	f361 0341 	bfi	r3, r1, #1, #1
 8004bf0:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8004bf2:	7c3b      	ldrb	r3, [r7, #16]
 8004bf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004bf8:	b2d9      	uxtb	r1, r3
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	7813      	ldrb	r3, [r2, #0]
 8004bfe:	f361 0382 	bfi	r3, r1, #2, #1
 8004c02:	7013      	strb	r3, [r2, #0]
    emb_sens->step_adv = emb_func_en_b.pedo_adv_en;
 8004c04:	7b3b      	ldrb	r3, [r7, #12]
 8004c06:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c0a:	b2d9      	uxtb	r1, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	7813      	ldrb	r3, [r2, #0]
 8004c10:	f361 03c3 	bfi	r3, r1, #3, #1
 8004c14:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8004c16:	7c3b      	ldrb	r3, [r7, #16]
 8004c18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c1c:	b2d9      	uxtb	r1, r3
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	7813      	ldrb	r3, [r2, #0]
 8004c22:	f361 0300 	bfi	r3, r1, #0, #1
 8004c26:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8004c28:	7b3b      	ldrb	r3, [r7, #12]
 8004c2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c2e:	b2d9      	uxtb	r1, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	7813      	ldrb	r3, [r2, #0]
 8004c34:	f361 1345 	bfi	r3, r1, #5, #1
 8004c38:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <lsm6dso_embedded_sens_get+0xbc>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004c40:	2100      	movs	r1, #0
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe fd26 	bl	8003694 <lsm6dso_mem_bank_set>
 8004c48:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <lsm6dso_embedded_sens_off>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_embedded_sens_off(stmdev_ctx_t *ctx)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fe fd18 	bl	8003694 <lsm6dso_mem_bank_set>
 8004c64:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <lsm6dso_embedded_sens_off+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
 8004c6c:	f107 0210 	add.w	r2, r7, #16
 8004c70:	2301      	movs	r3, #1
 8004c72:	2104      	movs	r1, #4
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7fe f839 	bl	8002cec <lsm6dso_read_reg>
 8004c7a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d11f      	bne.n	8004cc2 <lsm6dso_embedded_sens_off+0x6e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
 8004c82:	f107 020c 	add.w	r2, r7, #12
 8004c86:	2301      	movs	r3, #1
 8004c88:	2105      	movs	r1, #5
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe f82e 	bl	8002cec <lsm6dso_read_reg>
 8004c90:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.fsm_en = PROPERTY_DISABLE;
 8004c92:	7b3b      	ldrb	r3, [r7, #12]
 8004c94:	f36f 0300 	bfc	r3, #0, #1
 8004c98:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = PROPERTY_DISABLE;
 8004c9a:	7c3b      	ldrb	r3, [r7, #16]
 8004c9c:	f36f 1304 	bfc	r3, #4, #1
 8004ca0:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = PROPERTY_DISABLE;
 8004ca2:	7c3b      	ldrb	r3, [r7, #16]
 8004ca4:	f36f 03c3 	bfc	r3, #3, #1
 8004ca8:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.pedo_adv_en = PROPERTY_DISABLE;
 8004caa:	7b3b      	ldrb	r3, [r7, #12]
 8004cac:	f36f 1304 	bfc	r3, #4, #1
 8004cb0:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.sign_motion_en = PROPERTY_DISABLE;
 8004cb2:	7c3b      	ldrb	r3, [r7, #16]
 8004cb4:	f36f 1345 	bfc	r3, #5, #1
 8004cb8:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = PROPERTY_DISABLE;
 8004cba:	7b3b      	ldrb	r3, [r7, #12]
 8004cbc:	f36f 03c3 	bfc	r3, #3, #1
 8004cc0:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <lsm6dso_embedded_sens_off+0x84>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
 8004cc8:	f107 0210 	add.w	r2, r7, #16
 8004ccc:	2301      	movs	r3, #1
 8004cce:	2104      	movs	r1, #4
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fe f823 	bl	8002d1c <lsm6dso_write_reg>
 8004cd6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <lsm6dso_embedded_sens_off+0x9a>
  {
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
 8004cde:	f107 020c 	add.w	r2, r7, #12
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	2105      	movs	r1, #5
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fe f818 	bl	8002d1c <lsm6dso_write_reg>
 8004cec:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <lsm6dso_embedded_sens_off+0xaa>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fe fccc 	bl	8003694 <lsm6dso_mem_bank_set>
 8004cfc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <BSP_LED_Init+0x20>)
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	0800ac58 	.word	0x0800ac58

08004d2c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <BSP_LED_On+0x28>)
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d42:	2201      	movs	r2, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 ff89 	bl	8005c5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000074 	.word	0x20000074

08004d58 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <BSP_LED_Off+0x28>)
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d6e:	2200      	movs	r2, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 ff73 	bl	8005c5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000074 	.word	0x20000074

08004d84 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d8a:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8e:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d96:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da2:	f107 030c 	add.w	r3, r7, #12
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	60da      	str	r2, [r3, #12]
 8004db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004db8:	f043 0320 	orr.w	r3, r3, #32
 8004dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <LED_USER_GPIO_Init+0x78>)
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dd0:	480b      	ldr	r0, [pc, #44]	; (8004e00 <LED_USER_GPIO_Init+0x7c>)
 8004dd2:	f000 ff43 	bl	8005c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8004dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	4619      	mov	r1, r3
 8004dee:	4804      	ldr	r0, [pc, #16]	; (8004e00 <LED_USER_GPIO_Init+0x7c>)
 8004df0:	f000 fc98 	bl	8005724 <HAL_GPIO_Init>

}
 8004df4:	bf00      	nop
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	48001400 	.word	0x48001400

08004e04 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	71fb      	strb	r3, [r7, #7]
 8004e10:	4613      	mov	r3, r2
 8004e12:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <BSP_PB_Init+0x94>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004e22:	79bb      	ldrb	r3, [r7, #6]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d132      	bne.n	8004e8e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <BSP_PB_Init+0x98>)
 8004e2e:	441a      	add	r2, r3
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	491b      	ldr	r1, [pc, #108]	; (8004ea0 <BSP_PB_Init+0x9c>)
 8004e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fc5e 	bl	80056fc <HAL_EXTI_GetHandle>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004e46:	f06f 0303 	mvn.w	r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e01f      	b.n	8004e8e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <BSP_PB_Init+0x98>)
 8004e54:	1898      	adds	r0, r3, r2
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <BSP_PB_Init+0xa0>)
 8004e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2100      	movs	r1, #0
 8004e62:	f000 fc31 	bl	80056c8 <HAL_EXTI_RegisterCallback>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004e6c:	f06f 0303 	mvn.w	r3, #3
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e00c      	b.n	8004e8e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004e74:	2028      	movs	r0, #40	; 0x28
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <BSP_PB_Init+0xa4>)
 8004e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4619      	mov	r1, r3
 8004e82:	f000 fb00 	bl	8005486 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004e86:	2328      	movs	r3, #40	; 0x28
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fb18 	bl	80054be <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	0800ac5c 	.word	0x0800ac5c
 8004e9c:	2000007c 	.word	0x2000007c
 8004ea0:	0800ac60 	.word	0x0800ac60
 8004ea4:	0800ac64 	.word	0x0800ac64
 8004ea8:	0800ac68 	.word	0x0800ac68

08004eac <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <BSP_PB_GetState+0x34>)
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 feb1 	bl	8005c2c <HAL_GPIO_ReadPin>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000078 	.word	0x20000078

08004ee4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f7fb ffd7 	bl	8000e9c <BSP_PB_Callback>
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004efa:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004f00:	f043 0302 	orr.w	r3, r3, #2
 8004f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
 8004f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <BUTTON_USER_GPIO_Init+0x6c>)
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004f4a:	f107 030c 	add.w	r3, r7, #12
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4804      	ldr	r0, [pc, #16]	; (8004f64 <BUTTON_USER_GPIO_Init+0x70>)
 8004f52:	f000 fbe7 	bl	8005724 <HAL_GPIO_Init>

}
 8004f56:	bf00      	nop
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	48000400 	.word	0x48000400

08004f68 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d903      	bls.n	8004f84 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f7c:	f06f 0301 	mvn.w	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e025      	b.n	8004fd0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	79fa      	ldrb	r2, [r7, #7]
 8004f88:	4914      	ldr	r1, [pc, #80]	; (8004fdc <BSP_COM_Init+0x74>)
 8004f8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004f8e:	4814      	ldr	r0, [pc, #80]	; (8004fe0 <BSP_COM_Init+0x78>)
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	4403      	add	r3, r0
 8004f9a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8004f9c:	79fa      	ldrb	r2, [r7, #7]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <BSP_COM_Init+0x78>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f888 	bl	80050c0 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8004fb0:	79fa      	ldrb	r2, [r7, #7]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <BSP_COM_Init+0x78>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f810 	bl	8004fe4 <MX_USART1_UART_Init>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004fca:	f06f 0303 	mvn.w	r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000084 	.word	0x20000084
 8004fe0:	20000364 	.word	0x20000364

08004fe4 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a24      	ldr	r2, [pc, #144]	; (8005084 <MX_USART1_UART_Init+0xa0>)
 8004ff4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ffc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	220c      	movs	r2, #12
 8005014:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f003 fd83 	bl	8008b40 <HAL_UART_Init>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005044:	2100      	movs	r1, #0
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f004 fb56 	bl	80096f8 <HAL_UARTEx_SetTxFifoThreshold>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005056:	2100      	movs	r1, #0
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f004 fb8b 	bl	8009774 <HAL_UARTEx_SetRxFifoThreshold>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f004 fb0c 	bl	8009686 <HAL_UARTEx_DisableFifoMode>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40013800 	.word	0x40013800

08005088 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <__io_putchar+0x30>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	4a07      	ldr	r2, [pc, #28]	; (80050bc <__io_putchar+0x34>)
 80050a0:	1898      	adds	r0, r3, r2
 80050a2:	1d39      	adds	r1, r7, #4
 80050a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050a8:	2201      	movs	r2, #1
 80050aa:	f003 fda3 	bl	8008bf4 <HAL_UART_Transmit>
  return ch;
 80050ae:	687b      	ldr	r3, [r7, #4]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	200003f4 	.word	0x200003f4
 80050bc:	20000364 	.word	0x20000364

080050c0 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0b0      	sub	sp, #192	; 0xc0
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	229c      	movs	r2, #156	; 0x9c
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fc05 	bl	80098e0 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80050d6:	2301      	movs	r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050da:	2300      	movs	r3, #0
 80050dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	4618      	mov	r0, r3
 80050e4:	f002 fbc6 	bl	8007874 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050e8:	4b22      	ldr	r3, [pc, #136]	; (8005174 <USART1_MspInit+0xb4>)
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <USART1_MspInit+0xb4>)
 80050ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f2:	6613      	str	r3, [r2, #96]	; 0x60
 80050f4:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <USART1_MspInit+0xb4>)
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005100:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <USART1_MspInit+0xb4>)
 8005102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <USART1_MspInit+0xb4>)
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <USART1_MspInit+0xb4>)
 800510e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8005130:	2307      	movs	r3, #7
 8005132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8005136:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800513a:	4619      	mov	r1, r3
 800513c:	480e      	ldr	r0, [pc, #56]	; (8005178 <USART1_MspInit+0xb8>)
 800513e:	f000 faf1 	bl	8005724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005154:	2303      	movs	r3, #3
 8005156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800515a:	2307      	movs	r3, #7
 800515c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8005160:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005164:	4619      	mov	r1, r3
 8005166:	4804      	ldr	r0, [pc, #16]	; (8005178 <USART1_MspInit+0xb8>)
 8005168:	f000 fadc 	bl	8005724 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800516c:	bf00      	nop
 800516e:	37c0      	adds	r7, #192	; 0xc0
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	48000400 	.word	0x48000400

0800517c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <SystemInit+0x20>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	4a05      	ldr	r2, [pc, #20]	; (800519c <SystemInit+0x20>)
 8005188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800518c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051aa:	2003      	movs	r0, #3
 80051ac:	f000 f960 	bl	8005470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051b0:	200f      	movs	r0, #15
 80051b2:	f000 f80d 	bl	80051d0 <HAL_InitTick>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	71fb      	strb	r3, [r7, #7]
 80051c0:	e001      	b.n	80051c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051c2:	f7fb fccf 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051c6:	79fb      	ldrb	r3, [r7, #7]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <HAL_InitTick+0x6c>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d023      	beq.n	800522c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80051e4:	4b16      	ldr	r3, [pc, #88]	; (8005240 <HAL_InitTick+0x70>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <HAL_InitTick+0x6c>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f96d 	bl	80054da <HAL_SYSTICK_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	d809      	bhi.n	8005220 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800520c:	2200      	movs	r2, #0
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	f000 f937 	bl	8005486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005218:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <HAL_InitTick+0x74>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e007      	b.n	8005230 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	e004      	b.n	8005230 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e001      	b.n	8005230 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000090 	.word	0x20000090
 8005240:	20000088 	.word	0x20000088
 8005244:	2000008c 	.word	0x2000008c

08005248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_IncTick+0x20>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_IncTick+0x24>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4413      	add	r3, r2
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_IncTick+0x24>)
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000090 	.word	0x20000090
 800526c:	200003f8 	.word	0x200003f8

08005270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return uwTick;
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_GetTick+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	200003f8 	.word	0x200003f8

08005288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005290:	f7ff ffee 	bl	8005270 <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d005      	beq.n	80052ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <HAL_Delay+0x44>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052ae:	bf00      	nop
 80052b0:	f7ff ffde 	bl	8005270 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d8f7      	bhi.n	80052b0 <HAL_Delay+0x28>
  {
  }
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000090 	.word	0x20000090

080052d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052ec:	4013      	ands	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005302:	4a04      	ldr	r2, [pc, #16]	; (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	60d3      	str	r3, [r2, #12]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <__NVIC_GetPriorityGrouping+0x18>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	f003 0307 	and.w	r3, r3, #7
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	2b00      	cmp	r3, #0
 8005344:	db0b      	blt.n	800535e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 021f 	and.w	r2, r3, #31
 800534c:	4907      	ldr	r1, [pc, #28]	; (800536c <__NVIC_EnableIRQ+0x38>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2001      	movs	r0, #1
 8005356:	fa00 f202 	lsl.w	r2, r0, r2
 800535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000e100 	.word	0xe000e100

08005370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005380:	2b00      	cmp	r3, #0
 8005382:	db0a      	blt.n	800539a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	490c      	ldr	r1, [pc, #48]	; (80053bc <__NVIC_SetPriority+0x4c>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	440b      	add	r3, r1
 8005394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005398:	e00a      	b.n	80053b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4908      	ldr	r1, [pc, #32]	; (80053c0 <__NVIC_SetPriority+0x50>)
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3b04      	subs	r3, #4
 80053a8:	0112      	lsls	r2, r2, #4
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	440b      	add	r3, r1
 80053ae:	761a      	strb	r2, [r3, #24]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000e100 	.word	0xe000e100
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	; 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f1c3 0307 	rsb	r3, r3, #7
 80053de:	2b04      	cmp	r3, #4
 80053e0:	bf28      	it	cs
 80053e2:	2304      	movcs	r3, #4
 80053e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2b06      	cmp	r3, #6
 80053ec:	d902      	bls.n	80053f4 <NVIC_EncodePriority+0x30>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3b03      	subs	r3, #3
 80053f2:	e000      	b.n	80053f6 <NVIC_EncodePriority+0x32>
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	401a      	ands	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800540c:	f04f 31ff 	mov.w	r1, #4294967295
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	43d9      	mvns	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	4313      	orrs	r3, r2
         );
}
 800541e:	4618      	mov	r0, r3
 8005420:	3724      	adds	r7, #36	; 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800543c:	d301      	bcc.n	8005442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800543e:	2301      	movs	r3, #1
 8005440:	e00f      	b.n	8005462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005442:	4a0a      	ldr	r2, [pc, #40]	; (800546c <SysTick_Config+0x40>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800544a:	210f      	movs	r1, #15
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	f7ff ff8e 	bl	8005370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <SysTick_Config+0x40>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <SysTick_Config+0x40>)
 800545c:	2207      	movs	r2, #7
 800545e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000e010 	.word	0xe000e010

08005470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff29 	bl	80052d0 <__NVIC_SetPriorityGrouping>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005498:	f7ff ff3e 	bl	8005318 <__NVIC_GetPriorityGrouping>
 800549c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	6978      	ldr	r0, [r7, #20]
 80054a4:	f7ff ff8e 	bl	80053c4 <NVIC_EncodePriority>
 80054a8:	4602      	mov	r2, r0
 80054aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff5d 	bl	8005370 <__NVIC_SetPriority>
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	4603      	mov	r3, r0
 80054c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff31 	bl	8005334 <__NVIC_EnableIRQ>
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ffa2 	bl	800542c <SysTick_Config>
 80054e8:	4603      	mov	r3, r0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e054      	b.n	80055b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7f5b      	ldrb	r3, [r3, #29]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fb48 	bl	8000bac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	791b      	ldrb	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_CRC_Init+0xc4>)
 8005530:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0218 	bic.w	r2, r2, #24
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	e00c      	b.n	800555e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	461a      	mov	r2, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f834 	bl	80055bc <HAL_CRCEx_Polynomial_Set>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e028      	b.n	80055b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	795b      	ldrb	r3, [r3, #5]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f04f 32ff 	mov.w	r2, #4294967295
 800556e:	611a      	str	r2, [r3, #16]
 8005570:	e004      	b.n	800557c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6912      	ldr	r2, [r2, #16]
 800557a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	04c11db7 	.word	0x04c11db7

080055bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80055cc:	231f      	movs	r3, #31
 80055ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80055d0:	bf00      	nop
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	613a      	str	r2, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b18      	cmp	r3, #24
 80055f4:	d846      	bhi.n	8005684 <HAL_CRCEx_Polynomial_Set+0xc8>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800568b 	.word	0x0800568b
 8005600:	08005685 	.word	0x08005685
 8005604:	08005685 	.word	0x08005685
 8005608:	08005685 	.word	0x08005685
 800560c:	08005685 	.word	0x08005685
 8005610:	08005685 	.word	0x08005685
 8005614:	08005685 	.word	0x08005685
 8005618:	08005685 	.word	0x08005685
 800561c:	08005679 	.word	0x08005679
 8005620:	08005685 	.word	0x08005685
 8005624:	08005685 	.word	0x08005685
 8005628:	08005685 	.word	0x08005685
 800562c:	08005685 	.word	0x08005685
 8005630:	08005685 	.word	0x08005685
 8005634:	08005685 	.word	0x08005685
 8005638:	08005685 	.word	0x08005685
 800563c:	0800566d 	.word	0x0800566d
 8005640:	08005685 	.word	0x08005685
 8005644:	08005685 	.word	0x08005685
 8005648:	08005685 	.word	0x08005685
 800564c:	08005685 	.word	0x08005685
 8005650:	08005685 	.word	0x08005685
 8005654:	08005685 	.word	0x08005685
 8005658:	08005685 	.word	0x08005685
 800565c:	08005661 	.word	0x08005661
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b06      	cmp	r3, #6
 8005664:	d913      	bls.n	800568e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800566a:	e010      	b.n	800568e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b07      	cmp	r3, #7
 8005670:	d90f      	bls.n	8005692 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005676:	e00c      	b.n	8005692 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d90b      	bls.n	8005696 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005682:	e008      	b.n	8005696 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
      break;
 8005688:	e006      	b.n	8005698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800568a:	bf00      	nop
 800568c:	e004      	b.n	8005698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005696:	bf00      	nop
  }
  if (status == HAL_OK)
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 0118 	bic.w	r1, r3, #24
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	460b      	mov	r3, r1
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80056da:	7afb      	ldrb	r3, [r7, #11]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
      break;
 80056ec:	bf00      	nop
  }

  return status;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e003      	b.n	8005718 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005732:	e166      	b.n	8005a02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2101      	movs	r1, #1
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	4013      	ands	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8158 	beq.w	80059fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d005      	beq.n	8005764 <HAL_GPIO_Init+0x40>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d130      	bne.n	80057c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	2203      	movs	r2, #3
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800579a:	2201      	movs	r2, #1
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0201 	and.w	r2, r3, #1
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d017      	beq.n	8005802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d123      	bne.n	8005856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	08da      	lsrs	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3208      	adds	r2, #8
 8005816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	220f      	movs	r2, #15
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4013      	ands	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	08da      	lsrs	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3208      	adds	r2, #8
 8005850:	6939      	ldr	r1, [r7, #16]
 8005852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	2203      	movs	r2, #3
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80b2 	beq.w	80059fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005898:	4b61      	ldr	r3, [pc, #388]	; (8005a20 <HAL_GPIO_Init+0x2fc>)
 800589a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589c:	4a60      	ldr	r2, [pc, #384]	; (8005a20 <HAL_GPIO_Init+0x2fc>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6613      	str	r3, [r2, #96]	; 0x60
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_GPIO_Init+0x2fc>)
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058b0:	4a5c      	ldr	r2, [pc, #368]	; (8005a24 <HAL_GPIO_Init+0x300>)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	3302      	adds	r3, #2
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	220f      	movs	r2, #15
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058da:	d02b      	beq.n	8005934 <HAL_GPIO_Init+0x210>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_GPIO_Init+0x304>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d025      	beq.n	8005930 <HAL_GPIO_Init+0x20c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a51      	ldr	r2, [pc, #324]	; (8005a2c <HAL_GPIO_Init+0x308>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01f      	beq.n	800592c <HAL_GPIO_Init+0x208>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a50      	ldr	r2, [pc, #320]	; (8005a30 <HAL_GPIO_Init+0x30c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d019      	beq.n	8005928 <HAL_GPIO_Init+0x204>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a4f      	ldr	r2, [pc, #316]	; (8005a34 <HAL_GPIO_Init+0x310>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_GPIO_Init+0x200>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a4e      	ldr	r2, [pc, #312]	; (8005a38 <HAL_GPIO_Init+0x314>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00d      	beq.n	8005920 <HAL_GPIO_Init+0x1fc>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a4d      	ldr	r2, [pc, #308]	; (8005a3c <HAL_GPIO_Init+0x318>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <HAL_GPIO_Init+0x1f8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a4c      	ldr	r2, [pc, #304]	; (8005a40 <HAL_GPIO_Init+0x31c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_GPIO_Init+0x1f4>
 8005914:	2307      	movs	r3, #7
 8005916:	e00e      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005918:	2308      	movs	r3, #8
 800591a:	e00c      	b.n	8005936 <HAL_GPIO_Init+0x212>
 800591c:	2306      	movs	r3, #6
 800591e:	e00a      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005920:	2305      	movs	r3, #5
 8005922:	e008      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005924:	2304      	movs	r3, #4
 8005926:	e006      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005928:	2303      	movs	r3, #3
 800592a:	e004      	b.n	8005936 <HAL_GPIO_Init+0x212>
 800592c:	2302      	movs	r3, #2
 800592e:	e002      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_GPIO_Init+0x212>
 8005934:	2300      	movs	r3, #0
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	f002 0203 	and.w	r2, r2, #3
 800593c:	0092      	lsls	r2, r2, #2
 800593e:	4093      	lsls	r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005946:	4937      	ldr	r1, [pc, #220]	; (8005a24 <HAL_GPIO_Init+0x300>)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005954:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_GPIO_Init+0x320>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43db      	mvns	r3, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005978:	4a32      	ldr	r2, [pc, #200]	; (8005a44 <HAL_GPIO_Init+0x320>)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_GPIO_Init+0x320>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	43db      	mvns	r3, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059a2:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <HAL_GPIO_Init+0x320>)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059a8:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <HAL_GPIO_Init+0x320>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_GPIO_Init+0x320>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <HAL_GPIO_Init+0x320>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43db      	mvns	r3, r3
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4013      	ands	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059f6:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <HAL_GPIO_Init+0x320>)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	3301      	adds	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f ae91 	bne.w	8005734 <HAL_GPIO_Init+0x10>
  }
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40010000 	.word	0x40010000
 8005a28:	48000400 	.word	0x48000400
 8005a2c:	48000800 	.word	0x48000800
 8005a30:	48000c00 	.word	0x48000c00
 8005a34:	48001000 	.word	0x48001000
 8005a38:	48001400 	.word	0x48001400
 8005a3c:	48001800 	.word	0x48001800
 8005a40:	48001c00 	.word	0x48001c00
 8005a44:	40010400 	.word	0x40010400

08005a48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a56:	e0c9      	b.n	8005bec <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a58:	2201      	movs	r2, #1
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80bc 	beq.w	8005be6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005a6e:	4a66      	ldr	r2, [pc, #408]	; (8005c08 <HAL_GPIO_DeInit+0x1c0>)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	3302      	adds	r3, #2
 8005a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	220f      	movs	r2, #15
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a96:	d02b      	beq.n	8005af0 <HAL_GPIO_DeInit+0xa8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	; (8005c0c <HAL_GPIO_DeInit+0x1c4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d025      	beq.n	8005aec <HAL_GPIO_DeInit+0xa4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a5b      	ldr	r2, [pc, #364]	; (8005c10 <HAL_GPIO_DeInit+0x1c8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01f      	beq.n	8005ae8 <HAL_GPIO_DeInit+0xa0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a5a      	ldr	r2, [pc, #360]	; (8005c14 <HAL_GPIO_DeInit+0x1cc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d019      	beq.n	8005ae4 <HAL_GPIO_DeInit+0x9c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a59      	ldr	r2, [pc, #356]	; (8005c18 <HAL_GPIO_DeInit+0x1d0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_GPIO_DeInit+0x98>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a58      	ldr	r2, [pc, #352]	; (8005c1c <HAL_GPIO_DeInit+0x1d4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00d      	beq.n	8005adc <HAL_GPIO_DeInit+0x94>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a57      	ldr	r2, [pc, #348]	; (8005c20 <HAL_GPIO_DeInit+0x1d8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <HAL_GPIO_DeInit+0x90>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a56      	ldr	r2, [pc, #344]	; (8005c24 <HAL_GPIO_DeInit+0x1dc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_GPIO_DeInit+0x8c>
 8005ad0:	2307      	movs	r3, #7
 8005ad2:	e00e      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	e00c      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005ad8:	2306      	movs	r3, #6
 8005ada:	e00a      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005adc:	2305      	movs	r3, #5
 8005ade:	e008      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	e006      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e004      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e002      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_GPIO_DeInit+0xaa>
 8005af0:	2300      	movs	r3, #0
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	f002 0203 	and.w	r2, r2, #3
 8005af8:	0092      	lsls	r2, r2, #2
 8005afa:	4093      	lsls	r3, r2
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d132      	bne.n	8005b68 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005b02:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	4947      	ldr	r1, [pc, #284]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005b10:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	43db      	mvns	r3, r3
 8005b18:	4943      	ldr	r1, [pc, #268]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005b1e:	4b42      	ldr	r3, [pc, #264]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	4940      	ldr	r1, [pc, #256]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	493c      	ldr	r1, [pc, #240]	; (8005c28 <HAL_GPIO_DeInit+0x1e0>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	220f      	movs	r2, #15
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <HAL_GPIO_DeInit+0x1c0>)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	089b      	lsrs	r3, r3, #2
 8005b50:	3302      	adds	r3, #2
 8005b52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	482b      	ldr	r0, [pc, #172]	; (8005c08 <HAL_GPIO_DeInit+0x1c0>)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	400a      	ands	r2, r1
 8005b62:	3302      	adds	r3, #2
 8005b64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	2103      	movs	r1, #3
 8005b72:	fa01 f303 	lsl.w	r3, r1, r3
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	08da      	lsrs	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3208      	adds	r2, #8
 8005b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	220f      	movs	r2, #15
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	08d2      	lsrs	r2, r2, #3
 8005b9c:	4019      	ands	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2103      	movs	r1, #3
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	2103      	movs	r1, #3
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3301      	adds	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f af2f 	bne.w	8005a58 <HAL_GPIO_DeInit+0x10>
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	48000400 	.word	0x48000400
 8005c10:	48000800 	.word	0x48000800
 8005c14:	48000c00 	.word	0x48000c00
 8005c18:	48001000 	.word	0x48001000
 8005c1c:	48001400 	.word	0x48001400
 8005c20:	48001800 	.word	0x48001800
 8005c24:	48001c00 	.word	0x48001c00
 8005c28:	40010400 	.word	0x40010400

08005c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e001      	b.n	8005c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c6c:	787b      	ldrb	r3, [r7, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c78:	e002      	b.n	8005c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e081      	b.n	8005da2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8a8 	bl	8005e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d107      	bne.n	8005d06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d02:	609a      	str	r2, [r3, #8]
 8005d04:	e006      	b.n	8005d14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d104      	bne.n	8005d26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69d9      	ldr	r1, [r3, #28]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e021      	b.n	8005e00 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f821 	bl	8005e1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	817b      	strh	r3, [r7, #10]
 8005e42:	460b      	mov	r3, r1
 8005e44:	813b      	strh	r3, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	f040 80f9 	bne.w	800604a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x34>
 8005e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0ed      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2C_Mem_Write+0x4e>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0e6      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e86:	f7ff f9f3 	bl	8005270 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2319      	movs	r3, #25
 8005e92:	2201      	movs	r2, #1
 8005e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fadd 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0d1      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2221      	movs	r2, #33	; 0x21
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2240      	movs	r2, #64	; 0x40
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ed0:	88f8      	ldrh	r0, [r7, #6]
 8005ed2:	893a      	ldrh	r2, [r7, #8]
 8005ed4:	8979      	ldrh	r1, [r7, #10]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f9ed 	bl	80062c0 <I2C_RequestMemoryWrite>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a9      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2bff      	cmp	r3, #255	; 0xff
 8005f00:	d90e      	bls.n	8005f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	8979      	ldrh	r1, [r7, #10]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fc45 	bl	80067a8 <I2C_TransferConfig>
 8005f1e:	e00f      	b.n	8005f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	8979      	ldrh	r1, [r7, #10]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fc34 	bl	80067a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fac7 	bl	80064d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e07b      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d034      	beq.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d130      	bne.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fa59 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04d      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2bff      	cmp	r3, #255	; 0xff
 8005fb8:	d90e      	bls.n	8005fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fbe9 	bl	80067a8 <I2C_TransferConfig>
 8005fd6:	e00f      	b.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	8979      	ldrh	r1, [r7, #10]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fbd8 	bl	80067a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d19e      	bne.n	8005f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 faa6 	bl	8006558 <I2C_WaitOnSTOPFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e01a      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2220      	movs	r2, #32
 800601c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6859      	ldr	r1, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_I2C_Mem_Write+0x224>)
 800602a:	400b      	ands	r3, r1
 800602c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e000      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800604a:	2302      	movs	r3, #2
  }
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	fe00e800 	.word	0xfe00e800

08006058 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	f040 80fd 	bne.w	800627a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_I2C_Mem_Read+0x34>
 8006086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d105      	bne.n	8006098 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0f1      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Mem_Read+0x4e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ea      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060ae:	f7ff f8df 	bl	8005270 <HAL_GetTick>
 80060b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2319      	movs	r3, #25
 80060ba:	2201      	movs	r2, #1
 80060bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f9c9 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0d5      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2222      	movs	r2, #34	; 0x22
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2240      	movs	r2, #64	; 0x40
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f8:	88f8      	ldrh	r0, [r7, #6]
 80060fa:	893a      	ldrh	r2, [r7, #8]
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4603      	mov	r3, r0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f92d 	bl	8006368 <I2C_RequestMemoryRead>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0ad      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2bff      	cmp	r3, #255	; 0xff
 8006128:	d90e      	bls.n	8006148 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	8979      	ldrh	r1, [r7, #10]
 8006138:	4b52      	ldr	r3, [pc, #328]	; (8006284 <HAL_I2C_Mem_Read+0x22c>)
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fb31 	bl	80067a8 <I2C_TransferConfig>
 8006146:	e00f      	b.n	8006168 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	8979      	ldrh	r1, [r7, #10]
 800615a:	4b4a      	ldr	r3, [pc, #296]	; (8006284 <HAL_I2C_Mem_Read+0x22c>)
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fb20 	bl	80067a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	2200      	movs	r2, #0
 8006170:	2104      	movs	r1, #4
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f970 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e07c      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d034      	beq.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d130      	bne.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	2200      	movs	r2, #0
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f941 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e04d      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2bff      	cmp	r3, #255	; 0xff
 80061e8:	d90e      	bls.n	8006208 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	22ff      	movs	r2, #255	; 0xff
 80061ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	8979      	ldrh	r1, [r7, #10]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fad1 	bl	80067a8 <I2C_TransferConfig>
 8006206:	e00f      	b.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006216:	b2da      	uxtb	r2, r3
 8006218:	8979      	ldrh	r1, [r7, #10]
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fac0 	bl	80067a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d19a      	bne.n	8006168 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f98e 	bl	8006558 <I2C_WaitOnSTOPFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e01a      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2220      	movs	r2, #32
 800624c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6859      	ldr	r1, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_I2C_Mem_Read+0x230>)
 800625a:	400b      	ands	r3, r1
 800625c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80002400 	.word	0x80002400
 8006288:	fe00e800 	.word	0xfe00e800

0800628c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629a:	b2db      	uxtb	r3, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	4608      	mov	r0, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	817b      	strh	r3, [r7, #10]
 80062d2:	460b      	mov	r3, r1
 80062d4:	813b      	strh	r3, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	8979      	ldrh	r1, [r7, #10]
 80062e0:	4b20      	ldr	r3, [pc, #128]	; (8006364 <I2C_RequestMemoryWrite+0xa4>)
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fa5d 	bl	80067a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8f0 	bl	80064d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e02c      	b.n	800635c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d105      	bne.n	8006314 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
 8006312:	e015      	b.n	8006340 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	b29b      	uxth	r3, r3
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f8d6 	bl	80064d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e012      	b.n	800635c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2200      	movs	r2, #0
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f884 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	80002000 	.word	0x80002000

08006368 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	4608      	mov	r0, r1
 8006372:	4611      	mov	r1, r2
 8006374:	461a      	mov	r2, r3
 8006376:	4603      	mov	r3, r0
 8006378:	817b      	strh	r3, [r7, #10]
 800637a:	460b      	mov	r3, r1
 800637c:	813b      	strh	r3, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8979      	ldrh	r1, [r7, #10]
 8006388:	4b20      	ldr	r3, [pc, #128]	; (800640c <I2C_RequestMemoryRead+0xa4>)
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fa0a 	bl	80067a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f89d 	bl	80064d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e02c      	b.n	8006402 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ae:	893b      	ldrh	r3, [r7, #8]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	629a      	str	r2, [r3, #40]	; 0x28
 80063b8:	e015      	b.n	80063e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063ba:	893b      	ldrh	r3, [r7, #8]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f883 	bl	80064d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e012      	b.n	8006402 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063dc:	893b      	ldrh	r3, [r7, #8]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f831 	bl	8006458 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	80002000 	.word	0x80002000

08006410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d103      	bne.n	800642e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d007      	beq.n	800644c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	619a      	str	r2, [r3, #24]
  }
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006468:	e022      	b.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d01e      	beq.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	f7fe fefd 	bl	8005270 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d113      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e00f      	b.n	80064d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	429a      	cmp	r2, r3
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d0cd      	beq.n	800646a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064e4:	e02c      	b.n	8006540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f870 	bl	80065d0 <I2C_IsErrorOccurred>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e02a      	b.n	8006550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d01e      	beq.n	8006540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fe feb5 	bl	8005270 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d113      	bne.n	8006540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e007      	b.n	8006550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d1cb      	bne.n	80064e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006564:	e028      	b.n	80065b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f830 	bl	80065d0 <I2C_IsErrorOccurred>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e026      	b.n	80065c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	f7fe fe79 	bl	8005270 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d113      	bne.n	80065b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e007      	b.n	80065c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d1cf      	bne.n	8006566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d075      	beq.n	80066e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2210      	movs	r2, #16
 8006602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006604:	e056      	b.n	80066b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d052      	beq.n	80066b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800660e:	f7fe fe2f 	bl	8005270 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d302      	bcc.n	8006624 <I2C_IsErrorOccurred+0x54>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d147      	bne.n	80066b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d12e      	bne.n	80066a6 <I2C_IsErrorOccurred+0xd6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664e:	d02a      	beq.n	80066a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006650:	7cfb      	ldrb	r3, [r7, #19]
 8006652:	2b20      	cmp	r3, #32
 8006654:	d027      	beq.n	80066a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006666:	f7fe fe03 	bl	8005270 <HAL_GetTick>
 800666a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666c:	e01b      	b.n	80066a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800666e:	f7fe fdff 	bl	8005270 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b19      	cmp	r3, #25
 800667a:	d914      	bls.n	80066a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	f043 0220 	orr.w	r2, r3, #32
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d1dc      	bne.n	800666e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d003      	beq.n	80066ca <I2C_IsErrorOccurred+0xfa>
 80066c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d09d      	beq.n	8006606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2220      	movs	r2, #32
 80066d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	f043 0304 	orr.w	r3, r3, #4
 80066e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f043 0308 	orr.w	r3, r3, #8
 8006722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800672c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00b      	beq.n	8006756 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01c      	beq.n	8006798 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fe56 	bl	8006410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <I2C_IsErrorOccurred+0x1d4>)
 8006770:	400b      	ands	r3, r1
 8006772:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	431a      	orrs	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800679c:	4618      	mov	r0, r3
 800679e:	3728      	adds	r7, #40	; 0x28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	fe00e800 	.word	0xfe00e800

080067a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	817b      	strh	r3, [r7, #10]
 80067b6:	4613      	mov	r3, r2
 80067b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ba:	897b      	ldrh	r3, [r7, #10]
 80067bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067c0:	7a7b      	ldrb	r3, [r7, #9]
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	0d5b      	lsrs	r3, r3, #21
 80067e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <I2C_TransferConfig+0x60>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	43db      	mvns	r3, r3
 80067ec:	ea02 0103 	and.w	r1, r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	03ff63ff 	.word	0x03ff63ff

0800680c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b20      	cmp	r3, #32
 8006820:	d138      	bne.n	8006894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800682c:	2302      	movs	r3, #2
 800682e:	e032      	b.n	8006896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2224      	movs	r2, #36	; 0x24
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800685e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	d139      	bne.n	800692c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e033      	b.n	800692e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2224      	movs	r2, #36	; 0x24
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694c:	d102      	bne.n	8006954 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800694e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006952:	e00b      	b.n	800696c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006954:	4b08      	ldr	r3, [pc, #32]	; (8006978 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d102      	bne.n	800696a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006968:	e000      	b.n	800696c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800696a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40007000 	.word	0x40007000

0800697c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d141      	bne.n	8006a0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800698a:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006996:	d131      	bne.n	80069fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006998:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	4a46      	ldr	r2, [pc, #280]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069a8:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069b0:	4a41      	ldr	r2, [pc, #260]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80069b8:	4b40      	ldr	r3, [pc, #256]	; (8006abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2232      	movs	r2, #50	; 0x32
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	4a3f      	ldr	r2, [pc, #252]	; (8006ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	0c9b      	lsrs	r3, r3, #18
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ce:	e002      	b.n	80069d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069d6:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e2:	d102      	bne.n	80069ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f2      	bne.n	80069d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069ea:	4b33      	ldr	r3, [pc, #204]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f6:	d158      	bne.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e057      	b.n	8006aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069fc:	4b2e      	ldr	r3, [pc, #184]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a02:	4a2d      	ldr	r2, [pc, #180]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a0c:	e04d      	b.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a14:	d141      	bne.n	8006a9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a16:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a22:	d131      	bne.n	8006a88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a24:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2a:	4a23      	ldr	r2, [pc, #140]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a34:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a3c:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006a44:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2232      	movs	r2, #50	; 0x32
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	0c9b      	lsrs	r3, r3, #18
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a5a:	e002      	b.n	8006a62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d102      	bne.n	8006a76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f2      	bne.n	8006a5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d112      	bne.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e011      	b.n	8006aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a98:	e007      	b.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aa2:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aa8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40007000 	.word	0x40007000
 8006abc:	20000088 	.word	0x20000088
 8006ac0:	431bde83 	.word	0x431bde83

08006ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f000 bc08 	b.w	80072e8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad8:	4b96      	ldr	r3, [pc, #600]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae2:	4b94      	ldr	r3, [pc, #592]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80e4 	beq.w	8006cc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <HAL_RCC_OscConfig+0x4c>
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b0c      	cmp	r3, #12
 8006b04:	f040 808b 	bne.w	8006c1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	f040 8087 	bne.w	8006c1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b10:	4b88      	ldr	r3, [pc, #544]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_OscConfig+0x64>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e3df      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <HAL_RCC_OscConfig+0x7e>
 8006b38:	4b7e      	ldr	r3, [pc, #504]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b40:	e005      	b.n	8006b4e <HAL_RCC_OscConfig+0x8a>
 8006b42:	4b7c      	ldr	r3, [pc, #496]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d223      	bcs.n	8006b9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fdcc 	bl	80076f4 <RCC_SetFlashLatencyFromMSIRange>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e3c0      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b66:	4b73      	ldr	r3, [pc, #460]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a72      	ldr	r2, [pc, #456]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b6c:	f043 0308 	orr.w	r3, r3, #8
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	496d      	ldr	r1, [pc, #436]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b84:	4b6b      	ldr	r3, [pc, #428]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	4968      	ldr	r1, [pc, #416]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	604b      	str	r3, [r1, #4]
 8006b98:	e025      	b.n	8006be6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b9a:	4b66      	ldr	r3, [pc, #408]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a65      	ldr	r2, [pc, #404]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	4960      	ldr	r1, [pc, #384]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bb8:	4b5e      	ldr	r3, [pc, #376]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	495b      	ldr	r1, [pc, #364]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fd8c 	bl	80076f4 <RCC_SetFlashLatencyFromMSIRange>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e380      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006be6:	f000 fcc1 	bl	800756c <HAL_RCC_GetSysClockFreq>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	4950      	ldr	r1, [pc, #320]	; (8006d38 <HAL_RCC_OscConfig+0x274>)
 8006bf8:	5ccb      	ldrb	r3, [r1, r3]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	4a4e      	ldr	r2, [pc, #312]	; (8006d3c <HAL_RCC_OscConfig+0x278>)
 8006c04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c06:	4b4e      	ldr	r3, [pc, #312]	; (8006d40 <HAL_RCC_OscConfig+0x27c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fae0 	bl	80051d0 <HAL_InitTick>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d052      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	e364      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d032      	beq.n	8006c8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c26:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a42      	ldr	r2, [pc, #264]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c2c:	f043 0301 	orr.w	r3, r3, #1
 8006c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c32:	f7fe fb1d 	bl	8005270 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c3a:	f7fe fb19 	bl	8005270 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e34d      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c4c:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c58:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a35      	ldr	r2, [pc, #212]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	4b33      	ldr	r3, [pc, #204]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4930      	ldr	r1, [pc, #192]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c76:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	492b      	ldr	r1, [pc, #172]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	604b      	str	r3, [r1, #4]
 8006c8a:	e01a      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c8c:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006c92:	f023 0301 	bic.w	r3, r3, #1
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c98:	f7fe faea 	bl	8005270 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ca0:	f7fe fae6 	bl	8005270 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e31a      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cb2:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x1dc>
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d073      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d005      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x21c>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d10b      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d063      	beq.n	8006db4 <HAL_RCC_OscConfig+0x2f0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d15f      	bne.n	8006db4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e2f7      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d00:	d106      	bne.n	8006d10 <HAL_RCC_OscConfig+0x24c>
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0b      	ldr	r2, [pc, #44]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	e025      	b.n	8006d5c <HAL_RCC_OscConfig+0x298>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d18:	d114      	bne.n	8006d44 <HAL_RCC_OscConfig+0x280>
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a05      	ldr	r2, [pc, #20]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a02      	ldr	r2, [pc, #8]	; (8006d34 <HAL_RCC_OscConfig+0x270>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e013      	b.n	8006d5c <HAL_RCC_OscConfig+0x298>
 8006d34:	40021000 	.word	0x40021000
 8006d38:	0800ac6c 	.word	0x0800ac6c
 8006d3c:	20000088 	.word	0x20000088
 8006d40:	2000008c 	.word	0x2000008c
 8006d44:	4ba0      	ldr	r3, [pc, #640]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a9f      	ldr	r2, [pc, #636]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	4b9d      	ldr	r3, [pc, #628]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a9c      	ldr	r2, [pc, #624]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d64:	f7fe fa84 	bl	8005270 <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d6c:	f7fe fa80 	bl	8005270 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b64      	cmp	r3, #100	; 0x64
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e2b4      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d7e:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0x2a8>
 8006d8a:	e014      	b.n	8006db6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fe fa70 	bl	8005270 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d94:	f7fe fa6c 	bl	8005270 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b64      	cmp	r3, #100	; 0x64
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e2a0      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006da6:	4b88      	ldr	r3, [pc, #544]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x2d0>
 8006db2:	e000      	b.n	8006db6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d060      	beq.n	8006e84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x310>
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d119      	bne.n	8006e02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d116      	bne.n	8006e02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd4:	4b7c      	ldr	r3, [pc, #496]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_RCC_OscConfig+0x328>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e27d      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dec:	4b76      	ldr	r3, [pc, #472]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	4973      	ldr	r1, [pc, #460]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e00:	e040      	b.n	8006e84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d023      	beq.n	8006e52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e0a:	4b6f      	ldr	r3, [pc, #444]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6e      	ldr	r2, [pc, #440]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e16:	f7fe fa2b 	bl	8005270 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e1e:	f7fe fa27 	bl	8005270 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e25b      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e30:	4b65      	ldr	r3, [pc, #404]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3c:	4b62      	ldr	r3, [pc, #392]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	495f      	ldr	r1, [pc, #380]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]
 8006e50:	e018      	b.n	8006e84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e52:	4b5d      	ldr	r3, [pc, #372]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a5c      	ldr	r2, [pc, #368]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fe fa07 	bl	8005270 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e66:	f7fe fa03 	bl	8005270 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e237      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e78:	4b53      	ldr	r3, [pc, #332]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d03c      	beq.n	8006f0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01c      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e98:	4b4b      	ldr	r3, [pc, #300]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9e:	4a4a      	ldr	r2, [pc, #296]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006ea0:	f043 0301 	orr.w	r3, r3, #1
 8006ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fe f9e2 	bl	8005270 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb0:	f7fe f9de 	bl	8005270 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e212      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ec2:	4b41      	ldr	r3, [pc, #260]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ef      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x3ec>
 8006ed0:	e01b      	b.n	8006f0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed2:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed8:	4a3b      	ldr	r2, [pc, #236]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee2:	f7fe f9c5 	bl	8005270 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eea:	f7fe f9c1 	bl	8005270 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e1f5      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006efc:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ef      	bne.n	8006eea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80a6 	beq.w	8007064 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f1c:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10d      	bne.n	8006f44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f28:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f32:	6593      	str	r3, [r2, #88]	; 0x58
 8006f34:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f40:	2301      	movs	r3, #1
 8006f42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCC_OscConfig+0x508>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d118      	bne.n	8006f82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <HAL_RCC_OscConfig+0x508>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <HAL_RCC_OscConfig+0x508>)
 8006f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5c:	f7fe f988 	bl	8005270 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f64:	f7fe f984 	bl	8005270 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e1b8      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <HAL_RCC_OscConfig+0x508>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d108      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4d8>
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	4a0d      	ldr	r2, [pc, #52]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f9a:	e029      	b.n	8006ff0 <HAL_RCC_OscConfig+0x52c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d115      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x50c>
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	4a07      	ldr	r2, [pc, #28]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006fac:	f043 0304 	orr.w	r3, r3, #4
 8006fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <HAL_RCC_OscConfig+0x504>)
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fc4:	e014      	b.n	8006ff0 <HAL_RCC_OscConfig+0x52c>
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	40007000 	.word	0x40007000
 8006fd0:	4b9d      	ldr	r3, [pc, #628]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd6:	4a9c      	ldr	r2, [pc, #624]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fe0:	4b99      	ldr	r3, [pc, #612]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe6:	4a98      	ldr	r2, [pc, #608]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d016      	beq.n	8007026 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff8:	f7fe f93a 	bl	8005270 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007000:	f7fe f936 	bl	8005270 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e168      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007016:	4b8c      	ldr	r3, [pc, #560]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0ed      	beq.n	8007000 <HAL_RCC_OscConfig+0x53c>
 8007024:	e015      	b.n	8007052 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007026:	f7fe f923 	bl	8005270 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800702c:	e00a      	b.n	8007044 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702e:	f7fe f91f 	bl	8005270 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	f241 3288 	movw	r2, #5000	; 0x1388
 800703c:	4293      	cmp	r3, r2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e151      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007044:	4b80      	ldr	r3, [pc, #512]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1ed      	bne.n	800702e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007052:	7ffb      	ldrb	r3, [r7, #31]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d105      	bne.n	8007064 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007058:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	4a7a      	ldr	r2, [pc, #488]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 800705e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007062:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d03c      	beq.n	80070ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01c      	beq.n	80070b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007078:	4b73      	ldr	r3, [pc, #460]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 800707a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800707e:	4a72      	ldr	r2, [pc, #456]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fe f8f2 	bl	8005270 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007090:	f7fe f8ee 	bl	8005270 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e122      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070a2:	4b69      	ldr	r3, [pc, #420]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80070a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0ef      	beq.n	8007090 <HAL_RCC_OscConfig+0x5cc>
 80070b0:	e01b      	b.n	80070ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070b2:	4b65      	ldr	r3, [pc, #404]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80070b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070b8:	4a63      	ldr	r2, [pc, #396]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c2:	f7fe f8d5 	bl	8005270 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ca:	f7fe f8d1 	bl	8005270 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e105      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070dc:	4b5a      	ldr	r3, [pc, #360]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80070de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ef      	bne.n	80070ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80f9 	beq.w	80072e6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	f040 80cf 	bne.w	800729c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80070fe:	4b52      	ldr	r3, [pc, #328]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0203 	and.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	d12c      	bne.n	800716c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	3b01      	subs	r3, #1
 800711e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007120:	429a      	cmp	r2, r3
 8007122:	d123      	bne.n	800716c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007130:	429a      	cmp	r2, r3
 8007132:	d11b      	bne.n	800716c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007140:	429a      	cmp	r2, r3
 8007142:	d113      	bne.n	800716c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	3b01      	subs	r3, #1
 8007152:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d109      	bne.n	800716c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	3b01      	subs	r3, #1
 8007166:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007168:	429a      	cmp	r2, r3
 800716a:	d071      	beq.n	8007250 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d068      	beq.n	8007244 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007172:	4b35      	ldr	r3, [pc, #212]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800717e:	4b32      	ldr	r3, [pc, #200]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0ac      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800718e:	4b2e      	ldr	r3, [pc, #184]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007198:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800719a:	f7fe f869 	bl	8005270 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a2:	f7fe f865 	bl	8005270 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e099      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071c0:	4b21      	ldr	r3, [pc, #132]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <HAL_RCC_OscConfig+0x788>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071d0:	3a01      	subs	r2, #1
 80071d2:	0112      	lsls	r2, r2, #4
 80071d4:	4311      	orrs	r1, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071da:	0212      	lsls	r2, r2, #8
 80071dc:	4311      	orrs	r1, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071e2:	0852      	lsrs	r2, r2, #1
 80071e4:	3a01      	subs	r2, #1
 80071e6:	0552      	lsls	r2, r2, #21
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071ee:	0852      	lsrs	r2, r2, #1
 80071f0:	3a01      	subs	r2, #1
 80071f2:	0652      	lsls	r2, r2, #25
 80071f4:	4311      	orrs	r1, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071fa:	06d2      	lsls	r2, r2, #27
 80071fc:	430a      	orrs	r2, r1
 80071fe:	4912      	ldr	r1, [pc, #72]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007200:	4313      	orrs	r3, r2
 8007202:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a0f      	ldr	r2, [pc, #60]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 800720a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800720e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007210:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4a0c      	ldr	r2, [pc, #48]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800721a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800721c:	f7fe f828 	bl	8005270 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007224:	f7fe f824 	bl	8005270 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e058      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007236:	4b04      	ldr	r3, [pc, #16]	; (8007248 <HAL_RCC_OscConfig+0x784>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f0      	beq.n	8007224 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007242:	e050      	b.n	80072e6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e04f      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
 8007248:	40021000 	.word	0x40021000
 800724c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d144      	bne.n	80072e6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 8007262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007268:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 800726e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007274:	f7fd fffc 	bl	8005270 <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727c:	f7fd fff8 	bl	8005270 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e02c      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800728e:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0x7b8>
 800729a:	e024      	b.n	80072e6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b0c      	cmp	r3, #12
 80072a0:	d01f      	beq.n	80072e2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 80072a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fd ffdf 	bl	8005270 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072b6:	f7fd ffdb 	bl	8005270 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e00f      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f0      	bne.n	80072b6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	4905      	ldr	r1, [pc, #20]	; (80072f0 <HAL_RCC_OscConfig+0x82c>)
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCC_OscConfig+0x830>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60cb      	str	r3, [r1, #12]
 80072e0:	e001      	b.n	80072e6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40021000 	.word	0x40021000
 80072f4:	feeefffc 	.word	0xfeeefffc

080072f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e11d      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007310:	4b90      	ldr	r3, [pc, #576]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d910      	bls.n	8007340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b8d      	ldr	r3, [pc, #564]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 020f 	bic.w	r2, r3, #15
 8007326:	498b      	ldr	r1, [pc, #556]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800732e:	4b89      	ldr	r3, [pc, #548]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d001      	beq.n	8007340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e105      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	4b81      	ldr	r3, [pc, #516]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007358:	429a      	cmp	r2, r3
 800735a:	d908      	bls.n	800736e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735c:	4b7e      	ldr	r3, [pc, #504]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	497b      	ldr	r1, [pc, #492]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800736a:	4313      	orrs	r3, r2
 800736c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d079      	beq.n	800746e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d11e      	bne.n	80073c0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007382:	4b75      	ldr	r3, [pc, #468]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e0dc      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007392:	f000 fa09 	bl	80077a8 <RCC_GetSysClockFreqFromPLLSource>
 8007396:	4603      	mov	r3, r0
 8007398:	4a70      	ldr	r2, [pc, #448]	; (800755c <HAL_RCC_ClockConfig+0x264>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d946      	bls.n	800742c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800739e:	4b6e      	ldr	r3, [pc, #440]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d140      	bne.n	800742c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073aa:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b2:	4a69      	ldr	r2, [pc, #420]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e035      	b.n	800742c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d107      	bne.n	80073d8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073c8:	4b63      	ldr	r3, [pc, #396]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d115      	bne.n	8007400 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0b9      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073e0:	4b5d      	ldr	r3, [pc, #372]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0ad      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073f0:	4b59      	ldr	r3, [pc, #356]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0a5      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007400:	f000 f8b4 	bl	800756c <HAL_RCC_GetSysClockFreq>
 8007404:	4603      	mov	r3, r0
 8007406:	4a55      	ldr	r2, [pc, #340]	; (800755c <HAL_RCC_ClockConfig+0x264>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d90f      	bls.n	800742c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800740c:	4b52      	ldr	r3, [pc, #328]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007418:	4b4f      	ldr	r3, [pc, #316]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007420:	4a4d      	ldr	r2, [pc, #308]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007428:	2380      	movs	r3, #128	; 0x80
 800742a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800742c:	4b4a      	ldr	r3, [pc, #296]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f023 0203 	bic.w	r2, r3, #3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4947      	ldr	r1, [pc, #284]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800743a:	4313      	orrs	r3, r2
 800743c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743e:	f7fd ff17 	bl	8005270 <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007444:	e00a      	b.n	800745c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007446:	f7fd ff13 	bl	8005270 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	f241 3288 	movw	r2, #5000	; 0x1388
 8007454:	4293      	cmp	r3, r2
 8007456:	d901      	bls.n	800745c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e077      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745c:	4b3e      	ldr	r3, [pc, #248]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 020c 	and.w	r2, r3, #12
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	429a      	cmp	r2, r3
 800746c:	d1eb      	bne.n	8007446 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d105      	bne.n	8007480 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007474:	4b38      	ldr	r3, [pc, #224]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a37      	ldr	r2, [pc, #220]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800747a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800747e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d010      	beq.n	80074ae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	4b31      	ldr	r3, [pc, #196]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007498:	429a      	cmp	r2, r3
 800749a:	d208      	bcs.n	80074ae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800749c:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	492b      	ldr	r1, [pc, #172]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ae:	4b29      	ldr	r3, [pc, #164]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d210      	bcs.n	80074de <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f023 020f 	bic.w	r2, r3, #15
 80074c4:	4923      	ldr	r1, [pc, #140]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074cc:	4b21      	ldr	r3, [pc, #132]	; (8007554 <HAL_RCC_ClockConfig+0x25c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e036      	b.n	800754c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	4918      	ldr	r1, [pc, #96]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007508:	4b13      	ldr	r3, [pc, #76]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	4910      	ldr	r1, [pc, #64]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007518:	4313      	orrs	r3, r2
 800751a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800751c:	f000 f826 	bl	800756c <HAL_RCC_GetSysClockFreq>
 8007520:	4602      	mov	r2, r0
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <HAL_RCC_ClockConfig+0x260>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	490c      	ldr	r1, [pc, #48]	; (8007560 <HAL_RCC_ClockConfig+0x268>)
 800752e:	5ccb      	ldrb	r3, [r1, r3]
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <HAL_RCC_ClockConfig+0x26c>)
 800753a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <HAL_RCC_ClockConfig+0x270>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd fe45 	bl	80051d0 <HAL_InitTick>
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40022000 	.word	0x40022000
 8007558:	40021000 	.word	0x40021000
 800755c:	04c4b400 	.word	0x04c4b400
 8007560:	0800ac6c 	.word	0x0800ac6c
 8007564:	20000088 	.word	0x20000088
 8007568:	2000008c 	.word	0x2000008c

0800756c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800756c:	b480      	push	{r7}
 800756e:	b089      	sub	sp, #36	; 0x24
 8007570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800757a:	4b3e      	ldr	r3, [pc, #248]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 030c 	and.w	r3, r3, #12
 8007582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007584:	4b3b      	ldr	r3, [pc, #236]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x34>
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b0c      	cmp	r3, #12
 8007598:	d121      	bne.n	80075de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d11e      	bne.n	80075de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80075a0:	4b34      	ldr	r3, [pc, #208]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d107      	bne.n	80075bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80075ac:	4b31      	ldr	r3, [pc, #196]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 80075ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e005      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80075bc:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80075c8:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10d      	bne.n	80075f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075dc:	e00a      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d102      	bne.n	80075ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <HAL_RCC_GetSysClockFreq+0x110>)
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e004      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d101      	bne.n	80075f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075f0:	4b23      	ldr	r3, [pc, #140]	; (8007680 <HAL_RCC_GetSysClockFreq+0x114>)
 80075f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b0c      	cmp	r3, #12
 80075f8:	d134      	bne.n	8007664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d003      	beq.n	8007612 <HAL_RCC_GetSysClockFreq+0xa6>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d003      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0xac>
 8007610:	e005      	b.n	800761e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007612:	4b1a      	ldr	r3, [pc, #104]	; (800767c <HAL_RCC_GetSysClockFreq+0x110>)
 8007614:	617b      	str	r3, [r7, #20]
      break;
 8007616:	e005      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007618:	4b19      	ldr	r3, [pc, #100]	; (8007680 <HAL_RCC_GetSysClockFreq+0x114>)
 800761a:	617b      	str	r3, [r7, #20]
      break;
 800761c:	e002      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	617b      	str	r3, [r7, #20]
      break;
 8007622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	3301      	adds	r3, #1
 8007630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	fb03 f202 	mul.w	r2, r3, r2
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	fbb2 f3f3 	udiv	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <HAL_RCC_GetSysClockFreq+0x108>)
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	0e5b      	lsrs	r3, r3, #25
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	3301      	adds	r3, #1
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007664:	69bb      	ldr	r3, [r7, #24]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40021000 	.word	0x40021000
 8007678:	0800ac84 	.word	0x0800ac84
 800767c:	00f42400 	.word	0x00f42400
 8007680:	007a1200 	.word	0x007a1200

08007684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <HAL_RCC_GetHCLKFreq+0x14>)
 800768a:	681b      	ldr	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000088 	.word	0x20000088

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076a0:	f7ff fff0 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4904      	ldr	r1, [pc, #16]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40021000 	.word	0x40021000
 80076c4:	0800ac7c 	.word	0x0800ac7c

080076c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076cc:	f7ff ffda 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	0adb      	lsrs	r3, r3, #11
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4904      	ldr	r1, [pc, #16]	; (80076f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076de:	5ccb      	ldrb	r3, [r1, r3]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40021000 	.word	0x40021000
 80076f0:	0800ac7c 	.word	0x0800ac7c

080076f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800770c:	f7ff f916 	bl	800693c <HAL_PWREx_GetVoltageRange>
 8007710:	6178      	str	r0, [r7, #20]
 8007712:	e014      	b.n	800773e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007714:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	4a21      	ldr	r2, [pc, #132]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800771a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771e:	6593      	str	r3, [r2, #88]	; 0x58
 8007720:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800772c:	f7ff f906 	bl	800693c <HAL_PWREx_GetVoltageRange>
 8007730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007732:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007736:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800773c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007744:	d10b      	bne.n	800775e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d913      	bls.n	8007774 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2ba0      	cmp	r3, #160	; 0xa0
 8007750:	d902      	bls.n	8007758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007752:	2302      	movs	r3, #2
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	e00d      	b.n	8007774 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007758:	2301      	movs	r3, #1
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	e00a      	b.n	8007774 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b7f      	cmp	r3, #127	; 0x7f
 8007762:	d902      	bls.n	800776a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007764:	2302      	movs	r3, #2
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	e004      	b.n	8007774 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b70      	cmp	r3, #112	; 0x70
 800776e:	d101      	bne.n	8007774 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007770:	2301      	movs	r3, #1
 8007772:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f023 020f 	bic.w	r2, r3, #15
 800777c:	4909      	ldr	r1, [pc, #36]	; (80077a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d001      	beq.n	8007796 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	40021000 	.word	0x40021000
 80077a4:	40022000 	.word	0x40022000

080077a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077ae:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d00b      	beq.n	80077d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d825      	bhi.n	8007810 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d008      	beq.n	80077dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d11f      	bne.n	8007810 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80077d0:	4b25      	ldr	r3, [pc, #148]	; (8007868 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80077d2:	613b      	str	r3, [r7, #16]
    break;
 80077d4:	e01f      	b.n	8007816 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80077d6:	4b25      	ldr	r3, [pc, #148]	; (800786c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80077d8:	613b      	str	r3, [r7, #16]
    break;
 80077da:	e01c      	b.n	8007816 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80077dc:	4b21      	ldr	r3, [pc, #132]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d107      	bne.n	80077f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e005      	b.n	8007804 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077f8:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007804:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800780c:	613b      	str	r3, [r7, #16]
    break;
 800780e:	e002      	b.n	8007816 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
    break;
 8007814:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	091b      	lsrs	r3, r3, #4
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	3301      	adds	r3, #1
 8007822:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007824:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	fb03 f202 	mul.w	r2, r3, r2
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800783c:	4b09      	ldr	r3, [pc, #36]	; (8007864 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	0e5b      	lsrs	r3, r3, #25
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	3301      	adds	r3, #1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007856:	683b      	ldr	r3, [r7, #0]
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	40021000 	.word	0x40021000
 8007868:	00f42400 	.word	0x00f42400
 800786c:	007a1200 	.word	0x007a1200
 8007870:	0800ac84 	.word	0x0800ac84

08007874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800787c:	2300      	movs	r3, #0
 800787e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007880:	2300      	movs	r3, #0
 8007882:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788c:	2b00      	cmp	r3, #0
 800788e:	d040      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d02a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007898:	2b80      	cmp	r3, #128	; 0x80
 800789a:	d825      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800789c:	2b60      	cmp	r3, #96	; 0x60
 800789e:	d026      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078a0:	2b60      	cmp	r3, #96	; 0x60
 80078a2:	d821      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d006      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d81d      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d010      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80078b4:	e018      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078b6:	4b89      	ldr	r3, [pc, #548]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4a88      	ldr	r2, [pc, #544]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078c2:	e015      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fb62 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078d4:	e00c      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3320      	adds	r3, #32
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fc4d 	bl	800817c <RCCEx_PLLSAI2_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078e6:	e003      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	74fb      	strb	r3, [r7, #19]
      break;
 80078ec:	e000      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80078ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078f6:	4b79      	ldr	r3, [pc, #484]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007904:	4975      	ldr	r1, [pc, #468]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7cfb      	ldrb	r3, [r7, #19]
 8007910:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d047      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007926:	d030      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d82a      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d02a      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007938:	d824      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800793a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793e:	d008      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007944:	d81e      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800794a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794e:	d010      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007950:	e018      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007952:	4b62      	ldr	r3, [pc, #392]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4a61      	ldr	r2, [pc, #388]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800795c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800795e:	e015      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb14 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007970:	e00c      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3320      	adds	r3, #32
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fbff 	bl	800817c <RCCEx_PLLSAI2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007982:	e003      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	74fb      	strb	r3, [r7, #19]
      break;
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800798a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798c:	7cfb      	ldrb	r3, [r7, #19]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007992:	4b52      	ldr	r3, [pc, #328]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a0:	494e      	ldr	r1, [pc, #312]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80079a8:	e001      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 809f 	beq.w	8007afa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079bc:	2300      	movs	r3, #0
 80079be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079c0:	4b46      	ldr	r3, [pc, #280]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00d      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079d6:	4b41      	ldr	r3, [pc, #260]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	4a40      	ldr	r2, [pc, #256]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6593      	str	r3, [r2, #88]	; 0x58
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ee:	2301      	movs	r3, #1
 80079f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f2:	4b3b      	ldr	r3, [pc, #236]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3a      	ldr	r2, [pc, #232]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079fe:	f7fd fc37 	bl	8005270 <HAL_GetTick>
 8007a02:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a04:	e009      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a06:	f7fd fc33 	bl	8005270 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d902      	bls.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	74fb      	strb	r3, [r7, #19]
        break;
 8007a18:	e005      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0ef      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007a26:	7cfb      	ldrb	r3, [r7, #19]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d15b      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a2c:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a36:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01f      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d019      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a4a:	4b24      	ldr	r3, [pc, #144]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a56:	4b21      	ldr	r3, [pc, #132]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	4a1f      	ldr	r2, [pc, #124]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a76:	4a19      	ldr	r2, [pc, #100]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d016      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fd fbf2 	bl	8005270 <HAL_GetTick>
 8007a8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a8e:	e00b      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fd fbee 	bl	8005270 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d902      	bls.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	74fb      	strb	r3, [r7, #19]
            break;
 8007aa6:	e006      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0ec      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007ab6:	7cfb      	ldrb	r3, [r7, #19]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007abc:	4b07      	ldr	r3, [pc, #28]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007acc:	4903      	ldr	r1, [pc, #12]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ad6:	7cfb      	ldrb	r3, [r7, #19]
 8007ad8:	74bb      	strb	r3, [r7, #18]
 8007ada:	e005      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	7cfb      	ldrb	r3, [r7, #19]
 8007ae6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ae8:	7c7b      	ldrb	r3, [r7, #17]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d105      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aee:	4ba0      	ldr	r3, [pc, #640]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	4a9f      	ldr	r2, [pc, #636]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b06:	4b9a      	ldr	r3, [pc, #616]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	f023 0203 	bic.w	r2, r3, #3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	4996      	ldr	r1, [pc, #600]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b28:	4b91      	ldr	r3, [pc, #580]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	f023 020c 	bic.w	r2, r3, #12
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	498e      	ldr	r1, [pc, #568]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b4a:	4b89      	ldr	r3, [pc, #548]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	4985      	ldr	r1, [pc, #532]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b6c:	4b80      	ldr	r3, [pc, #512]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7a:	497d      	ldr	r1, [pc, #500]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b8e:	4b78      	ldr	r3, [pc, #480]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	4974      	ldr	r1, [pc, #464]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bb0:	4b6f      	ldr	r3, [pc, #444]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	496c      	ldr	r1, [pc, #432]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bd2:	4b67      	ldr	r3, [pc, #412]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be0:	4963      	ldr	r1, [pc, #396]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bf4:	4b5e      	ldr	r3, [pc, #376]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c02:	495b      	ldr	r1, [pc, #364]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c16:	4b56      	ldr	r3, [pc, #344]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c24:	4952      	ldr	r1, [pc, #328]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c38:	4b4d      	ldr	r3, [pc, #308]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	494a      	ldr	r1, [pc, #296]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c5a:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	4941      	ldr	r1, [pc, #260]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c7c:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8a:	4939      	ldr	r1, [pc, #228]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d028      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c9e:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cac:	4930      	ldr	r1, [pc, #192]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbe:	4b2c      	ldr	r3, [pc, #176]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4a2b      	ldr	r2, [pc, #172]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc8:	60d3      	str	r3, [r2, #12]
 8007cca:	e011      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 f959 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007ce6:	7cfb      	ldrb	r3, [r7, #19]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d04d      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d04:	d108      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007d06:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d0c:	4a18      	ldr	r2, [pc, #96]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007d16:	e012      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d1e:	4a14      	ldr	r2, [pc, #80]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d36:	490e      	ldr	r1, [pc, #56]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d46:	d106      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d52:	60d3      	str	r3, [r2, #12]
 8007d54:	e020      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d5e:	d109      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d60:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	4a02      	ldr	r2, [pc, #8]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6a:	60d3      	str	r3, [r2, #12]
 8007d6c:	e014      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d6e:	bf00      	nop
 8007d70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3304      	adds	r3, #4
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f905 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d028      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da4:	4b7a      	ldr	r3, [pc, #488]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	4977      	ldr	r1, [pc, #476]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc4:	4b72      	ldr	r3, [pc, #456]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4a71      	ldr	r2, [pc, #452]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dce:	60d3      	str	r3, [r2, #12]
 8007dd0:	e011      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dda:	d10c      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	2101      	movs	r1, #1
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f8d6 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dec:	7cfb      	ldrb	r3, [r7, #19]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007df2:	7cfb      	ldrb	r3, [r7, #19]
 8007df4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d01e      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e12:	495f      	ldr	r1, [pc, #380]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f8b1 	bl	8007f94 <RCCEx_PLLSAI1_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e36:	7cfb      	ldrb	r3, [r7, #19]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007e3c:	7cfb      	ldrb	r3, [r7, #19]
 8007e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e4c:	4b50      	ldr	r3, [pc, #320]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e52:	f023 0204 	bic.w	r2, r3, #4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5c:	494c      	ldr	r1, [pc, #304]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e70:	4b47      	ldr	r3, [pc, #284]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e76:	f023 0218 	bic.w	r2, r3, #24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	4943      	ldr	r1, [pc, #268]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d035      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e94:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea0:	f7fd f9e6 	bl	8005270 <HAL_GetTick>
 8007ea4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ea6:	e009      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ea8:	f7fd f9e2 	bl	8005270 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d902      	bls.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	74fb      	strb	r3, [r7, #19]
        break;
 8007eba:	e005      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ebc:	4b34      	ldr	r3, [pc, #208]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ef      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007ec8:	7cfb      	ldrb	r3, [r7, #19]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d113      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007ece:	4b30      	ldr	r3, [pc, #192]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ede:	492c      	ldr	r1, [pc, #176]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3320      	adds	r3, #32
 8007eea:	2102      	movs	r1, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 f945 	bl	800817c <RCCEx_PLLSAI2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007ef6:	7cfb      	ldrb	r3, [r7, #19]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007efc:	7cfb      	ldrb	r3, [r7, #19]
 8007efe:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01e      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007f0c:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	491c      	ldr	r1, [pc, #112]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2e:	d10c      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3320      	adds	r3, #32
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f920 	bl	800817c <RCCEx_PLLSAI2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8007f46:	7cfb      	ldrb	r3, [r7, #19]
 8007f48:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d017      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007f56:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f66:	490a      	ldr	r1, [pc, #40]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f78:	d105      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f84:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f86:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000

08007f94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007fa2:	4b72      	ldr	r3, [pc, #456]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007fae:	4b6f      	ldr	r3, [pc, #444]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f003 0203 	and.w	r2, r3, #3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d103      	bne.n	8007fc6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
       ||
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d142      	bne.n	800804c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
 8007fca:	e03f      	b.n	800804c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d018      	beq.n	8008006 <RCCEx_PLLSAI1_Config+0x72>
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d825      	bhi.n	8008024 <RCCEx_PLLSAI1_Config+0x90>
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d002      	beq.n	8007fe2 <RCCEx_PLLSAI1_Config+0x4e>
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d009      	beq.n	8007ff4 <RCCEx_PLLSAI1_Config+0x60>
 8007fe0:	e020      	b.n	8008024 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fe2:	4b62      	ldr	r3, [pc, #392]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d11d      	bne.n	800802a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ff2:	e01a      	b.n	800802a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ff4:	4b5d      	ldr	r3, [pc, #372]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d116      	bne.n	800802e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008004:	e013      	b.n	800802e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008006:	4b59      	ldr	r3, [pc, #356]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10f      	bne.n	8008032 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008012:	4b56      	ldr	r3, [pc, #344]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008022:	e006      	b.n	8008032 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
      break;
 8008028:	e004      	b.n	8008034 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008032:	bf00      	nop
    }

    if(status == HAL_OK)
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d108      	bne.n	800804c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800803a:	4b4c      	ldr	r3, [pc, #304]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f023 0203 	bic.w	r2, r3, #3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4949      	ldr	r1, [pc, #292]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008048:	4313      	orrs	r3, r2
 800804a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f040 8086 	bne.w	8008160 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008054:	4b45      	ldr	r3, [pc, #276]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a44      	ldr	r2, [pc, #272]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800805a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800805e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008060:	f7fd f906 	bl	8005270 <HAL_GetTick>
 8008064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008066:	e009      	b.n	800807c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008068:	f7fd f902 	bl	8005270 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d902      	bls.n	800807c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	73fb      	strb	r3, [r7, #15]
        break;
 800807a:	e005      	b.n	8008088 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800807c:	4b3b      	ldr	r3, [pc, #236]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1ef      	bne.n	8008068 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d168      	bne.n	8008160 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d113      	bne.n	80080bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008094:	4b35      	ldr	r3, [pc, #212]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <RCCEx_PLLSAI1_Config+0x1dc>)
 800809a:	4013      	ands	r3, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6892      	ldr	r2, [r2, #8]
 80080a0:	0211      	lsls	r1, r2, #8
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68d2      	ldr	r2, [r2, #12]
 80080a6:	06d2      	lsls	r2, r2, #27
 80080a8:	4311      	orrs	r1, r2
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	6852      	ldr	r2, [r2, #4]
 80080ae:	3a01      	subs	r2, #1
 80080b0:	0112      	lsls	r2, r2, #4
 80080b2:	430a      	orrs	r2, r1
 80080b4:	492d      	ldr	r1, [pc, #180]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	610b      	str	r3, [r1, #16]
 80080ba:	e02d      	b.n	8008118 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d115      	bne.n	80080ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080c2:	4b2a      	ldr	r3, [pc, #168]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6892      	ldr	r2, [r2, #8]
 80080ce:	0211      	lsls	r1, r2, #8
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6912      	ldr	r2, [r2, #16]
 80080d4:	0852      	lsrs	r2, r2, #1
 80080d6:	3a01      	subs	r2, #1
 80080d8:	0552      	lsls	r2, r2, #21
 80080da:	4311      	orrs	r1, r2
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	3a01      	subs	r2, #1
 80080e2:	0112      	lsls	r2, r2, #4
 80080e4:	430a      	orrs	r2, r1
 80080e6:	4921      	ldr	r1, [pc, #132]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	610b      	str	r3, [r1, #16]
 80080ec:	e014      	b.n	8008118 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ee:	4b1f      	ldr	r3, [pc, #124]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6892      	ldr	r2, [r2, #8]
 80080fa:	0211      	lsls	r1, r2, #8
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6952      	ldr	r2, [r2, #20]
 8008100:	0852      	lsrs	r2, r2, #1
 8008102:	3a01      	subs	r2, #1
 8008104:	0652      	lsls	r2, r2, #25
 8008106:	4311      	orrs	r1, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6852      	ldr	r2, [r2, #4]
 800810c:	3a01      	subs	r2, #1
 800810e:	0112      	lsls	r2, r2, #4
 8008110:	430a      	orrs	r2, r1
 8008112:	4916      	ldr	r1, [pc, #88]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008114:	4313      	orrs	r3, r2
 8008116:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008118:	4b14      	ldr	r3, [pc, #80]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800811e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008124:	f7fd f8a4 	bl	8005270 <HAL_GetTick>
 8008128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800812a:	e009      	b.n	8008140 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800812c:	f7fd f8a0 	bl	8005270 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d902      	bls.n	8008140 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	73fb      	strb	r3, [r7, #15]
          break;
 800813e:	e005      	b.n	800814c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0ef      	beq.n	800812c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008152:	4b06      	ldr	r3, [pc, #24]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	4904      	ldr	r1, [pc, #16]	; (800816c <RCCEx_PLLSAI1_Config+0x1d8>)
 800815c:	4313      	orrs	r3, r2
 800815e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40021000 	.word	0x40021000
 8008170:	07ff800f 	.word	0x07ff800f
 8008174:	ff9f800f 	.word	0xff9f800f
 8008178:	f9ff800f 	.word	0xf9ff800f

0800817c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800818a:	4b72      	ldr	r3, [pc, #456]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008196:	4b6f      	ldr	r3, [pc, #444]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f003 0203 	and.w	r2, r3, #3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d103      	bne.n	80081ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
       ||
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d142      	bne.n	8008234 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]
 80081b2:	e03f      	b.n	8008234 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d018      	beq.n	80081ee <RCCEx_PLLSAI2_Config+0x72>
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d825      	bhi.n	800820c <RCCEx_PLLSAI2_Config+0x90>
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d002      	beq.n	80081ca <RCCEx_PLLSAI2_Config+0x4e>
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d009      	beq.n	80081dc <RCCEx_PLLSAI2_Config+0x60>
 80081c8:	e020      	b.n	800820c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081ca:	4b62      	ldr	r3, [pc, #392]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d11d      	bne.n	8008212 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081da:	e01a      	b.n	8008212 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80081dc:	4b5d      	ldr	r3, [pc, #372]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d116      	bne.n	8008216 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ec:	e013      	b.n	8008216 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081ee:	4b59      	ldr	r3, [pc, #356]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10f      	bne.n	800821a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081fa:	4b56      	ldr	r3, [pc, #344]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800820a:	e006      	b.n	800821a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e004      	b.n	800821c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008212:	bf00      	nop
 8008214:	e002      	b.n	800821c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008216:	bf00      	nop
 8008218:	e000      	b.n	800821c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800821a:	bf00      	nop
    }

    if(status == HAL_OK)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d108      	bne.n	8008234 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008222:	4b4c      	ldr	r3, [pc, #304]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f023 0203 	bic.w	r2, r3, #3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4949      	ldr	r1, [pc, #292]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008230:	4313      	orrs	r3, r2
 8008232:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 8086 	bne.w	8008348 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800823c:	4b45      	ldr	r3, [pc, #276]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a44      	ldr	r2, [pc, #272]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008248:	f7fd f812 	bl	8005270 <HAL_GetTick>
 800824c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800824e:	e009      	b.n	8008264 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008250:	f7fd f80e 	bl	8005270 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d902      	bls.n	8008264 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
        break;
 8008262:	e005      	b.n	8008270 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008264:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1ef      	bne.n	8008250 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d168      	bne.n	8008348 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d113      	bne.n	80082a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800827c:	4b35      	ldr	r3, [pc, #212]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800827e:	695a      	ldr	r2, [r3, #20]
 8008280:	4b35      	ldr	r3, [pc, #212]	; (8008358 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008282:	4013      	ands	r3, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6892      	ldr	r2, [r2, #8]
 8008288:	0211      	lsls	r1, r2, #8
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68d2      	ldr	r2, [r2, #12]
 800828e:	06d2      	lsls	r2, r2, #27
 8008290:	4311      	orrs	r1, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6852      	ldr	r2, [r2, #4]
 8008296:	3a01      	subs	r2, #1
 8008298:	0112      	lsls	r2, r2, #4
 800829a:	430a      	orrs	r2, r1
 800829c:	492d      	ldr	r1, [pc, #180]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	614b      	str	r3, [r1, #20]
 80082a2:	e02d      	b.n	8008300 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d115      	bne.n	80082d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80082aa:	4b2a      	ldr	r3, [pc, #168]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ac:	695a      	ldr	r2, [r3, #20]
 80082ae:	4b2b      	ldr	r3, [pc, #172]	; (800835c <RCCEx_PLLSAI2_Config+0x1e0>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6892      	ldr	r2, [r2, #8]
 80082b6:	0211      	lsls	r1, r2, #8
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6912      	ldr	r2, [r2, #16]
 80082bc:	0852      	lsrs	r2, r2, #1
 80082be:	3a01      	subs	r2, #1
 80082c0:	0552      	lsls	r2, r2, #21
 80082c2:	4311      	orrs	r1, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6852      	ldr	r2, [r2, #4]
 80082c8:	3a01      	subs	r2, #1
 80082ca:	0112      	lsls	r2, r2, #4
 80082cc:	430a      	orrs	r2, r1
 80082ce:	4921      	ldr	r1, [pc, #132]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	614b      	str	r3, [r1, #20]
 80082d4:	e014      	b.n	8008300 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80082d6:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	4b21      	ldr	r3, [pc, #132]	; (8008360 <RCCEx_PLLSAI2_Config+0x1e4>)
 80082dc:	4013      	ands	r3, r2
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6892      	ldr	r2, [r2, #8]
 80082e2:	0211      	lsls	r1, r2, #8
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6952      	ldr	r2, [r2, #20]
 80082e8:	0852      	lsrs	r2, r2, #1
 80082ea:	3a01      	subs	r2, #1
 80082ec:	0652      	lsls	r2, r2, #25
 80082ee:	4311      	orrs	r1, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6852      	ldr	r2, [r2, #4]
 80082f4:	3a01      	subs	r2, #1
 80082f6:	0112      	lsls	r2, r2, #4
 80082f8:	430a      	orrs	r2, r1
 80082fa:	4916      	ldr	r1, [pc, #88]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008300:	4b14      	ldr	r3, [pc, #80]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a13      	ldr	r2, [pc, #76]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830c:	f7fc ffb0 	bl	8005270 <HAL_GetTick>
 8008310:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008312:	e009      	b.n	8008328 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008314:	f7fc ffac 	bl	8005270 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d902      	bls.n	8008328 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	73fb      	strb	r3, [r7, #15]
          break;
 8008326:	e005      	b.n	8008334 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0ef      	beq.n	8008314 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	4904      	ldr	r1, [pc, #16]	; (8008354 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008344:	4313      	orrs	r3, r2
 8008346:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40021000 	.word	0x40021000
 8008358:	07ff800f 	.word	0x07ff800f
 800835c:	ff9f800f 	.word	0xff9f800f
 8008360:	f9ff800f 	.word	0xf9ff800f

08008364 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d06c      	beq.n	8008450 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7f8 fc2e 	bl	8000bec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	22ca      	movs	r2, #202	; 0xca
 800839e:	625a      	str	r2, [r3, #36]	; 0x24
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2253      	movs	r2, #83	; 0x53
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f87c 	bl	80084a6 <RTC_EnterInitMode>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d14b      	bne.n	8008450 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6899      	ldr	r1, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68d2      	ldr	r2, [r2, #12]
 80083f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6919      	ldr	r1, [r3, #16]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	041a      	lsls	r2, r3, #16
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f87f 	bl	800850c <RTC_ExitInitMode>
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11b      	bne.n	8008450 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0203 	bic.w	r2, r2, #3
 8008426:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69da      	ldr	r2, [r3, #28]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	22ff      	movs	r2, #255	; 0xff
 8008446:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008470:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008472:	f7fc fefd 	bl	8005270 <HAL_GetTick>
 8008476:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008478:	e009      	b.n	800848e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800847a:	f7fc fef9 	bl	8005270 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008488:	d901      	bls.n	800848e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e007      	b.n	800849e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0ee      	beq.n	800847a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d120      	bne.n	8008502 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f04f 32ff 	mov.w	r2, #4294967295
 80084c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80084ca:	f7fc fed1 	bl	8005270 <HAL_GetTick>
 80084ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084d0:	e00d      	b.n	80084ee <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084d2:	f7fc fecd 	bl	8005270 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084e0:	d905      	bls.n	80084ee <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <RTC_EnterInitMode+0x5c>
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d1e7      	bne.n	80084d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <RTC_ExitInitMode+0x78>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a19      	ldr	r2, [pc, #100]	; (8008584 <RTC_ExitInitMode+0x78>)
 800851e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008522:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <RTC_ExitInitMode+0x78>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10c      	bne.n	800854a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ff92 	bl	800845a <HAL_RTC_WaitForSynchro>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01e      	beq.n	800857a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2203      	movs	r2, #3
 8008540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	e017      	b.n	800857a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <RTC_ExitInitMode+0x78>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <RTC_ExitInitMode+0x78>)
 8008550:	f023 0320 	bic.w	r3, r3, #32
 8008554:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff7f 	bl	800845a <HAL_RTC_WaitForSynchro>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2203      	movs	r2, #3
 8008566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <RTC_ExitInitMode+0x78>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	4a04      	ldr	r2, [pc, #16]	; (8008584 <RTC_ExitInitMode+0x78>)
 8008574:	f043 0320 	orr.w	r3, r3, #32
 8008578:	6093      	str	r3, [r2, #8]
  }

  return status;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40002800 	.word	0x40002800

08008588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e049      	b.n	800862e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7f8 fb4e 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f000 f8fe 	bl	80087c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_TIM_ConfigClockSource+0x1c>
 800864e:	2302      	movs	r3, #2
 8008650:	e0b6      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x18a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2202      	movs	r2, #2
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008670:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008674:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800867c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868e:	d03e      	beq.n	800870e <HAL_TIM_ConfigClockSource+0xd8>
 8008690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008694:	f200 8087 	bhi.w	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	f000 8086 	beq.w	80087ac <HAL_TIM_ConfigClockSource+0x176>
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a4:	d87f      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086a6:	2b70      	cmp	r3, #112	; 0x70
 80086a8:	d01a      	beq.n	80086e0 <HAL_TIM_ConfigClockSource+0xaa>
 80086aa:	2b70      	cmp	r3, #112	; 0x70
 80086ac:	d87b      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086ae:	2b60      	cmp	r3, #96	; 0x60
 80086b0:	d050      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x11e>
 80086b2:	2b60      	cmp	r3, #96	; 0x60
 80086b4:	d877      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086b6:	2b50      	cmp	r3, #80	; 0x50
 80086b8:	d03c      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0xfe>
 80086ba:	2b50      	cmp	r3, #80	; 0x50
 80086bc:	d873      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086be:	2b40      	cmp	r3, #64	; 0x40
 80086c0:	d058      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x13e>
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	d86f      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086c6:	2b30      	cmp	r3, #48	; 0x30
 80086c8:	d064      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x15e>
 80086ca:	2b30      	cmp	r3, #48	; 0x30
 80086cc:	d86b      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	d060      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x15e>
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d867      	bhi.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d05c      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x15e>
 80086da:	2b10      	cmp	r3, #16
 80086dc:	d05a      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x15e>
 80086de:	e062      	b.n	80087a6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	6899      	ldr	r1, [r3, #8]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f000 f97e 	bl	80089f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008702:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	609a      	str	r2, [r3, #8]
      break;
 800870c:	e04f      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6899      	ldr	r1, [r3, #8]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f000 f967 	bl	80089f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008730:	609a      	str	r2, [r3, #8]
      break;
 8008732:	e03c      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	461a      	mov	r2, r3
 8008742:	f000 f8db 	bl	80088fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2150      	movs	r1, #80	; 0x50
 800874c:	4618      	mov	r0, r3
 800874e:	f000 f934 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008752:	e02c      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	461a      	mov	r2, r3
 8008762:	f000 f8fa 	bl	800895a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2160      	movs	r1, #96	; 0x60
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f924 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008772:	e01c      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6859      	ldr	r1, [r3, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	461a      	mov	r2, r3
 8008782:	f000 f8bb 	bl	80088fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2140      	movs	r1, #64	; 0x40
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f914 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008792:	e00c      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f000 f90b 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80087a4:	e003      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
      break;
 80087aa:	e000      	b.n	80087ae <HAL_TIM_ConfigClockSource+0x178>
      break;
 80087ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a40      	ldr	r2, [pc, #256]	; (80088dc <TIM_Base_SetConfig+0x114>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d013      	beq.n	8008808 <TIM_Base_SetConfig+0x40>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e6:	d00f      	beq.n	8008808 <TIM_Base_SetConfig+0x40>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a3d      	ldr	r2, [pc, #244]	; (80088e0 <TIM_Base_SetConfig+0x118>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_Base_SetConfig+0x40>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a3c      	ldr	r2, [pc, #240]	; (80088e4 <TIM_Base_SetConfig+0x11c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_Base_SetConfig+0x40>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a3b      	ldr	r2, [pc, #236]	; (80088e8 <TIM_Base_SetConfig+0x120>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a3a      	ldr	r2, [pc, #232]	; (80088ec <TIM_Base_SetConfig+0x124>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d108      	bne.n	800881a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2f      	ldr	r2, [pc, #188]	; (80088dc <TIM_Base_SetConfig+0x114>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01f      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008828:	d01b      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2c      	ldr	r2, [pc, #176]	; (80088e0 <TIM_Base_SetConfig+0x118>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d017      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a2b      	ldr	r2, [pc, #172]	; (80088e4 <TIM_Base_SetConfig+0x11c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d013      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2a      	ldr	r2, [pc, #168]	; (80088e8 <TIM_Base_SetConfig+0x120>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00f      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a29      	ldr	r2, [pc, #164]	; (80088ec <TIM_Base_SetConfig+0x124>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a28      	ldr	r2, [pc, #160]	; (80088f0 <TIM_Base_SetConfig+0x128>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a27      	ldr	r2, [pc, #156]	; (80088f4 <TIM_Base_SetConfig+0x12c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_Base_SetConfig+0x9a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a26      	ldr	r2, [pc, #152]	; (80088f8 <TIM_Base_SetConfig+0x130>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d108      	bne.n	8008874 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a10      	ldr	r2, [pc, #64]	; (80088dc <TIM_Base_SetConfig+0x114>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00f      	beq.n	80088c0 <TIM_Base_SetConfig+0xf8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a12      	ldr	r2, [pc, #72]	; (80088ec <TIM_Base_SetConfig+0x124>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <TIM_Base_SetConfig+0xf8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <TIM_Base_SetConfig+0x128>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_Base_SetConfig+0xf8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a10      	ldr	r2, [pc, #64]	; (80088f4 <TIM_Base_SetConfig+0x12c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_Base_SetConfig+0xf8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a0f      	ldr	r2, [pc, #60]	; (80088f8 <TIM_Base_SetConfig+0x130>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d103      	bne.n	80088c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	615a      	str	r2, [r3, #20]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40012c00 	.word	0x40012c00
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	40013400 	.word	0x40013400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800

080088fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f023 0201 	bic.w	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 030a 	bic.w	r3, r3, #10
 8008938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895a:	b480      	push	{r7}
 800895c:	b087      	sub	sp, #28
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f023 0210 	bic.w	r2, r3, #16
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	031b      	lsls	r3, r3, #12
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f043 0307 	orr.w	r3, r3, #7
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	021a      	lsls	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	609a      	str	r2, [r3, #8]
}
 8008a24:	bf00      	nop
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e068      	b.n	8008b1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a2e      	ldr	r2, [pc, #184]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d004      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a2d      	ldr	r2, [pc, #180]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d108      	bne.n	8008a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d01d      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aba:	d018      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1a      	ldr	r2, [pc, #104]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a13      	ldr	r2, [pc, #76]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a14      	ldr	r2, [pc, #80]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10c      	bne.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40000400 	.word	0x40000400
 8008b34:	40000800 	.word	0x40000800
 8008b38:	40000c00 	.word	0x40000c00
 8008b3c:	40014000 	.word	0x40014000

08008b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e042      	b.n	8008bd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f83b 	bl	8008be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2224      	movs	r2, #36	; 0x24
 8008b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 0201 	bic.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8ce 	bl	8008d24 <UART_SetConfig>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e022      	b.n	8008bd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fbbe 	bl	800931c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0201 	orr.w	r2, r2, #1
 8008bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc45 	bl	8009460 <UART_CheckIdleState>
 8008bd6:	4603      	mov	r3, r0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	; 0x28
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	f040 8084 	bne.w	8008d18 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_UART_Transmit+0x28>
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e07c      	b.n	8008d1a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <HAL_UART_Transmit+0x3a>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e075      	b.n	8008d1a <HAL_UART_Transmit+0x126>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2221      	movs	r2, #33	; 0x21
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c46:	f7fc fb13 	bl	8005270 <HAL_GetTick>
 8008c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c64:	d108      	bne.n	8008c78 <HAL_UART_Transmit+0x84>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d104      	bne.n	8008c78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	e003      	b.n	8008c80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008c88:	e02d      	b.n	8008ce6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2200      	movs	r2, #0
 8008c92:	2180      	movs	r1, #128	; 0x80
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fc2e 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e03a      	b.n	8008d1a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	881a      	ldrh	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb6:	b292      	uxth	r2, r2
 8008cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	e008      	b.n	8008cd4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1cb      	bne.n	8008c8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2140      	movs	r1, #64	; 0x40
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fbfa 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e006      	b.n	8008d1a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e000      	b.n	8008d1a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d28:	b08c      	sub	sp, #48	; 0x30
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4baa      	ldr	r3, [pc, #680]	; (8008ffc <UART_SetConfig+0x2d8>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a9f      	ldr	r2, [pc, #636]	; (8009000 <UART_SetConfig+0x2dc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008d9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	f023 010f 	bic.w	r1, r3, #15
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a90      	ldr	r2, [pc, #576]	; (8009004 <UART_SetConfig+0x2e0>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d125      	bne.n	8008e14 <UART_SetConfig+0xf0>
 8008dc8:	4b8f      	ldr	r3, [pc, #572]	; (8009008 <UART_SetConfig+0x2e4>)
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d81a      	bhi.n	8008e0c <UART_SetConfig+0xe8>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <UART_SetConfig+0xb8>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008e05 	.word	0x08008e05
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df2:	e116      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008df4:	2302      	movs	r3, #2
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dfa:	e112      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e10e      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	e10a      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e106      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a7c      	ldr	r2, [pc, #496]	; (800900c <UART_SetConfig+0x2e8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d138      	bne.n	8008e90 <UART_SetConfig+0x16c>
 8008e1e:	4b7a      	ldr	r3, [pc, #488]	; (8009008 <UART_SetConfig+0x2e4>)
 8008e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e24:	f003 030c 	and.w	r3, r3, #12
 8008e28:	2b0c      	cmp	r3, #12
 8008e2a:	d82d      	bhi.n	8008e88 <UART_SetConfig+0x164>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <UART_SetConfig+0x110>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e69 	.word	0x08008e69
 8008e38:	08008e89 	.word	0x08008e89
 8008e3c:	08008e89 	.word	0x08008e89
 8008e40:	08008e89 	.word	0x08008e89
 8008e44:	08008e79 	.word	0x08008e79
 8008e48:	08008e89 	.word	0x08008e89
 8008e4c:	08008e89 	.word	0x08008e89
 8008e50:	08008e89 	.word	0x08008e89
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e89 	.word	0x08008e89
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e81 	.word	0x08008e81
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e0d8      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e70:	2302      	movs	r3, #2
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e76:	e0d4      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7e:	e0d0      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e80:	2308      	movs	r3, #8
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e86:	e0cc      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8e:	e0c8      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5e      	ldr	r2, [pc, #376]	; (8009010 <UART_SetConfig+0x2ec>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d125      	bne.n	8008ee6 <UART_SetConfig+0x1c2>
 8008e9a:	4b5b      	ldr	r3, [pc, #364]	; (8009008 <UART_SetConfig+0x2e4>)
 8008e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ea4:	2b30      	cmp	r3, #48	; 0x30
 8008ea6:	d016      	beq.n	8008ed6 <UART_SetConfig+0x1b2>
 8008ea8:	2b30      	cmp	r3, #48	; 0x30
 8008eaa:	d818      	bhi.n	8008ede <UART_SetConfig+0x1ba>
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d00a      	beq.n	8008ec6 <UART_SetConfig+0x1a2>
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d814      	bhi.n	8008ede <UART_SetConfig+0x1ba>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <UART_SetConfig+0x19a>
 8008eb8:	2b10      	cmp	r3, #16
 8008eba:	d008      	beq.n	8008ece <UART_SetConfig+0x1aa>
 8008ebc:	e00f      	b.n	8008ede <UART_SetConfig+0x1ba>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec4:	e0ad      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ecc:	e0a9      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ece:	2304      	movs	r3, #4
 8008ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed4:	e0a5      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008edc:	e0a1      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ede:	2310      	movs	r3, #16
 8008ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ee4:	e09d      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a4a      	ldr	r2, [pc, #296]	; (8009014 <UART_SetConfig+0x2f0>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d125      	bne.n	8008f3c <UART_SetConfig+0x218>
 8008ef0:	4b45      	ldr	r3, [pc, #276]	; (8009008 <UART_SetConfig+0x2e4>)
 8008ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008efa:	2bc0      	cmp	r3, #192	; 0xc0
 8008efc:	d016      	beq.n	8008f2c <UART_SetConfig+0x208>
 8008efe:	2bc0      	cmp	r3, #192	; 0xc0
 8008f00:	d818      	bhi.n	8008f34 <UART_SetConfig+0x210>
 8008f02:	2b80      	cmp	r3, #128	; 0x80
 8008f04:	d00a      	beq.n	8008f1c <UART_SetConfig+0x1f8>
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	d814      	bhi.n	8008f34 <UART_SetConfig+0x210>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <UART_SetConfig+0x1f0>
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d008      	beq.n	8008f24 <UART_SetConfig+0x200>
 8008f12:	e00f      	b.n	8008f34 <UART_SetConfig+0x210>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f1a:	e082      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f22:	e07e      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f24:	2304      	movs	r3, #4
 8008f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f2a:	e07a      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f2c:	2308      	movs	r3, #8
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f32:	e076      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f34:	2310      	movs	r3, #16
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f3a:	e072      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a35      	ldr	r2, [pc, #212]	; (8009018 <UART_SetConfig+0x2f4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d12a      	bne.n	8008f9c <UART_SetConfig+0x278>
 8008f46:	4b30      	ldr	r3, [pc, #192]	; (8009008 <UART_SetConfig+0x2e4>)
 8008f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f54:	d01a      	beq.n	8008f8c <UART_SetConfig+0x268>
 8008f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f5a:	d81b      	bhi.n	8008f94 <UART_SetConfig+0x270>
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f60:	d00c      	beq.n	8008f7c <UART_SetConfig+0x258>
 8008f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f66:	d815      	bhi.n	8008f94 <UART_SetConfig+0x270>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <UART_SetConfig+0x250>
 8008f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f70:	d008      	beq.n	8008f84 <UART_SetConfig+0x260>
 8008f72:	e00f      	b.n	8008f94 <UART_SetConfig+0x270>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f7a:	e052      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f82:	e04e      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f8a:	e04a      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f92:	e046      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f9a:	e042      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a17      	ldr	r2, [pc, #92]	; (8009000 <UART_SetConfig+0x2dc>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d13a      	bne.n	800901c <UART_SetConfig+0x2f8>
 8008fa6:	4b18      	ldr	r3, [pc, #96]	; (8009008 <UART_SetConfig+0x2e4>)
 8008fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fb4:	d01a      	beq.n	8008fec <UART_SetConfig+0x2c8>
 8008fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fba:	d81b      	bhi.n	8008ff4 <UART_SetConfig+0x2d0>
 8008fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc0:	d00c      	beq.n	8008fdc <UART_SetConfig+0x2b8>
 8008fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc6:	d815      	bhi.n	8008ff4 <UART_SetConfig+0x2d0>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <UART_SetConfig+0x2b0>
 8008fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd0:	d008      	beq.n	8008fe4 <UART_SetConfig+0x2c0>
 8008fd2:	e00f      	b.n	8008ff4 <UART_SetConfig+0x2d0>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fda:	e022      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fe2:	e01e      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fea:	e01a      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008fec:	2308      	movs	r3, #8
 8008fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ff2:	e016      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ffa:	e012      	b.n	8009022 <UART_SetConfig+0x2fe>
 8008ffc:	cfff69f3 	.word	0xcfff69f3
 8009000:	40008000 	.word	0x40008000
 8009004:	40013800 	.word	0x40013800
 8009008:	40021000 	.word	0x40021000
 800900c:	40004400 	.word	0x40004400
 8009010:	40004800 	.word	0x40004800
 8009014:	40004c00 	.word	0x40004c00
 8009018:	40005000 	.word	0x40005000
 800901c:	2310      	movs	r3, #16
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4aae      	ldr	r2, [pc, #696]	; (80092e0 <UART_SetConfig+0x5bc>)
 8009028:	4293      	cmp	r3, r2
 800902a:	f040 8097 	bne.w	800915c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800902e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009032:	2b08      	cmp	r3, #8
 8009034:	d823      	bhi.n	800907e <UART_SetConfig+0x35a>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <UART_SetConfig+0x318>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	08009061 	.word	0x08009061
 8009040:	0800907f 	.word	0x0800907f
 8009044:	08009069 	.word	0x08009069
 8009048:	0800907f 	.word	0x0800907f
 800904c:	0800906f 	.word	0x0800906f
 8009050:	0800907f 	.word	0x0800907f
 8009054:	0800907f 	.word	0x0800907f
 8009058:	0800907f 	.word	0x0800907f
 800905c:	08009077 	.word	0x08009077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fe fb1c 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8009064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009066:	e010      	b.n	800908a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009068:	4b9e      	ldr	r3, [pc, #632]	; (80092e4 <UART_SetConfig+0x5c0>)
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800906c:	e00d      	b.n	800908a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800906e:	f7fe fa7d 	bl	800756c <HAL_RCC_GetSysClockFreq>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009074:	e009      	b.n	800908a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800907c:	e005      	b.n	800908a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8130 	beq.w	80092f2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	4a94      	ldr	r2, [pc, #592]	; (80092e8 <UART_SetConfig+0x5c4>)
 8009098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909c:	461a      	mov	r2, r3
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d305      	bcc.n	80090c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d903      	bls.n	80090ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090c8:	e113      	b.n	80092f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	2200      	movs	r2, #0
 80090ce:	60bb      	str	r3, [r7, #8]
 80090d0:	60fa      	str	r2, [r7, #12]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	4a84      	ldr	r2, [pc, #528]	; (80092e8 <UART_SetConfig+0x5c4>)
 80090d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2200      	movs	r2, #0
 80090e0:	603b      	str	r3, [r7, #0]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090ec:	f7f7 f8d8 	bl	80002a0 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4610      	mov	r0, r2
 80090f6:	4619      	mov	r1, r3
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	020b      	lsls	r3, r1, #8
 8009102:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009106:	0202      	lsls	r2, r0, #8
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	6849      	ldr	r1, [r1, #4]
 800910c:	0849      	lsrs	r1, r1, #1
 800910e:	2000      	movs	r0, #0
 8009110:	460c      	mov	r4, r1
 8009112:	4605      	mov	r5, r0
 8009114:	eb12 0804 	adds.w	r8, r2, r4
 8009118:	eb43 0905 	adc.w	r9, r3, r5
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	469a      	mov	sl, r3
 8009124:	4693      	mov	fp, r2
 8009126:	4652      	mov	r2, sl
 8009128:	465b      	mov	r3, fp
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f8b7 	bl	80002a0 <__aeabi_uldivmod>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4613      	mov	r3, r2
 8009138:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009140:	d308      	bcc.n	8009154 <UART_SetConfig+0x430>
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009148:	d204      	bcs.n	8009154 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6a3a      	ldr	r2, [r7, #32]
 8009150:	60da      	str	r2, [r3, #12]
 8009152:	e0ce      	b.n	80092f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800915a:	e0ca      	b.n	80092f2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009164:	d166      	bne.n	8009234 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800916a:	2b08      	cmp	r3, #8
 800916c:	d827      	bhi.n	80091be <UART_SetConfig+0x49a>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <UART_SetConfig+0x450>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	08009199 	.word	0x08009199
 8009178:	080091a1 	.word	0x080091a1
 800917c:	080091a9 	.word	0x080091a9
 8009180:	080091bf 	.word	0x080091bf
 8009184:	080091af 	.word	0x080091af
 8009188:	080091bf 	.word	0x080091bf
 800918c:	080091bf 	.word	0x080091bf
 8009190:	080091bf 	.word	0x080091bf
 8009194:	080091b7 	.word	0x080091b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009198:	f7fe fa80 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800919e:	e014      	b.n	80091ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a0:	f7fe fa92 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 80091a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091a6:	e010      	b.n	80091ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a8:	4b4e      	ldr	r3, [pc, #312]	; (80092e4 <UART_SetConfig+0x5c0>)
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091ac:	e00d      	b.n	80091ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ae:	f7fe f9dd 	bl	800756c <HAL_RCC_GetSysClockFreq>
 80091b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091b4:	e009      	b.n	80091ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091bc:	e005      	b.n	80091ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8090 	beq.w	80092f2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	4a44      	ldr	r2, [pc, #272]	; (80092e8 <UART_SetConfig+0x5c4>)
 80091d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091dc:	461a      	mov	r2, r3
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e4:	005a      	lsls	r2, r3, #1
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	441a      	add	r2, r3
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	2b0f      	cmp	r3, #15
 80091fc:	d916      	bls.n	800922c <UART_SetConfig+0x508>
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009204:	d212      	bcs.n	800922c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f023 030f 	bic.w	r3, r3, #15
 800920e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	b29b      	uxth	r3, r3
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	b29a      	uxth	r2, r3
 800921c:	8bfb      	ldrh	r3, [r7, #30]
 800921e:	4313      	orrs	r3, r2
 8009220:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	8bfa      	ldrh	r2, [r7, #30]
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	e062      	b.n	80092f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009232:	e05e      	b.n	80092f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009238:	2b08      	cmp	r3, #8
 800923a:	d828      	bhi.n	800928e <UART_SetConfig+0x56a>
 800923c:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <UART_SetConfig+0x520>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	08009269 	.word	0x08009269
 8009248:	08009271 	.word	0x08009271
 800924c:	08009279 	.word	0x08009279
 8009250:	0800928f 	.word	0x0800928f
 8009254:	0800927f 	.word	0x0800927f
 8009258:	0800928f 	.word	0x0800928f
 800925c:	0800928f 	.word	0x0800928f
 8009260:	0800928f 	.word	0x0800928f
 8009264:	08009287 	.word	0x08009287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009268:	f7fe fa18 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800926c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800926e:	e014      	b.n	800929a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009270:	f7fe fa2a 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 8009274:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009276:	e010      	b.n	800929a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009278:	4b1a      	ldr	r3, [pc, #104]	; (80092e4 <UART_SetConfig+0x5c0>)
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800927c:	e00d      	b.n	800929a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800927e:	f7fe f975 	bl	800756c <HAL_RCC_GetSysClockFreq>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009284:	e009      	b.n	800929a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800928c:	e005      	b.n	800929a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009298:	bf00      	nop
    }

    if (pclk != 0U)
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d028      	beq.n	80092f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	4a10      	ldr	r2, [pc, #64]	; (80092e8 <UART_SetConfig+0x5c4>)
 80092a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	085b      	lsrs	r3, r3, #1
 80092b8:	441a      	add	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	2b0f      	cmp	r3, #15
 80092c8:	d910      	bls.n	80092ec <UART_SetConfig+0x5c8>
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d20c      	bcs.n	80092ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60da      	str	r2, [r3, #12]
 80092dc:	e009      	b.n	80092f2 <UART_SetConfig+0x5ce>
 80092de:	bf00      	nop
 80092e0:	40008000 	.word	0x40008000
 80092e4:	00f42400 	.word	0x00f42400
 80092e8:	0800acb4 	.word	0x0800acb4
      }
      else
      {
        ret = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2200      	movs	r2, #0
 8009306:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2200      	movs	r2, #0
 800930c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800930e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009312:	4618      	mov	r0, r3
 8009314:	3730      	adds	r7, #48	; 0x30
 8009316:	46bd      	mov	sp, r7
 8009318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800931c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00a      	beq.n	8009346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	430a      	orrs	r2, r1
 80093aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00a      	beq.n	80093ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01a      	beq.n	8009432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800941a:	d10a      	bne.n	8009432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	605a      	str	r2, [r3, #4]
  }
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af02      	add	r7, sp, #8
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009470:	f7fb fefe 	bl	8005270 <HAL_GetTick>
 8009474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0308 	and.w	r3, r3, #8
 8009480:	2b08      	cmp	r3, #8
 8009482:	d10e      	bne.n	80094a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f82f 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e025      	b.n	80094ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d10e      	bne.n	80094ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f819 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e00f      	b.n	80094ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b09c      	sub	sp, #112	; 0x70
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	603b      	str	r3, [r7, #0]
 8009502:	4613      	mov	r3, r2
 8009504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009506:	e0a9      	b.n	800965c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950e:	f000 80a5 	beq.w	800965c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009512:	f7fb fead 	bl	8005270 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800951e:	429a      	cmp	r2, r3
 8009520:	d302      	bcc.n	8009528 <UART_WaitOnFlagUntilTimeout+0x32>
 8009522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009524:	2b00      	cmp	r3, #0
 8009526:	d140      	bne.n	80095aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800953c:	667b      	str	r3, [r7, #100]	; 0x64
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009548:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800954c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e6      	bne.n	8009528 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	663b      	str	r3, [r7, #96]	; 0x60
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3308      	adds	r3, #8
 8009578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800957a:	64ba      	str	r2, [r7, #72]	; 0x48
 800957c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e5      	bne.n	800955a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e069      	b.n	800967e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d051      	beq.n	800965c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095c6:	d149      	bne.n	800965c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
 80095f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e6      	bne.n	80095d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3308      	adds	r3, #8
 800960a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	613b      	str	r3, [r7, #16]
   return(result);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	66bb      	str	r3, [r7, #104]	; 0x68
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009624:	623a      	str	r2, [r7, #32]
 8009626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	61bb      	str	r3, [r7, #24]
   return(result);
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e5      	bne.n	8009604 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2220      	movs	r2, #32
 8009644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e010      	b.n	800967e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69da      	ldr	r2, [r3, #28]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4013      	ands	r3, r2
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	429a      	cmp	r2, r3
 800966a:	bf0c      	ite	eq
 800966c:	2301      	moveq	r3, #1
 800966e:	2300      	movne	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	429a      	cmp	r2, r3
 8009678:	f43f af46 	beq.w	8009508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3770      	adds	r7, #112	; 0x70
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_UARTEx_DisableFifoMode+0x16>
 8009698:	2302      	movs	r3, #2
 800969a:	e027      	b.n	80096ec <HAL_UARTEx_DisableFifoMode+0x66>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2224      	movs	r2, #36	; 0x24
 80096a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0201 	bic.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009708:	2b01      	cmp	r3, #1
 800970a:	d101      	bne.n	8009710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800970c:	2302      	movs	r3, #2
 800970e:	e02d      	b.n	800976c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2224      	movs	r2, #36	; 0x24
 800971c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0201 	bic.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f84f 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009788:	2302      	movs	r3, #2
 800978a:	e02d      	b.n	80097e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2224      	movs	r2, #36	; 0x24
 8009798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f811 	bl	80097f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009810:	e031      	b.n	8009876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009812:	2308      	movs	r3, #8
 8009814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009816:	2308      	movs	r3, #8
 8009818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	0e5b      	lsrs	r3, r3, #25
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	0f5b      	lsrs	r3, r3, #29
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	7b3a      	ldrb	r2, [r7, #12]
 800983e:	4911      	ldr	r1, [pc, #68]	; (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 8009840:	5c8a      	ldrb	r2, [r1, r2]
 8009842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009846:	7b3a      	ldrb	r2, [r7, #12]
 8009848:	490f      	ldr	r1, [pc, #60]	; (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 800984a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800984c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	7b7a      	ldrb	r2, [r7, #13]
 800985c:	4909      	ldr	r1, [pc, #36]	; (8009884 <UARTEx_SetNbDataToProcess+0x94>)
 800985e:	5c8a      	ldrb	r2, [r1, r2]
 8009860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009864:	7b7a      	ldrb	r2, [r7, #13]
 8009866:	4908      	ldr	r1, [pc, #32]	; (8009888 <UARTEx_SetNbDataToProcess+0x98>)
 8009868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800986a:	fb93 f3f2 	sdiv	r3, r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	0800accc 	.word	0x0800accc
 8009888:	0800acd4 	.word	0x0800acd4

0800988c <__errno>:
 800988c:	4b01      	ldr	r3, [pc, #4]	; (8009894 <__errno+0x8>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000094 	.word	0x20000094

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4d0d      	ldr	r5, [pc, #52]	; (80098d0 <__libc_init_array+0x38>)
 800989c:	4c0d      	ldr	r4, [pc, #52]	; (80098d4 <__libc_init_array+0x3c>)
 800989e:	1b64      	subs	r4, r4, r5
 80098a0:	10a4      	asrs	r4, r4, #2
 80098a2:	2600      	movs	r6, #0
 80098a4:	42a6      	cmp	r6, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	4d0b      	ldr	r5, [pc, #44]	; (80098d8 <__libc_init_array+0x40>)
 80098aa:	4c0c      	ldr	r4, [pc, #48]	; (80098dc <__libc_init_array+0x44>)
 80098ac:	f001 f99e 	bl	800abec <_init>
 80098b0:	1b64      	subs	r4, r4, r5
 80098b2:	10a4      	asrs	r4, r4, #2
 80098b4:	2600      	movs	r6, #0
 80098b6:	42a6      	cmp	r6, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c0:	4798      	blx	r3
 80098c2:	3601      	adds	r6, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ca:	4798      	blx	r3
 80098cc:	3601      	adds	r6, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	0800ad7c 	.word	0x0800ad7c
 80098d4:	0800ad7c 	.word	0x0800ad7c
 80098d8:	0800ad7c 	.word	0x0800ad7c
 80098dc:	0800ad80 	.word	0x0800ad80

080098e0 <memset>:
 80098e0:	4402      	add	r2, r0
 80098e2:	4603      	mov	r3, r0
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	f803 1b01 	strb.w	r1, [r3], #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <iprintf>:
 80098f0:	b40f      	push	{r0, r1, r2, r3}
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <iprintf+0x2c>)
 80098f4:	b513      	push	{r0, r1, r4, lr}
 80098f6:	681c      	ldr	r4, [r3, #0]
 80098f8:	b124      	cbz	r4, 8009904 <iprintf+0x14>
 80098fa:	69a3      	ldr	r3, [r4, #24]
 80098fc:	b913      	cbnz	r3, 8009904 <iprintf+0x14>
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f89a 	bl	8009a38 <__sinit>
 8009904:	ab05      	add	r3, sp, #20
 8009906:	9a04      	ldr	r2, [sp, #16]
 8009908:	68a1      	ldr	r1, [r4, #8]
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fb4d 	bl	8009fac <_vfiprintf_r>
 8009912:	b002      	add	sp, #8
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	b004      	add	sp, #16
 800991a:	4770      	bx	lr
 800991c:	20000094 	.word	0x20000094

08009920 <sniprintf>:
 8009920:	b40c      	push	{r2, r3}
 8009922:	b530      	push	{r4, r5, lr}
 8009924:	4b17      	ldr	r3, [pc, #92]	; (8009984 <sniprintf+0x64>)
 8009926:	1e0c      	subs	r4, r1, #0
 8009928:	681d      	ldr	r5, [r3, #0]
 800992a:	b09d      	sub	sp, #116	; 0x74
 800992c:	da08      	bge.n	8009940 <sniprintf+0x20>
 800992e:	238b      	movs	r3, #139	; 0x8b
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	b01d      	add	sp, #116	; 0x74
 8009938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800993c:	b002      	add	sp, #8
 800993e:	4770      	bx	lr
 8009940:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009948:	bf14      	ite	ne
 800994a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800994e:	4623      	moveq	r3, r4
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009958:	9002      	str	r0, [sp, #8]
 800995a:	9006      	str	r0, [sp, #24]
 800995c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009962:	ab21      	add	r3, sp, #132	; 0x84
 8009964:	a902      	add	r1, sp, #8
 8009966:	4628      	mov	r0, r5
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	f000 f9f5 	bl	8009d58 <_svfiprintf_r>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	bfbc      	itt	lt
 8009972:	238b      	movlt	r3, #139	; 0x8b
 8009974:	602b      	strlt	r3, [r5, #0]
 8009976:	2c00      	cmp	r4, #0
 8009978:	d0dd      	beq.n	8009936 <sniprintf+0x16>
 800997a:	9b02      	ldr	r3, [sp, #8]
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e7d9      	b.n	8009936 <sniprintf+0x16>
 8009982:	bf00      	nop
 8009984:	20000094 	.word	0x20000094

08009988 <std>:
 8009988:	2300      	movs	r3, #0
 800998a:	b510      	push	{r4, lr}
 800998c:	4604      	mov	r4, r0
 800998e:	e9c0 3300 	strd	r3, r3, [r0]
 8009992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009996:	6083      	str	r3, [r0, #8]
 8009998:	8181      	strh	r1, [r0, #12]
 800999a:	6643      	str	r3, [r0, #100]	; 0x64
 800999c:	81c2      	strh	r2, [r0, #14]
 800999e:	6183      	str	r3, [r0, #24]
 80099a0:	4619      	mov	r1, r3
 80099a2:	2208      	movs	r2, #8
 80099a4:	305c      	adds	r0, #92	; 0x5c
 80099a6:	f7ff ff9b 	bl	80098e0 <memset>
 80099aa:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <std+0x38>)
 80099ac:	6263      	str	r3, [r4, #36]	; 0x24
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <std+0x3c>)
 80099b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <std+0x40>)
 80099b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <std+0x44>)
 80099b8:	6224      	str	r4, [r4, #32]
 80099ba:	6323      	str	r3, [r4, #48]	; 0x30
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	bf00      	nop
 80099c0:	0800a555 	.word	0x0800a555
 80099c4:	0800a577 	.word	0x0800a577
 80099c8:	0800a5af 	.word	0x0800a5af
 80099cc:	0800a5d3 	.word	0x0800a5d3

080099d0 <_cleanup_r>:
 80099d0:	4901      	ldr	r1, [pc, #4]	; (80099d8 <_cleanup_r+0x8>)
 80099d2:	f000 b8af 	b.w	8009b34 <_fwalk_reent>
 80099d6:	bf00      	nop
 80099d8:	0800a8ad 	.word	0x0800a8ad

080099dc <__sfmoreglue>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	2268      	movs	r2, #104	; 0x68
 80099e0:	1e4d      	subs	r5, r1, #1
 80099e2:	4355      	muls	r5, r2
 80099e4:	460e      	mov	r6, r1
 80099e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ea:	f000 f8e5 	bl	8009bb8 <_malloc_r>
 80099ee:	4604      	mov	r4, r0
 80099f0:	b140      	cbz	r0, 8009a04 <__sfmoreglue+0x28>
 80099f2:	2100      	movs	r1, #0
 80099f4:	e9c0 1600 	strd	r1, r6, [r0]
 80099f8:	300c      	adds	r0, #12
 80099fa:	60a0      	str	r0, [r4, #8]
 80099fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a00:	f7ff ff6e 	bl	80098e0 <memset>
 8009a04:	4620      	mov	r0, r4
 8009a06:	bd70      	pop	{r4, r5, r6, pc}

08009a08 <__sfp_lock_acquire>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sfp_lock_acquire+0x8>)
 8009a0a:	f000 b8b3 	b.w	8009b74 <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	200003fd 	.word	0x200003fd

08009a14 <__sfp_lock_release>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__sfp_lock_release+0x8>)
 8009a16:	f000 b8ae 	b.w	8009b76 <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	200003fd 	.word	0x200003fd

08009a20 <__sinit_lock_acquire>:
 8009a20:	4801      	ldr	r0, [pc, #4]	; (8009a28 <__sinit_lock_acquire+0x8>)
 8009a22:	f000 b8a7 	b.w	8009b74 <__retarget_lock_acquire_recursive>
 8009a26:	bf00      	nop
 8009a28:	200003fe 	.word	0x200003fe

08009a2c <__sinit_lock_release>:
 8009a2c:	4801      	ldr	r0, [pc, #4]	; (8009a34 <__sinit_lock_release+0x8>)
 8009a2e:	f000 b8a2 	b.w	8009b76 <__retarget_lock_release_recursive>
 8009a32:	bf00      	nop
 8009a34:	200003fe 	.word	0x200003fe

08009a38 <__sinit>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	f7ff fff0 	bl	8009a20 <__sinit_lock_acquire>
 8009a40:	69a3      	ldr	r3, [r4, #24]
 8009a42:	b11b      	cbz	r3, 8009a4c <__sinit+0x14>
 8009a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a48:	f7ff bff0 	b.w	8009a2c <__sinit_lock_release>
 8009a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a50:	6523      	str	r3, [r4, #80]	; 0x50
 8009a52:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <__sinit+0x68>)
 8009a54:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <__sinit+0x6c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	bf04      	itt	eq
 8009a5e:	2301      	moveq	r3, #1
 8009a60:	61a3      	streq	r3, [r4, #24]
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 f820 	bl	8009aa8 <__sfp>
 8009a68:	6060      	str	r0, [r4, #4]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f81c 	bl	8009aa8 <__sfp>
 8009a70:	60a0      	str	r0, [r4, #8]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f818 	bl	8009aa8 <__sfp>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	60e0      	str	r0, [r4, #12]
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	6860      	ldr	r0, [r4, #4]
 8009a80:	f7ff ff82 	bl	8009988 <std>
 8009a84:	68a0      	ldr	r0, [r4, #8]
 8009a86:	2201      	movs	r2, #1
 8009a88:	2109      	movs	r1, #9
 8009a8a:	f7ff ff7d 	bl	8009988 <std>
 8009a8e:	68e0      	ldr	r0, [r4, #12]
 8009a90:	2202      	movs	r2, #2
 8009a92:	2112      	movs	r1, #18
 8009a94:	f7ff ff78 	bl	8009988 <std>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	61a3      	str	r3, [r4, #24]
 8009a9c:	e7d2      	b.n	8009a44 <__sinit+0xc>
 8009a9e:	bf00      	nop
 8009aa0:	0800acdc 	.word	0x0800acdc
 8009aa4:	080099d1 	.word	0x080099d1

08009aa8 <__sfp>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	4607      	mov	r7, r0
 8009aac:	f7ff ffac 	bl	8009a08 <__sfp_lock_acquire>
 8009ab0:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <__sfp+0x84>)
 8009ab2:	681e      	ldr	r6, [r3, #0]
 8009ab4:	69b3      	ldr	r3, [r6, #24]
 8009ab6:	b913      	cbnz	r3, 8009abe <__sfp+0x16>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f7ff ffbd 	bl	8009a38 <__sinit>
 8009abe:	3648      	adds	r6, #72	; 0x48
 8009ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	d503      	bpl.n	8009ad0 <__sfp+0x28>
 8009ac8:	6833      	ldr	r3, [r6, #0]
 8009aca:	b30b      	cbz	r3, 8009b10 <__sfp+0x68>
 8009acc:	6836      	ldr	r6, [r6, #0]
 8009ace:	e7f7      	b.n	8009ac0 <__sfp+0x18>
 8009ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ad4:	b9d5      	cbnz	r5, 8009b0c <__sfp+0x64>
 8009ad6:	4b16      	ldr	r3, [pc, #88]	; (8009b30 <__sfp+0x88>)
 8009ad8:	60e3      	str	r3, [r4, #12]
 8009ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ade:	6665      	str	r5, [r4, #100]	; 0x64
 8009ae0:	f000 f847 	bl	8009b72 <__retarget_lock_init_recursive>
 8009ae4:	f7ff ff96 	bl	8009a14 <__sfp_lock_release>
 8009ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009af0:	6025      	str	r5, [r4, #0]
 8009af2:	61a5      	str	r5, [r4, #24]
 8009af4:	2208      	movs	r2, #8
 8009af6:	4629      	mov	r1, r5
 8009af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009afc:	f7ff fef0 	bl	80098e0 <memset>
 8009b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b08:	4620      	mov	r0, r4
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0c:	3468      	adds	r4, #104	; 0x68
 8009b0e:	e7d9      	b.n	8009ac4 <__sfp+0x1c>
 8009b10:	2104      	movs	r1, #4
 8009b12:	4638      	mov	r0, r7
 8009b14:	f7ff ff62 	bl	80099dc <__sfmoreglue>
 8009b18:	4604      	mov	r4, r0
 8009b1a:	6030      	str	r0, [r6, #0]
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1d5      	bne.n	8009acc <__sfp+0x24>
 8009b20:	f7ff ff78 	bl	8009a14 <__sfp_lock_release>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	e7ee      	b.n	8009b08 <__sfp+0x60>
 8009b2a:	bf00      	nop
 8009b2c:	0800acdc 	.word	0x0800acdc
 8009b30:	ffff0001 	.word	0xffff0001

08009b34 <_fwalk_reent>:
 8009b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b38:	4606      	mov	r6, r0
 8009b3a:	4688      	mov	r8, r1
 8009b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b40:	2700      	movs	r7, #0
 8009b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b46:	f1b9 0901 	subs.w	r9, r9, #1
 8009b4a:	d505      	bpl.n	8009b58 <_fwalk_reent+0x24>
 8009b4c:	6824      	ldr	r4, [r4, #0]
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	d1f7      	bne.n	8009b42 <_fwalk_reent+0xe>
 8009b52:	4638      	mov	r0, r7
 8009b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b58:	89ab      	ldrh	r3, [r5, #12]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d907      	bls.n	8009b6e <_fwalk_reent+0x3a>
 8009b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b62:	3301      	adds	r3, #1
 8009b64:	d003      	beq.n	8009b6e <_fwalk_reent+0x3a>
 8009b66:	4629      	mov	r1, r5
 8009b68:	4630      	mov	r0, r6
 8009b6a:	47c0      	blx	r8
 8009b6c:	4307      	orrs	r7, r0
 8009b6e:	3568      	adds	r5, #104	; 0x68
 8009b70:	e7e9      	b.n	8009b46 <_fwalk_reent+0x12>

08009b72 <__retarget_lock_init_recursive>:
 8009b72:	4770      	bx	lr

08009b74 <__retarget_lock_acquire_recursive>:
 8009b74:	4770      	bx	lr

08009b76 <__retarget_lock_release_recursive>:
 8009b76:	4770      	bx	lr

08009b78 <sbrk_aligned>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	4e0e      	ldr	r6, [pc, #56]	; (8009bb4 <sbrk_aligned+0x3c>)
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	6831      	ldr	r1, [r6, #0]
 8009b80:	4605      	mov	r5, r0
 8009b82:	b911      	cbnz	r1, 8009b8a <sbrk_aligned+0x12>
 8009b84:	f000 fcd6 	bl	800a534 <_sbrk_r>
 8009b88:	6030      	str	r0, [r6, #0]
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f000 fcd1 	bl	800a534 <_sbrk_r>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	d00a      	beq.n	8009bac <sbrk_aligned+0x34>
 8009b96:	1cc4      	adds	r4, r0, #3
 8009b98:	f024 0403 	bic.w	r4, r4, #3
 8009b9c:	42a0      	cmp	r0, r4
 8009b9e:	d007      	beq.n	8009bb0 <sbrk_aligned+0x38>
 8009ba0:	1a21      	subs	r1, r4, r0
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 fcc6 	bl	800a534 <_sbrk_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d101      	bne.n	8009bb0 <sbrk_aligned+0x38>
 8009bac:	f04f 34ff 	mov.w	r4, #4294967295
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	20000404 	.word	0x20000404

08009bb8 <_malloc_r>:
 8009bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	1ccd      	adds	r5, r1, #3
 8009bbe:	f025 0503 	bic.w	r5, r5, #3
 8009bc2:	3508      	adds	r5, #8
 8009bc4:	2d0c      	cmp	r5, #12
 8009bc6:	bf38      	it	cc
 8009bc8:	250c      	movcc	r5, #12
 8009bca:	2d00      	cmp	r5, #0
 8009bcc:	4607      	mov	r7, r0
 8009bce:	db01      	blt.n	8009bd4 <_malloc_r+0x1c>
 8009bd0:	42a9      	cmp	r1, r5
 8009bd2:	d905      	bls.n	8009be0 <_malloc_r+0x28>
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	2600      	movs	r6, #0
 8009bda:	4630      	mov	r0, r6
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	4e2e      	ldr	r6, [pc, #184]	; (8009c9c <_malloc_r+0xe4>)
 8009be2:	f000 ff3f 	bl	800aa64 <__malloc_lock>
 8009be6:	6833      	ldr	r3, [r6, #0]
 8009be8:	461c      	mov	r4, r3
 8009bea:	bb34      	cbnz	r4, 8009c3a <_malloc_r+0x82>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff ffc2 	bl	8009b78 <sbrk_aligned>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	d14d      	bne.n	8009c96 <_malloc_r+0xde>
 8009bfa:	6834      	ldr	r4, [r6, #0]
 8009bfc:	4626      	mov	r6, r4
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	d140      	bne.n	8009c84 <_malloc_r+0xcc>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	4631      	mov	r1, r6
 8009c06:	4638      	mov	r0, r7
 8009c08:	eb04 0803 	add.w	r8, r4, r3
 8009c0c:	f000 fc92 	bl	800a534 <_sbrk_r>
 8009c10:	4580      	cmp	r8, r0
 8009c12:	d13a      	bne.n	8009c8a <_malloc_r+0xd2>
 8009c14:	6821      	ldr	r1, [r4, #0]
 8009c16:	3503      	adds	r5, #3
 8009c18:	1a6d      	subs	r5, r5, r1
 8009c1a:	f025 0503 	bic.w	r5, r5, #3
 8009c1e:	3508      	adds	r5, #8
 8009c20:	2d0c      	cmp	r5, #12
 8009c22:	bf38      	it	cc
 8009c24:	250c      	movcc	r5, #12
 8009c26:	4629      	mov	r1, r5
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff ffa5 	bl	8009b78 <sbrk_aligned>
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d02b      	beq.n	8009c8a <_malloc_r+0xd2>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	442b      	add	r3, r5
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	e00e      	b.n	8009c58 <_malloc_r+0xa0>
 8009c3a:	6822      	ldr	r2, [r4, #0]
 8009c3c:	1b52      	subs	r2, r2, r5
 8009c3e:	d41e      	bmi.n	8009c7e <_malloc_r+0xc6>
 8009c40:	2a0b      	cmp	r2, #11
 8009c42:	d916      	bls.n	8009c72 <_malloc_r+0xba>
 8009c44:	1961      	adds	r1, r4, r5
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	6025      	str	r5, [r4, #0]
 8009c4a:	bf18      	it	ne
 8009c4c:	6059      	strne	r1, [r3, #4]
 8009c4e:	6863      	ldr	r3, [r4, #4]
 8009c50:	bf08      	it	eq
 8009c52:	6031      	streq	r1, [r6, #0]
 8009c54:	5162      	str	r2, [r4, r5]
 8009c56:	604b      	str	r3, [r1, #4]
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f104 060b 	add.w	r6, r4, #11
 8009c5e:	f000 ff07 	bl	800aa70 <__malloc_unlock>
 8009c62:	f026 0607 	bic.w	r6, r6, #7
 8009c66:	1d23      	adds	r3, r4, #4
 8009c68:	1af2      	subs	r2, r6, r3
 8009c6a:	d0b6      	beq.n	8009bda <_malloc_r+0x22>
 8009c6c:	1b9b      	subs	r3, r3, r6
 8009c6e:	50a3      	str	r3, [r4, r2]
 8009c70:	e7b3      	b.n	8009bda <_malloc_r+0x22>
 8009c72:	6862      	ldr	r2, [r4, #4]
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	bf0c      	ite	eq
 8009c78:	6032      	streq	r2, [r6, #0]
 8009c7a:	605a      	strne	r2, [r3, #4]
 8009c7c:	e7ec      	b.n	8009c58 <_malloc_r+0xa0>
 8009c7e:	4623      	mov	r3, r4
 8009c80:	6864      	ldr	r4, [r4, #4]
 8009c82:	e7b2      	b.n	8009bea <_malloc_r+0x32>
 8009c84:	4634      	mov	r4, r6
 8009c86:	6876      	ldr	r6, [r6, #4]
 8009c88:	e7b9      	b.n	8009bfe <_malloc_r+0x46>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 feee 	bl	800aa70 <__malloc_unlock>
 8009c94:	e7a1      	b.n	8009bda <_malloc_r+0x22>
 8009c96:	6025      	str	r5, [r4, #0]
 8009c98:	e7de      	b.n	8009c58 <_malloc_r+0xa0>
 8009c9a:	bf00      	nop
 8009c9c:	20000400 	.word	0x20000400

08009ca0 <__ssputs_r>:
 8009ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca4:	688e      	ldr	r6, [r1, #8]
 8009ca6:	429e      	cmp	r6, r3
 8009ca8:	4682      	mov	sl, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4690      	mov	r8, r2
 8009cae:	461f      	mov	r7, r3
 8009cb0:	d838      	bhi.n	8009d24 <__ssputs_r+0x84>
 8009cb2:	898a      	ldrh	r2, [r1, #12]
 8009cb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cb8:	d032      	beq.n	8009d20 <__ssputs_r+0x80>
 8009cba:	6825      	ldr	r5, [r4, #0]
 8009cbc:	6909      	ldr	r1, [r1, #16]
 8009cbe:	eba5 0901 	sub.w	r9, r5, r1
 8009cc2:	6965      	ldr	r5, [r4, #20]
 8009cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ccc:	3301      	adds	r3, #1
 8009cce:	444b      	add	r3, r9
 8009cd0:	106d      	asrs	r5, r5, #1
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	bf38      	it	cc
 8009cd6:	461d      	movcc	r5, r3
 8009cd8:	0553      	lsls	r3, r2, #21
 8009cda:	d531      	bpl.n	8009d40 <__ssputs_r+0xa0>
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7ff ff6b 	bl	8009bb8 <_malloc_r>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	b950      	cbnz	r0, 8009cfc <__ssputs_r+0x5c>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	f8ca 3000 	str.w	r3, [sl]
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfc:	6921      	ldr	r1, [r4, #16]
 8009cfe:	464a      	mov	r2, r9
 8009d00:	f000 fe88 	bl	800aa14 <memcpy>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	6126      	str	r6, [r4, #16]
 8009d12:	6165      	str	r5, [r4, #20]
 8009d14:	444e      	add	r6, r9
 8009d16:	eba5 0509 	sub.w	r5, r5, r9
 8009d1a:	6026      	str	r6, [r4, #0]
 8009d1c:	60a5      	str	r5, [r4, #8]
 8009d1e:	463e      	mov	r6, r7
 8009d20:	42be      	cmp	r6, r7
 8009d22:	d900      	bls.n	8009d26 <__ssputs_r+0x86>
 8009d24:	463e      	mov	r6, r7
 8009d26:	6820      	ldr	r0, [r4, #0]
 8009d28:	4632      	mov	r2, r6
 8009d2a:	4641      	mov	r1, r8
 8009d2c:	f000 fe80 	bl	800aa30 <memmove>
 8009d30:	68a3      	ldr	r3, [r4, #8]
 8009d32:	1b9b      	subs	r3, r3, r6
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	4433      	add	r3, r6
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e7db      	b.n	8009cf8 <__ssputs_r+0x58>
 8009d40:	462a      	mov	r2, r5
 8009d42:	f000 fee7 	bl	800ab14 <_realloc_r>
 8009d46:	4606      	mov	r6, r0
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1e1      	bne.n	8009d10 <__ssputs_r+0x70>
 8009d4c:	6921      	ldr	r1, [r4, #16]
 8009d4e:	4650      	mov	r0, sl
 8009d50:	f000 fe94 	bl	800aa7c <_free_r>
 8009d54:	e7c7      	b.n	8009ce6 <__ssputs_r+0x46>
	...

08009d58 <_svfiprintf_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	4698      	mov	r8, r3
 8009d5e:	898b      	ldrh	r3, [r1, #12]
 8009d60:	061b      	lsls	r3, r3, #24
 8009d62:	b09d      	sub	sp, #116	; 0x74
 8009d64:	4607      	mov	r7, r0
 8009d66:	460d      	mov	r5, r1
 8009d68:	4614      	mov	r4, r2
 8009d6a:	d50e      	bpl.n	8009d8a <_svfiprintf_r+0x32>
 8009d6c:	690b      	ldr	r3, [r1, #16]
 8009d6e:	b963      	cbnz	r3, 8009d8a <_svfiprintf_r+0x32>
 8009d70:	2140      	movs	r1, #64	; 0x40
 8009d72:	f7ff ff21 	bl	8009bb8 <_malloc_r>
 8009d76:	6028      	str	r0, [r5, #0]
 8009d78:	6128      	str	r0, [r5, #16]
 8009d7a:	b920      	cbnz	r0, 8009d86 <_svfiprintf_r+0x2e>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	e0d1      	b.n	8009f2a <_svfiprintf_r+0x1d2>
 8009d86:	2340      	movs	r3, #64	; 0x40
 8009d88:	616b      	str	r3, [r5, #20]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8e:	2320      	movs	r3, #32
 8009d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d98:	2330      	movs	r3, #48	; 0x30
 8009d9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f44 <_svfiprintf_r+0x1ec>
 8009d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009da2:	f04f 0901 	mov.w	r9, #1
 8009da6:	4623      	mov	r3, r4
 8009da8:	469a      	mov	sl, r3
 8009daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dae:	b10a      	cbz	r2, 8009db4 <_svfiprintf_r+0x5c>
 8009db0:	2a25      	cmp	r2, #37	; 0x25
 8009db2:	d1f9      	bne.n	8009da8 <_svfiprintf_r+0x50>
 8009db4:	ebba 0b04 	subs.w	fp, sl, r4
 8009db8:	d00b      	beq.n	8009dd2 <_svfiprintf_r+0x7a>
 8009dba:	465b      	mov	r3, fp
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ff6d 	bl	8009ca0 <__ssputs_r>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f000 80aa 	beq.w	8009f20 <_svfiprintf_r+0x1c8>
 8009dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dce:	445a      	add	r2, fp
 8009dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8009dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 80a2 	beq.w	8009f20 <_svfiprintf_r+0x1c8>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de6:	f10a 0a01 	add.w	sl, sl, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df2:	931a      	str	r3, [sp, #104]	; 0x68
 8009df4:	4654      	mov	r4, sl
 8009df6:	2205      	movs	r2, #5
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	4851      	ldr	r0, [pc, #324]	; (8009f44 <_svfiprintf_r+0x1ec>)
 8009dfe:	f7f6 f9ff 	bl	8000200 <memchr>
 8009e02:	9a04      	ldr	r2, [sp, #16]
 8009e04:	b9d8      	cbnz	r0, 8009e3e <_svfiprintf_r+0xe6>
 8009e06:	06d0      	lsls	r0, r2, #27
 8009e08:	bf44      	itt	mi
 8009e0a:	2320      	movmi	r3, #32
 8009e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e10:	0711      	lsls	r1, r2, #28
 8009e12:	bf44      	itt	mi
 8009e14:	232b      	movmi	r3, #43	; 0x2b
 8009e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e20:	d015      	beq.n	8009e4e <_svfiprintf_r+0xf6>
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	4654      	mov	r4, sl
 8009e26:	2000      	movs	r0, #0
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e32:	3b30      	subs	r3, #48	; 0x30
 8009e34:	2b09      	cmp	r3, #9
 8009e36:	d94e      	bls.n	8009ed6 <_svfiprintf_r+0x17e>
 8009e38:	b1b0      	cbz	r0, 8009e68 <_svfiprintf_r+0x110>
 8009e3a:	9207      	str	r2, [sp, #28]
 8009e3c:	e014      	b.n	8009e68 <_svfiprintf_r+0x110>
 8009e3e:	eba0 0308 	sub.w	r3, r0, r8
 8009e42:	fa09 f303 	lsl.w	r3, r9, r3
 8009e46:	4313      	orrs	r3, r2
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	46a2      	mov	sl, r4
 8009e4c:	e7d2      	b.n	8009df4 <_svfiprintf_r+0x9c>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	1d19      	adds	r1, r3, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	bfbb      	ittet	lt
 8009e5a:	425b      	neglt	r3, r3
 8009e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e60:	9307      	strge	r3, [sp, #28]
 8009e62:	9307      	strlt	r3, [sp, #28]
 8009e64:	bfb8      	it	lt
 8009e66:	9204      	strlt	r2, [sp, #16]
 8009e68:	7823      	ldrb	r3, [r4, #0]
 8009e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e6c:	d10c      	bne.n	8009e88 <_svfiprintf_r+0x130>
 8009e6e:	7863      	ldrb	r3, [r4, #1]
 8009e70:	2b2a      	cmp	r3, #42	; 0x2a
 8009e72:	d135      	bne.n	8009ee0 <_svfiprintf_r+0x188>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	1d1a      	adds	r2, r3, #4
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	9203      	str	r2, [sp, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfb8      	it	lt
 8009e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e84:	3402      	adds	r4, #2
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f54 <_svfiprintf_r+0x1fc>
 8009e8c:	7821      	ldrb	r1, [r4, #0]
 8009e8e:	2203      	movs	r2, #3
 8009e90:	4650      	mov	r0, sl
 8009e92:	f7f6 f9b5 	bl	8000200 <memchr>
 8009e96:	b140      	cbz	r0, 8009eaa <_svfiprintf_r+0x152>
 8009e98:	2340      	movs	r3, #64	; 0x40
 8009e9a:	eba0 000a 	sub.w	r0, r0, sl
 8009e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	4303      	orrs	r3, r0
 8009ea6:	3401      	adds	r4, #1
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eae:	4826      	ldr	r0, [pc, #152]	; (8009f48 <_svfiprintf_r+0x1f0>)
 8009eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eb4:	2206      	movs	r2, #6
 8009eb6:	f7f6 f9a3 	bl	8000200 <memchr>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d038      	beq.n	8009f30 <_svfiprintf_r+0x1d8>
 8009ebe:	4b23      	ldr	r3, [pc, #140]	; (8009f4c <_svfiprintf_r+0x1f4>)
 8009ec0:	bb1b      	cbnz	r3, 8009f0a <_svfiprintf_r+0x1b2>
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	3308      	adds	r3, #8
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed0:	4433      	add	r3, r6
 8009ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed4:	e767      	b.n	8009da6 <_svfiprintf_r+0x4e>
 8009ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eda:	460c      	mov	r4, r1
 8009edc:	2001      	movs	r0, #1
 8009ede:	e7a5      	b.n	8009e2c <_svfiprintf_r+0xd4>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	f04f 0c0a 	mov.w	ip, #10
 8009eec:	4620      	mov	r0, r4
 8009eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef2:	3a30      	subs	r2, #48	; 0x30
 8009ef4:	2a09      	cmp	r2, #9
 8009ef6:	d903      	bls.n	8009f00 <_svfiprintf_r+0x1a8>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0c5      	beq.n	8009e88 <_svfiprintf_r+0x130>
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	e7c3      	b.n	8009e88 <_svfiprintf_r+0x130>
 8009f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f04:	4604      	mov	r4, r0
 8009f06:	2301      	movs	r3, #1
 8009f08:	e7f0      	b.n	8009eec <_svfiprintf_r+0x194>
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <_svfiprintf_r+0x1f8>)
 8009f12:	a904      	add	r1, sp, #16
 8009f14:	4638      	mov	r0, r7
 8009f16:	f3af 8000 	nop.w
 8009f1a:	1c42      	adds	r2, r0, #1
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	d1d6      	bne.n	8009ece <_svfiprintf_r+0x176>
 8009f20:	89ab      	ldrh	r3, [r5, #12]
 8009f22:	065b      	lsls	r3, r3, #25
 8009f24:	f53f af2c 	bmi.w	8009d80 <_svfiprintf_r+0x28>
 8009f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f2a:	b01d      	add	sp, #116	; 0x74
 8009f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	462a      	mov	r2, r5
 8009f36:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <_svfiprintf_r+0x1f8>)
 8009f38:	a904      	add	r1, sp, #16
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f000 f9d4 	bl	800a2e8 <_printf_i>
 8009f40:	e7eb      	b.n	8009f1a <_svfiprintf_r+0x1c2>
 8009f42:	bf00      	nop
 8009f44:	0800ad40 	.word	0x0800ad40
 8009f48:	0800ad4a 	.word	0x0800ad4a
 8009f4c:	00000000 	.word	0x00000000
 8009f50:	08009ca1 	.word	0x08009ca1
 8009f54:	0800ad46 	.word	0x0800ad46

08009f58 <__sfputc_r>:
 8009f58:	6893      	ldr	r3, [r2, #8]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	b410      	push	{r4}
 8009f60:	6093      	str	r3, [r2, #8]
 8009f62:	da08      	bge.n	8009f76 <__sfputc_r+0x1e>
 8009f64:	6994      	ldr	r4, [r2, #24]
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	db01      	blt.n	8009f6e <__sfputc_r+0x16>
 8009f6a:	290a      	cmp	r1, #10
 8009f6c:	d103      	bne.n	8009f76 <__sfputc_r+0x1e>
 8009f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f72:	f000 bb33 	b.w	800a5dc <__swbuf_r>
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	1c58      	adds	r0, r3, #1
 8009f7a:	6010      	str	r0, [r2, #0]
 8009f7c:	7019      	strb	r1, [r3, #0]
 8009f7e:	4608      	mov	r0, r1
 8009f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <__sfputs_r>:
 8009f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	18d5      	adds	r5, r2, r3
 8009f90:	42ac      	cmp	r4, r5
 8009f92:	d101      	bne.n	8009f98 <__sfputs_r+0x12>
 8009f94:	2000      	movs	r0, #0
 8009f96:	e007      	b.n	8009fa8 <__sfputs_r+0x22>
 8009f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9c:	463a      	mov	r2, r7
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f7ff ffda 	bl	8009f58 <__sfputc_r>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d1f3      	bne.n	8009f90 <__sfputs_r+0xa>
 8009fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fac <_vfiprintf_r>:
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	b09d      	sub	sp, #116	; 0x74
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	4698      	mov	r8, r3
 8009fb8:	4606      	mov	r6, r0
 8009fba:	b118      	cbz	r0, 8009fc4 <_vfiprintf_r+0x18>
 8009fbc:	6983      	ldr	r3, [r0, #24]
 8009fbe:	b90b      	cbnz	r3, 8009fc4 <_vfiprintf_r+0x18>
 8009fc0:	f7ff fd3a 	bl	8009a38 <__sinit>
 8009fc4:	4b89      	ldr	r3, [pc, #548]	; (800a1ec <_vfiprintf_r+0x240>)
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	d11b      	bne.n	800a002 <_vfiprintf_r+0x56>
 8009fca:	6875      	ldr	r5, [r6, #4]
 8009fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	d405      	bmi.n	8009fde <_vfiprintf_r+0x32>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	059a      	lsls	r2, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_vfiprintf_r+0x32>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fda:	f7ff fdcb 	bl	8009b74 <__retarget_lock_acquire_recursive>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	071b      	lsls	r3, r3, #28
 8009fe2:	d501      	bpl.n	8009fe8 <_vfiprintf_r+0x3c>
 8009fe4:	692b      	ldr	r3, [r5, #16]
 8009fe6:	b9eb      	cbnz	r3, 800a024 <_vfiprintf_r+0x78>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 fb5a 	bl	800a6a4 <__swsetup_r>
 8009ff0:	b1c0      	cbz	r0, 800a024 <_vfiprintf_r+0x78>
 8009ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff4:	07dc      	lsls	r4, r3, #31
 8009ff6:	d50e      	bpl.n	800a016 <_vfiprintf_r+0x6a>
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	b01d      	add	sp, #116	; 0x74
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a002:	4b7b      	ldr	r3, [pc, #492]	; (800a1f0 <_vfiprintf_r+0x244>)
 800a004:	429d      	cmp	r5, r3
 800a006:	d101      	bne.n	800a00c <_vfiprintf_r+0x60>
 800a008:	68b5      	ldr	r5, [r6, #8]
 800a00a:	e7df      	b.n	8009fcc <_vfiprintf_r+0x20>
 800a00c:	4b79      	ldr	r3, [pc, #484]	; (800a1f4 <_vfiprintf_r+0x248>)
 800a00e:	429d      	cmp	r5, r3
 800a010:	bf08      	it	eq
 800a012:	68f5      	ldreq	r5, [r6, #12]
 800a014:	e7da      	b.n	8009fcc <_vfiprintf_r+0x20>
 800a016:	89ab      	ldrh	r3, [r5, #12]
 800a018:	0598      	lsls	r0, r3, #22
 800a01a:	d4ed      	bmi.n	8009ff8 <_vfiprintf_r+0x4c>
 800a01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a01e:	f7ff fdaa 	bl	8009b76 <__retarget_lock_release_recursive>
 800a022:	e7e9      	b.n	8009ff8 <_vfiprintf_r+0x4c>
 800a024:	2300      	movs	r3, #0
 800a026:	9309      	str	r3, [sp, #36]	; 0x24
 800a028:	2320      	movs	r3, #32
 800a02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a032:	2330      	movs	r3, #48	; 0x30
 800a034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1f8 <_vfiprintf_r+0x24c>
 800a038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a03c:	f04f 0901 	mov.w	r9, #1
 800a040:	4623      	mov	r3, r4
 800a042:	469a      	mov	sl, r3
 800a044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a048:	b10a      	cbz	r2, 800a04e <_vfiprintf_r+0xa2>
 800a04a:	2a25      	cmp	r2, #37	; 0x25
 800a04c:	d1f9      	bne.n	800a042 <_vfiprintf_r+0x96>
 800a04e:	ebba 0b04 	subs.w	fp, sl, r4
 800a052:	d00b      	beq.n	800a06c <_vfiprintf_r+0xc0>
 800a054:	465b      	mov	r3, fp
 800a056:	4622      	mov	r2, r4
 800a058:	4629      	mov	r1, r5
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7ff ff93 	bl	8009f86 <__sfputs_r>
 800a060:	3001      	adds	r0, #1
 800a062:	f000 80aa 	beq.w	800a1ba <_vfiprintf_r+0x20e>
 800a066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a068:	445a      	add	r2, fp
 800a06a:	9209      	str	r2, [sp, #36]	; 0x24
 800a06c:	f89a 3000 	ldrb.w	r3, [sl]
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 80a2 	beq.w	800a1ba <_vfiprintf_r+0x20e>
 800a076:	2300      	movs	r3, #0
 800a078:	f04f 32ff 	mov.w	r2, #4294967295
 800a07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a080:	f10a 0a01 	add.w	sl, sl, #1
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08c:	931a      	str	r3, [sp, #104]	; 0x68
 800a08e:	4654      	mov	r4, sl
 800a090:	2205      	movs	r2, #5
 800a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a096:	4858      	ldr	r0, [pc, #352]	; (800a1f8 <_vfiprintf_r+0x24c>)
 800a098:	f7f6 f8b2 	bl	8000200 <memchr>
 800a09c:	9a04      	ldr	r2, [sp, #16]
 800a09e:	b9d8      	cbnz	r0, 800a0d8 <_vfiprintf_r+0x12c>
 800a0a0:	06d1      	lsls	r1, r2, #27
 800a0a2:	bf44      	itt	mi
 800a0a4:	2320      	movmi	r3, #32
 800a0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0aa:	0713      	lsls	r3, r2, #28
 800a0ac:	bf44      	itt	mi
 800a0ae:	232b      	movmi	r3, #43	; 0x2b
 800a0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ba:	d015      	beq.n	800a0e8 <_vfiprintf_r+0x13c>
 800a0bc:	9a07      	ldr	r2, [sp, #28]
 800a0be:	4654      	mov	r4, sl
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	f04f 0c0a 	mov.w	ip, #10
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0cc:	3b30      	subs	r3, #48	; 0x30
 800a0ce:	2b09      	cmp	r3, #9
 800a0d0:	d94e      	bls.n	800a170 <_vfiprintf_r+0x1c4>
 800a0d2:	b1b0      	cbz	r0, 800a102 <_vfiprintf_r+0x156>
 800a0d4:	9207      	str	r2, [sp, #28]
 800a0d6:	e014      	b.n	800a102 <_vfiprintf_r+0x156>
 800a0d8:	eba0 0308 	sub.w	r3, r0, r8
 800a0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	9304      	str	r3, [sp, #16]
 800a0e4:	46a2      	mov	sl, r4
 800a0e6:	e7d2      	b.n	800a08e <_vfiprintf_r+0xe2>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	1d19      	adds	r1, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9103      	str	r1, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfbb      	ittet	lt
 800a0f4:	425b      	neglt	r3, r3
 800a0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fa:	9307      	strge	r3, [sp, #28]
 800a0fc:	9307      	strlt	r3, [sp, #28]
 800a0fe:	bfb8      	it	lt
 800a100:	9204      	strlt	r2, [sp, #16]
 800a102:	7823      	ldrb	r3, [r4, #0]
 800a104:	2b2e      	cmp	r3, #46	; 0x2e
 800a106:	d10c      	bne.n	800a122 <_vfiprintf_r+0x176>
 800a108:	7863      	ldrb	r3, [r4, #1]
 800a10a:	2b2a      	cmp	r3, #42	; 0x2a
 800a10c:	d135      	bne.n	800a17a <_vfiprintf_r+0x1ce>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	1d1a      	adds	r2, r3, #4
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	9203      	str	r2, [sp, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	bfb8      	it	lt
 800a11a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a11e:	3402      	adds	r4, #2
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a208 <_vfiprintf_r+0x25c>
 800a126:	7821      	ldrb	r1, [r4, #0]
 800a128:	2203      	movs	r2, #3
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7f6 f868 	bl	8000200 <memchr>
 800a130:	b140      	cbz	r0, 800a144 <_vfiprintf_r+0x198>
 800a132:	2340      	movs	r3, #64	; 0x40
 800a134:	eba0 000a 	sub.w	r0, r0, sl
 800a138:	fa03 f000 	lsl.w	r0, r3, r0
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	4303      	orrs	r3, r0
 800a140:	3401      	adds	r4, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a148:	482c      	ldr	r0, [pc, #176]	; (800a1fc <_vfiprintf_r+0x250>)
 800a14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a14e:	2206      	movs	r2, #6
 800a150:	f7f6 f856 	bl	8000200 <memchr>
 800a154:	2800      	cmp	r0, #0
 800a156:	d03f      	beq.n	800a1d8 <_vfiprintf_r+0x22c>
 800a158:	4b29      	ldr	r3, [pc, #164]	; (800a200 <_vfiprintf_r+0x254>)
 800a15a:	bb1b      	cbnz	r3, 800a1a4 <_vfiprintf_r+0x1f8>
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	3307      	adds	r3, #7
 800a160:	f023 0307 	bic.w	r3, r3, #7
 800a164:	3308      	adds	r3, #8
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16a:	443b      	add	r3, r7
 800a16c:	9309      	str	r3, [sp, #36]	; 0x24
 800a16e:	e767      	b.n	800a040 <_vfiprintf_r+0x94>
 800a170:	fb0c 3202 	mla	r2, ip, r2, r3
 800a174:	460c      	mov	r4, r1
 800a176:	2001      	movs	r0, #1
 800a178:	e7a5      	b.n	800a0c6 <_vfiprintf_r+0x11a>
 800a17a:	2300      	movs	r3, #0
 800a17c:	3401      	adds	r4, #1
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	4619      	mov	r1, r3
 800a182:	f04f 0c0a 	mov.w	ip, #10
 800a186:	4620      	mov	r0, r4
 800a188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18c:	3a30      	subs	r2, #48	; 0x30
 800a18e:	2a09      	cmp	r2, #9
 800a190:	d903      	bls.n	800a19a <_vfiprintf_r+0x1ee>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0c5      	beq.n	800a122 <_vfiprintf_r+0x176>
 800a196:	9105      	str	r1, [sp, #20]
 800a198:	e7c3      	b.n	800a122 <_vfiprintf_r+0x176>
 800a19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19e:	4604      	mov	r4, r0
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e7f0      	b.n	800a186 <_vfiprintf_r+0x1da>
 800a1a4:	ab03      	add	r3, sp, #12
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4b16      	ldr	r3, [pc, #88]	; (800a204 <_vfiprintf_r+0x258>)
 800a1ac:	a904      	add	r1, sp, #16
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f3af 8000 	nop.w
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	1c78      	adds	r0, r7, #1
 800a1b8:	d1d6      	bne.n	800a168 <_vfiprintf_r+0x1bc>
 800a1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1bc:	07d9      	lsls	r1, r3, #31
 800a1be:	d405      	bmi.n	800a1cc <_vfiprintf_r+0x220>
 800a1c0:	89ab      	ldrh	r3, [r5, #12]
 800a1c2:	059a      	lsls	r2, r3, #22
 800a1c4:	d402      	bmi.n	800a1cc <_vfiprintf_r+0x220>
 800a1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c8:	f7ff fcd5 	bl	8009b76 <__retarget_lock_release_recursive>
 800a1cc:	89ab      	ldrh	r3, [r5, #12]
 800a1ce:	065b      	lsls	r3, r3, #25
 800a1d0:	f53f af12 	bmi.w	8009ff8 <_vfiprintf_r+0x4c>
 800a1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d6:	e711      	b.n	8009ffc <_vfiprintf_r+0x50>
 800a1d8:	ab03      	add	r3, sp, #12
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <_vfiprintf_r+0x258>)
 800a1e0:	a904      	add	r1, sp, #16
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f000 f880 	bl	800a2e8 <_printf_i>
 800a1e8:	e7e4      	b.n	800a1b4 <_vfiprintf_r+0x208>
 800a1ea:	bf00      	nop
 800a1ec:	0800ad00 	.word	0x0800ad00
 800a1f0:	0800ad20 	.word	0x0800ad20
 800a1f4:	0800ace0 	.word	0x0800ace0
 800a1f8:	0800ad40 	.word	0x0800ad40
 800a1fc:	0800ad4a 	.word	0x0800ad4a
 800a200:	00000000 	.word	0x00000000
 800a204:	08009f87 	.word	0x08009f87
 800a208:	0800ad46 	.word	0x0800ad46

0800a20c <_printf_common>:
 800a20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a210:	4616      	mov	r6, r2
 800a212:	4699      	mov	r9, r3
 800a214:	688a      	ldr	r2, [r1, #8]
 800a216:	690b      	ldr	r3, [r1, #16]
 800a218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a21c:	4293      	cmp	r3, r2
 800a21e:	bfb8      	it	lt
 800a220:	4613      	movlt	r3, r2
 800a222:	6033      	str	r3, [r6, #0]
 800a224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a228:	4607      	mov	r7, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b10a      	cbz	r2, 800a232 <_printf_common+0x26>
 800a22e:	3301      	adds	r3, #1
 800a230:	6033      	str	r3, [r6, #0]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	0699      	lsls	r1, r3, #26
 800a236:	bf42      	ittt	mi
 800a238:	6833      	ldrmi	r3, [r6, #0]
 800a23a:	3302      	addmi	r3, #2
 800a23c:	6033      	strmi	r3, [r6, #0]
 800a23e:	6825      	ldr	r5, [r4, #0]
 800a240:	f015 0506 	ands.w	r5, r5, #6
 800a244:	d106      	bne.n	800a254 <_printf_common+0x48>
 800a246:	f104 0a19 	add.w	sl, r4, #25
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	6832      	ldr	r2, [r6, #0]
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	42ab      	cmp	r3, r5
 800a252:	dc26      	bgt.n	800a2a2 <_printf_common+0x96>
 800a254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a258:	1e13      	subs	r3, r2, #0
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	bf18      	it	ne
 800a25e:	2301      	movne	r3, #1
 800a260:	0692      	lsls	r2, r2, #26
 800a262:	d42b      	bmi.n	800a2bc <_printf_common+0xb0>
 800a264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a268:	4649      	mov	r1, r9
 800a26a:	4638      	mov	r0, r7
 800a26c:	47c0      	blx	r8
 800a26e:	3001      	adds	r0, #1
 800a270:	d01e      	beq.n	800a2b0 <_printf_common+0xa4>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	68e5      	ldr	r5, [r4, #12]
 800a276:	6832      	ldr	r2, [r6, #0]
 800a278:	f003 0306 	and.w	r3, r3, #6
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	bf08      	it	eq
 800a280:	1aad      	subeq	r5, r5, r2
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	bf0c      	ite	eq
 800a288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a28c:	2500      	movne	r5, #0
 800a28e:	4293      	cmp	r3, r2
 800a290:	bfc4      	itt	gt
 800a292:	1a9b      	subgt	r3, r3, r2
 800a294:	18ed      	addgt	r5, r5, r3
 800a296:	2600      	movs	r6, #0
 800a298:	341a      	adds	r4, #26
 800a29a:	42b5      	cmp	r5, r6
 800a29c:	d11a      	bne.n	800a2d4 <_printf_common+0xc8>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e008      	b.n	800a2b4 <_printf_common+0xa8>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	47c0      	blx	r8
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d103      	bne.n	800a2b8 <_printf_common+0xac>
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	e7c6      	b.n	800a24a <_printf_common+0x3e>
 800a2bc:	18e1      	adds	r1, r4, r3
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	2030      	movs	r0, #48	; 0x30
 800a2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2c6:	4422      	add	r2, r4
 800a2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	e7c7      	b.n	800a264 <_printf_common+0x58>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4649      	mov	r1, r9
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c0      	blx	r8
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d0e6      	beq.n	800a2b0 <_printf_common+0xa4>
 800a2e2:	3601      	adds	r6, #1
 800a2e4:	e7d9      	b.n	800a29a <_printf_common+0x8e>
	...

0800a2e8 <_printf_i>:
 800a2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ec:	7e0f      	ldrb	r7, [r1, #24]
 800a2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2f0:	2f78      	cmp	r7, #120	; 0x78
 800a2f2:	4691      	mov	r9, r2
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	469a      	mov	sl, r3
 800a2fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2fe:	d807      	bhi.n	800a310 <_printf_i+0x28>
 800a300:	2f62      	cmp	r7, #98	; 0x62
 800a302:	d80a      	bhi.n	800a31a <_printf_i+0x32>
 800a304:	2f00      	cmp	r7, #0
 800a306:	f000 80d8 	beq.w	800a4ba <_printf_i+0x1d2>
 800a30a:	2f58      	cmp	r7, #88	; 0x58
 800a30c:	f000 80a3 	beq.w	800a456 <_printf_i+0x16e>
 800a310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a318:	e03a      	b.n	800a390 <_printf_i+0xa8>
 800a31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a31e:	2b15      	cmp	r3, #21
 800a320:	d8f6      	bhi.n	800a310 <_printf_i+0x28>
 800a322:	a101      	add	r1, pc, #4	; (adr r1, 800a328 <_printf_i+0x40>)
 800a324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a328:	0800a381 	.word	0x0800a381
 800a32c:	0800a395 	.word	0x0800a395
 800a330:	0800a311 	.word	0x0800a311
 800a334:	0800a311 	.word	0x0800a311
 800a338:	0800a311 	.word	0x0800a311
 800a33c:	0800a311 	.word	0x0800a311
 800a340:	0800a395 	.word	0x0800a395
 800a344:	0800a311 	.word	0x0800a311
 800a348:	0800a311 	.word	0x0800a311
 800a34c:	0800a311 	.word	0x0800a311
 800a350:	0800a311 	.word	0x0800a311
 800a354:	0800a4a1 	.word	0x0800a4a1
 800a358:	0800a3c5 	.word	0x0800a3c5
 800a35c:	0800a483 	.word	0x0800a483
 800a360:	0800a311 	.word	0x0800a311
 800a364:	0800a311 	.word	0x0800a311
 800a368:	0800a4c3 	.word	0x0800a4c3
 800a36c:	0800a311 	.word	0x0800a311
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a311 	.word	0x0800a311
 800a378:	0800a311 	.word	0x0800a311
 800a37c:	0800a48b 	.word	0x0800a48b
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	1d1a      	adds	r2, r3, #4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	602a      	str	r2, [r5, #0]
 800a388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a390:	2301      	movs	r3, #1
 800a392:	e0a3      	b.n	800a4dc <_printf_i+0x1f4>
 800a394:	6820      	ldr	r0, [r4, #0]
 800a396:	6829      	ldr	r1, [r5, #0]
 800a398:	0606      	lsls	r6, r0, #24
 800a39a:	f101 0304 	add.w	r3, r1, #4
 800a39e:	d50a      	bpl.n	800a3b6 <_printf_i+0xce>
 800a3a0:	680e      	ldr	r6, [r1, #0]
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	2e00      	cmp	r6, #0
 800a3a6:	da03      	bge.n	800a3b0 <_printf_i+0xc8>
 800a3a8:	232d      	movs	r3, #45	; 0x2d
 800a3aa:	4276      	negs	r6, r6
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b0:	485e      	ldr	r0, [pc, #376]	; (800a52c <_printf_i+0x244>)
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e019      	b.n	800a3ea <_printf_i+0x102>
 800a3b6:	680e      	ldr	r6, [r1, #0]
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3be:	bf18      	it	ne
 800a3c0:	b236      	sxthne	r6, r6
 800a3c2:	e7ef      	b.n	800a3a4 <_printf_i+0xbc>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	6820      	ldr	r0, [r4, #0]
 800a3c8:	1d19      	adds	r1, r3, #4
 800a3ca:	6029      	str	r1, [r5, #0]
 800a3cc:	0601      	lsls	r1, r0, #24
 800a3ce:	d501      	bpl.n	800a3d4 <_printf_i+0xec>
 800a3d0:	681e      	ldr	r6, [r3, #0]
 800a3d2:	e002      	b.n	800a3da <_printf_i+0xf2>
 800a3d4:	0646      	lsls	r6, r0, #25
 800a3d6:	d5fb      	bpl.n	800a3d0 <_printf_i+0xe8>
 800a3d8:	881e      	ldrh	r6, [r3, #0]
 800a3da:	4854      	ldr	r0, [pc, #336]	; (800a52c <_printf_i+0x244>)
 800a3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a3de:	bf0c      	ite	eq
 800a3e0:	2308      	moveq	r3, #8
 800a3e2:	230a      	movne	r3, #10
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3ea:	6865      	ldr	r5, [r4, #4]
 800a3ec:	60a5      	str	r5, [r4, #8]
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	bfa2      	ittt	ge
 800a3f2:	6821      	ldrge	r1, [r4, #0]
 800a3f4:	f021 0104 	bicge.w	r1, r1, #4
 800a3f8:	6021      	strge	r1, [r4, #0]
 800a3fa:	b90e      	cbnz	r6, 800a400 <_printf_i+0x118>
 800a3fc:	2d00      	cmp	r5, #0
 800a3fe:	d04d      	beq.n	800a49c <_printf_i+0x1b4>
 800a400:	4615      	mov	r5, r2
 800a402:	fbb6 f1f3 	udiv	r1, r6, r3
 800a406:	fb03 6711 	mls	r7, r3, r1, r6
 800a40a:	5dc7      	ldrb	r7, [r0, r7]
 800a40c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a410:	4637      	mov	r7, r6
 800a412:	42bb      	cmp	r3, r7
 800a414:	460e      	mov	r6, r1
 800a416:	d9f4      	bls.n	800a402 <_printf_i+0x11a>
 800a418:	2b08      	cmp	r3, #8
 800a41a:	d10b      	bne.n	800a434 <_printf_i+0x14c>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	07de      	lsls	r6, r3, #31
 800a420:	d508      	bpl.n	800a434 <_printf_i+0x14c>
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	6861      	ldr	r1, [r4, #4]
 800a426:	4299      	cmp	r1, r3
 800a428:	bfde      	ittt	le
 800a42a:	2330      	movle	r3, #48	; 0x30
 800a42c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a430:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a434:	1b52      	subs	r2, r2, r5
 800a436:	6122      	str	r2, [r4, #16]
 800a438:	f8cd a000 	str.w	sl, [sp]
 800a43c:	464b      	mov	r3, r9
 800a43e:	aa03      	add	r2, sp, #12
 800a440:	4621      	mov	r1, r4
 800a442:	4640      	mov	r0, r8
 800a444:	f7ff fee2 	bl	800a20c <_printf_common>
 800a448:	3001      	adds	r0, #1
 800a44a:	d14c      	bne.n	800a4e6 <_printf_i+0x1fe>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b004      	add	sp, #16
 800a452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a456:	4835      	ldr	r0, [pc, #212]	; (800a52c <_printf_i+0x244>)
 800a458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a45c:	6829      	ldr	r1, [r5, #0]
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	f851 6b04 	ldr.w	r6, [r1], #4
 800a464:	6029      	str	r1, [r5, #0]
 800a466:	061d      	lsls	r5, r3, #24
 800a468:	d514      	bpl.n	800a494 <_printf_i+0x1ac>
 800a46a:	07df      	lsls	r7, r3, #31
 800a46c:	bf44      	itt	mi
 800a46e:	f043 0320 	orrmi.w	r3, r3, #32
 800a472:	6023      	strmi	r3, [r4, #0]
 800a474:	b91e      	cbnz	r6, 800a47e <_printf_i+0x196>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	f023 0320 	bic.w	r3, r3, #32
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	2310      	movs	r3, #16
 800a480:	e7b0      	b.n	800a3e4 <_printf_i+0xfc>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	f043 0320 	orr.w	r3, r3, #32
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	2378      	movs	r3, #120	; 0x78
 800a48c:	4828      	ldr	r0, [pc, #160]	; (800a530 <_printf_i+0x248>)
 800a48e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a492:	e7e3      	b.n	800a45c <_printf_i+0x174>
 800a494:	0659      	lsls	r1, r3, #25
 800a496:	bf48      	it	mi
 800a498:	b2b6      	uxthmi	r6, r6
 800a49a:	e7e6      	b.n	800a46a <_printf_i+0x182>
 800a49c:	4615      	mov	r5, r2
 800a49e:	e7bb      	b.n	800a418 <_printf_i+0x130>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	6826      	ldr	r6, [r4, #0]
 800a4a4:	6961      	ldr	r1, [r4, #20]
 800a4a6:	1d18      	adds	r0, r3, #4
 800a4a8:	6028      	str	r0, [r5, #0]
 800a4aa:	0635      	lsls	r5, r6, #24
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	d501      	bpl.n	800a4b4 <_printf_i+0x1cc>
 800a4b0:	6019      	str	r1, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <_printf_i+0x1d2>
 800a4b4:	0670      	lsls	r0, r6, #25
 800a4b6:	d5fb      	bpl.n	800a4b0 <_printf_i+0x1c8>
 800a4b8:	8019      	strh	r1, [r3, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	4615      	mov	r5, r2
 800a4c0:	e7ba      	b.n	800a438 <_printf_i+0x150>
 800a4c2:	682b      	ldr	r3, [r5, #0]
 800a4c4:	1d1a      	adds	r2, r3, #4
 800a4c6:	602a      	str	r2, [r5, #0]
 800a4c8:	681d      	ldr	r5, [r3, #0]
 800a4ca:	6862      	ldr	r2, [r4, #4]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f7f5 fe96 	bl	8000200 <memchr>
 800a4d4:	b108      	cbz	r0, 800a4da <_printf_i+0x1f2>
 800a4d6:	1b40      	subs	r0, r0, r5
 800a4d8:	6060      	str	r0, [r4, #4]
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e4:	e7a8      	b.n	800a438 <_printf_i+0x150>
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	462a      	mov	r2, r5
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	47d0      	blx	sl
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d0ab      	beq.n	800a44c <_printf_i+0x164>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	079b      	lsls	r3, r3, #30
 800a4f8:	d413      	bmi.n	800a522 <_printf_i+0x23a>
 800a4fa:	68e0      	ldr	r0, [r4, #12]
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	4298      	cmp	r0, r3
 800a500:	bfb8      	it	lt
 800a502:	4618      	movlt	r0, r3
 800a504:	e7a4      	b.n	800a450 <_printf_i+0x168>
 800a506:	2301      	movs	r3, #1
 800a508:	4632      	mov	r2, r6
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	47d0      	blx	sl
 800a510:	3001      	adds	r0, #1
 800a512:	d09b      	beq.n	800a44c <_printf_i+0x164>
 800a514:	3501      	adds	r5, #1
 800a516:	68e3      	ldr	r3, [r4, #12]
 800a518:	9903      	ldr	r1, [sp, #12]
 800a51a:	1a5b      	subs	r3, r3, r1
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	dcf2      	bgt.n	800a506 <_printf_i+0x21e>
 800a520:	e7eb      	b.n	800a4fa <_printf_i+0x212>
 800a522:	2500      	movs	r5, #0
 800a524:	f104 0619 	add.w	r6, r4, #25
 800a528:	e7f5      	b.n	800a516 <_printf_i+0x22e>
 800a52a:	bf00      	nop
 800a52c:	0800ad51 	.word	0x0800ad51
 800a530:	0800ad62 	.word	0x0800ad62

0800a534 <_sbrk_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d06      	ldr	r5, [pc, #24]	; (800a550 <_sbrk_r+0x1c>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f6 fc3e 	bl	8000dc0 <_sbrk>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_sbrk_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_sbrk_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20000408 	.word	0x20000408

0800a554 <__sread>:
 800a554:	b510      	push	{r4, lr}
 800a556:	460c      	mov	r4, r1
 800a558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55c:	f000 fb0a 	bl	800ab74 <_read_r>
 800a560:	2800      	cmp	r0, #0
 800a562:	bfab      	itete	ge
 800a564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a566:	89a3      	ldrhlt	r3, [r4, #12]
 800a568:	181b      	addge	r3, r3, r0
 800a56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a56e:	bfac      	ite	ge
 800a570:	6563      	strge	r3, [r4, #84]	; 0x54
 800a572:	81a3      	strhlt	r3, [r4, #12]
 800a574:	bd10      	pop	{r4, pc}

0800a576 <__swrite>:
 800a576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	461f      	mov	r7, r3
 800a57c:	898b      	ldrh	r3, [r1, #12]
 800a57e:	05db      	lsls	r3, r3, #23
 800a580:	4605      	mov	r5, r0
 800a582:	460c      	mov	r4, r1
 800a584:	4616      	mov	r6, r2
 800a586:	d505      	bpl.n	800a594 <__swrite+0x1e>
 800a588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58c:	2302      	movs	r3, #2
 800a58e:	2200      	movs	r2, #0
 800a590:	f000 f9c8 	bl	800a924 <_lseek_r>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5aa:	f000 b869 	b.w	800a680 <_write_r>

0800a5ae <__sseek>:
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b6:	f000 f9b5 	bl	800a924 <_lseek_r>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	bf15      	itete	ne
 800a5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ca:	81a3      	strheq	r3, [r4, #12]
 800a5cc:	bf18      	it	ne
 800a5ce:	81a3      	strhne	r3, [r4, #12]
 800a5d0:	bd10      	pop	{r4, pc}

0800a5d2 <__sclose>:
 800a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d6:	f000 b8d3 	b.w	800a780 <_close_r>
	...

0800a5dc <__swbuf_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	460e      	mov	r6, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b118      	cbz	r0, 800a5ee <__swbuf_r+0x12>
 800a5e6:	6983      	ldr	r3, [r0, #24]
 800a5e8:	b90b      	cbnz	r3, 800a5ee <__swbuf_r+0x12>
 800a5ea:	f7ff fa25 	bl	8009a38 <__sinit>
 800a5ee:	4b21      	ldr	r3, [pc, #132]	; (800a674 <__swbuf_r+0x98>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d12b      	bne.n	800a64c <__swbuf_r+0x70>
 800a5f4:	686c      	ldr	r4, [r5, #4]
 800a5f6:	69a3      	ldr	r3, [r4, #24]
 800a5f8:	60a3      	str	r3, [r4, #8]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	071a      	lsls	r2, r3, #28
 800a5fe:	d52f      	bpl.n	800a660 <__swbuf_r+0x84>
 800a600:	6923      	ldr	r3, [r4, #16]
 800a602:	b36b      	cbz	r3, 800a660 <__swbuf_r+0x84>
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1ac0      	subs	r0, r0, r3
 800a60a:	6963      	ldr	r3, [r4, #20]
 800a60c:	b2f6      	uxtb	r6, r6
 800a60e:	4283      	cmp	r3, r0
 800a610:	4637      	mov	r7, r6
 800a612:	dc04      	bgt.n	800a61e <__swbuf_r+0x42>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f948 	bl	800a8ac <_fflush_r>
 800a61c:	bb30      	cbnz	r0, 800a66c <__swbuf_r+0x90>
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	3b01      	subs	r3, #1
 800a622:	60a3      	str	r3, [r4, #8]
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	6022      	str	r2, [r4, #0]
 800a62a:	701e      	strb	r6, [r3, #0]
 800a62c:	6963      	ldr	r3, [r4, #20]
 800a62e:	3001      	adds	r0, #1
 800a630:	4283      	cmp	r3, r0
 800a632:	d004      	beq.n	800a63e <__swbuf_r+0x62>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	07db      	lsls	r3, r3, #31
 800a638:	d506      	bpl.n	800a648 <__swbuf_r+0x6c>
 800a63a:	2e0a      	cmp	r6, #10
 800a63c:	d104      	bne.n	800a648 <__swbuf_r+0x6c>
 800a63e:	4621      	mov	r1, r4
 800a640:	4628      	mov	r0, r5
 800a642:	f000 f933 	bl	800a8ac <_fflush_r>
 800a646:	b988      	cbnz	r0, 800a66c <__swbuf_r+0x90>
 800a648:	4638      	mov	r0, r7
 800a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <__swbuf_r+0x9c>)
 800a64e:	429c      	cmp	r4, r3
 800a650:	d101      	bne.n	800a656 <__swbuf_r+0x7a>
 800a652:	68ac      	ldr	r4, [r5, #8]
 800a654:	e7cf      	b.n	800a5f6 <__swbuf_r+0x1a>
 800a656:	4b09      	ldr	r3, [pc, #36]	; (800a67c <__swbuf_r+0xa0>)
 800a658:	429c      	cmp	r4, r3
 800a65a:	bf08      	it	eq
 800a65c:	68ec      	ldreq	r4, [r5, #12]
 800a65e:	e7ca      	b.n	800a5f6 <__swbuf_r+0x1a>
 800a660:	4621      	mov	r1, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f81e 	bl	800a6a4 <__swsetup_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d0cb      	beq.n	800a604 <__swbuf_r+0x28>
 800a66c:	f04f 37ff 	mov.w	r7, #4294967295
 800a670:	e7ea      	b.n	800a648 <__swbuf_r+0x6c>
 800a672:	bf00      	nop
 800a674:	0800ad00 	.word	0x0800ad00
 800a678:	0800ad20 	.word	0x0800ad20
 800a67c:	0800ace0 	.word	0x0800ace0

0800a680 <_write_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d07      	ldr	r5, [pc, #28]	; (800a6a0 <_write_r+0x20>)
 800a684:	4604      	mov	r4, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7f6 fb45 	bl	8000d1e <_write>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_write_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_write_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000408 	.word	0x20000408

0800a6a4 <__swsetup_r>:
 800a6a4:	4b32      	ldr	r3, [pc, #200]	; (800a770 <__swsetup_r+0xcc>)
 800a6a6:	b570      	push	{r4, r5, r6, lr}
 800a6a8:	681d      	ldr	r5, [r3, #0]
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	b125      	cbz	r5, 800a6ba <__swsetup_r+0x16>
 800a6b0:	69ab      	ldr	r3, [r5, #24]
 800a6b2:	b913      	cbnz	r3, 800a6ba <__swsetup_r+0x16>
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f7ff f9bf 	bl	8009a38 <__sinit>
 800a6ba:	4b2e      	ldr	r3, [pc, #184]	; (800a774 <__swsetup_r+0xd0>)
 800a6bc:	429c      	cmp	r4, r3
 800a6be:	d10f      	bne.n	800a6e0 <__swsetup_r+0x3c>
 800a6c0:	686c      	ldr	r4, [r5, #4]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c8:	0719      	lsls	r1, r3, #28
 800a6ca:	d42c      	bmi.n	800a726 <__swsetup_r+0x82>
 800a6cc:	06dd      	lsls	r5, r3, #27
 800a6ce:	d411      	bmi.n	800a6f4 <__swsetup_r+0x50>
 800a6d0:	2309      	movs	r3, #9
 800a6d2:	6033      	str	r3, [r6, #0]
 800a6d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	e03e      	b.n	800a75e <__swsetup_r+0xba>
 800a6e0:	4b25      	ldr	r3, [pc, #148]	; (800a778 <__swsetup_r+0xd4>)
 800a6e2:	429c      	cmp	r4, r3
 800a6e4:	d101      	bne.n	800a6ea <__swsetup_r+0x46>
 800a6e6:	68ac      	ldr	r4, [r5, #8]
 800a6e8:	e7eb      	b.n	800a6c2 <__swsetup_r+0x1e>
 800a6ea:	4b24      	ldr	r3, [pc, #144]	; (800a77c <__swsetup_r+0xd8>)
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	bf08      	it	eq
 800a6f0:	68ec      	ldreq	r4, [r5, #12]
 800a6f2:	e7e6      	b.n	800a6c2 <__swsetup_r+0x1e>
 800a6f4:	0758      	lsls	r0, r3, #29
 800a6f6:	d512      	bpl.n	800a71e <__swsetup_r+0x7a>
 800a6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6fa:	b141      	cbz	r1, 800a70e <__swsetup_r+0x6a>
 800a6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a700:	4299      	cmp	r1, r3
 800a702:	d002      	beq.n	800a70a <__swsetup_r+0x66>
 800a704:	4630      	mov	r0, r6
 800a706:	f000 f9b9 	bl	800aa7c <_free_r>
 800a70a:	2300      	movs	r3, #0
 800a70c:	6363      	str	r3, [r4, #52]	; 0x34
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	2300      	movs	r3, #0
 800a718:	6063      	str	r3, [r4, #4]
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f043 0308 	orr.w	r3, r3, #8
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	b94b      	cbnz	r3, 800a73e <__swsetup_r+0x9a>
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a734:	d003      	beq.n	800a73e <__swsetup_r+0x9a>
 800a736:	4621      	mov	r1, r4
 800a738:	4630      	mov	r0, r6
 800a73a:	f000 f92b 	bl	800a994 <__smakebuf_r>
 800a73e:	89a0      	ldrh	r0, [r4, #12]
 800a740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a744:	f010 0301 	ands.w	r3, r0, #1
 800a748:	d00a      	beq.n	800a760 <__swsetup_r+0xbc>
 800a74a:	2300      	movs	r3, #0
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	6963      	ldr	r3, [r4, #20]
 800a750:	425b      	negs	r3, r3
 800a752:	61a3      	str	r3, [r4, #24]
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b943      	cbnz	r3, 800a76a <__swsetup_r+0xc6>
 800a758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a75c:	d1ba      	bne.n	800a6d4 <__swsetup_r+0x30>
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	0781      	lsls	r1, r0, #30
 800a762:	bf58      	it	pl
 800a764:	6963      	ldrpl	r3, [r4, #20]
 800a766:	60a3      	str	r3, [r4, #8]
 800a768:	e7f4      	b.n	800a754 <__swsetup_r+0xb0>
 800a76a:	2000      	movs	r0, #0
 800a76c:	e7f7      	b.n	800a75e <__swsetup_r+0xba>
 800a76e:	bf00      	nop
 800a770:	20000094 	.word	0x20000094
 800a774:	0800ad00 	.word	0x0800ad00
 800a778:	0800ad20 	.word	0x0800ad20
 800a77c:	0800ace0 	.word	0x0800ace0

0800a780 <_close_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d06      	ldr	r5, [pc, #24]	; (800a79c <_close_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f6 fae3 	bl	8000d56 <_close>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_close_r+0x1a>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_close_r+0x1a>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20000408 	.word	0x20000408

0800a7a0 <__sflush_r>:
 800a7a0:	898a      	ldrh	r2, [r1, #12]
 800a7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	0710      	lsls	r0, r2, #28
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	d458      	bmi.n	800a860 <__sflush_r+0xc0>
 800a7ae:	684b      	ldr	r3, [r1, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dc05      	bgt.n	800a7c0 <__sflush_r+0x20>
 800a7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dc02      	bgt.n	800a7c0 <__sflush_r+0x20>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	d0f9      	beq.n	800a7ba <__sflush_r+0x1a>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7cc:	682f      	ldr	r7, [r5, #0]
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	d032      	beq.n	800a838 <__sflush_r+0x98>
 800a7d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	075a      	lsls	r2, r3, #29
 800a7d8:	d505      	bpl.n	800a7e6 <__sflush_r+0x46>
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	1ac0      	subs	r0, r0, r3
 800a7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7e0:	b10b      	cbz	r3, 800a7e6 <__sflush_r+0x46>
 800a7e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7e4:	1ac0      	subs	r0, r0, r3
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ec:	6a21      	ldr	r1, [r4, #32]
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	47b0      	blx	r6
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	d106      	bne.n	800a806 <__sflush_r+0x66>
 800a7f8:	6829      	ldr	r1, [r5, #0]
 800a7fa:	291d      	cmp	r1, #29
 800a7fc:	d82c      	bhi.n	800a858 <__sflush_r+0xb8>
 800a7fe:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <__sflush_r+0x108>)
 800a800:	40ca      	lsrs	r2, r1
 800a802:	07d6      	lsls	r6, r2, #31
 800a804:	d528      	bpl.n	800a858 <__sflush_r+0xb8>
 800a806:	2200      	movs	r2, #0
 800a808:	6062      	str	r2, [r4, #4]
 800a80a:	04d9      	lsls	r1, r3, #19
 800a80c:	6922      	ldr	r2, [r4, #16]
 800a80e:	6022      	str	r2, [r4, #0]
 800a810:	d504      	bpl.n	800a81c <__sflush_r+0x7c>
 800a812:	1c42      	adds	r2, r0, #1
 800a814:	d101      	bne.n	800a81a <__sflush_r+0x7a>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	b903      	cbnz	r3, 800a81c <__sflush_r+0x7c>
 800a81a:	6560      	str	r0, [r4, #84]	; 0x54
 800a81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a81e:	602f      	str	r7, [r5, #0]
 800a820:	2900      	cmp	r1, #0
 800a822:	d0ca      	beq.n	800a7ba <__sflush_r+0x1a>
 800a824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a828:	4299      	cmp	r1, r3
 800a82a:	d002      	beq.n	800a832 <__sflush_r+0x92>
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f925 	bl	800aa7c <_free_r>
 800a832:	2000      	movs	r0, #0
 800a834:	6360      	str	r0, [r4, #52]	; 0x34
 800a836:	e7c1      	b.n	800a7bc <__sflush_r+0x1c>
 800a838:	6a21      	ldr	r1, [r4, #32]
 800a83a:	2301      	movs	r3, #1
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b0      	blx	r6
 800a840:	1c41      	adds	r1, r0, #1
 800a842:	d1c7      	bne.n	800a7d4 <__sflush_r+0x34>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0c4      	beq.n	800a7d4 <__sflush_r+0x34>
 800a84a:	2b1d      	cmp	r3, #29
 800a84c:	d001      	beq.n	800a852 <__sflush_r+0xb2>
 800a84e:	2b16      	cmp	r3, #22
 800a850:	d101      	bne.n	800a856 <__sflush_r+0xb6>
 800a852:	602f      	str	r7, [r5, #0]
 800a854:	e7b1      	b.n	800a7ba <__sflush_r+0x1a>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	e7ad      	b.n	800a7bc <__sflush_r+0x1c>
 800a860:	690f      	ldr	r7, [r1, #16]
 800a862:	2f00      	cmp	r7, #0
 800a864:	d0a9      	beq.n	800a7ba <__sflush_r+0x1a>
 800a866:	0793      	lsls	r3, r2, #30
 800a868:	680e      	ldr	r6, [r1, #0]
 800a86a:	bf08      	it	eq
 800a86c:	694b      	ldreq	r3, [r1, #20]
 800a86e:	600f      	str	r7, [r1, #0]
 800a870:	bf18      	it	ne
 800a872:	2300      	movne	r3, #0
 800a874:	eba6 0807 	sub.w	r8, r6, r7
 800a878:	608b      	str	r3, [r1, #8]
 800a87a:	f1b8 0f00 	cmp.w	r8, #0
 800a87e:	dd9c      	ble.n	800a7ba <__sflush_r+0x1a>
 800a880:	6a21      	ldr	r1, [r4, #32]
 800a882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a884:	4643      	mov	r3, r8
 800a886:	463a      	mov	r2, r7
 800a888:	4628      	mov	r0, r5
 800a88a:	47b0      	blx	r6
 800a88c:	2800      	cmp	r0, #0
 800a88e:	dc06      	bgt.n	800a89e <__sflush_r+0xfe>
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	e78e      	b.n	800a7bc <__sflush_r+0x1c>
 800a89e:	4407      	add	r7, r0
 800a8a0:	eba8 0800 	sub.w	r8, r8, r0
 800a8a4:	e7e9      	b.n	800a87a <__sflush_r+0xda>
 800a8a6:	bf00      	nop
 800a8a8:	20400001 	.word	0x20400001

0800a8ac <_fflush_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	690b      	ldr	r3, [r1, #16]
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	b913      	cbnz	r3, 800a8bc <_fflush_r+0x10>
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	b118      	cbz	r0, 800a8c6 <_fflush_r+0x1a>
 800a8be:	6983      	ldr	r3, [r0, #24]
 800a8c0:	b90b      	cbnz	r3, 800a8c6 <_fflush_r+0x1a>
 800a8c2:	f7ff f8b9 	bl	8009a38 <__sinit>
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <_fflush_r+0x6c>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d11b      	bne.n	800a904 <_fflush_r+0x58>
 800a8cc:	686c      	ldr	r4, [r5, #4]
 800a8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0ef      	beq.n	800a8b6 <_fflush_r+0xa>
 800a8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8d8:	07d0      	lsls	r0, r2, #31
 800a8da:	d404      	bmi.n	800a8e6 <_fflush_r+0x3a>
 800a8dc:	0599      	lsls	r1, r3, #22
 800a8de:	d402      	bmi.n	800a8e6 <_fflush_r+0x3a>
 800a8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e2:	f7ff f947 	bl	8009b74 <__retarget_lock_acquire_recursive>
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	f7ff ff59 	bl	800a7a0 <__sflush_r>
 800a8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f0:	07da      	lsls	r2, r3, #31
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	d4e0      	bmi.n	800a8b8 <_fflush_r+0xc>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	059b      	lsls	r3, r3, #22
 800a8fa:	d4dd      	bmi.n	800a8b8 <_fflush_r+0xc>
 800a8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8fe:	f7ff f93a 	bl	8009b76 <__retarget_lock_release_recursive>
 800a902:	e7d9      	b.n	800a8b8 <_fflush_r+0xc>
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <_fflush_r+0x70>)
 800a906:	429c      	cmp	r4, r3
 800a908:	d101      	bne.n	800a90e <_fflush_r+0x62>
 800a90a:	68ac      	ldr	r4, [r5, #8]
 800a90c:	e7df      	b.n	800a8ce <_fflush_r+0x22>
 800a90e:	4b04      	ldr	r3, [pc, #16]	; (800a920 <_fflush_r+0x74>)
 800a910:	429c      	cmp	r4, r3
 800a912:	bf08      	it	eq
 800a914:	68ec      	ldreq	r4, [r5, #12]
 800a916:	e7da      	b.n	800a8ce <_fflush_r+0x22>
 800a918:	0800ad00 	.word	0x0800ad00
 800a91c:	0800ad20 	.word	0x0800ad20
 800a920:	0800ace0 	.word	0x0800ace0

0800a924 <_lseek_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	; (800a944 <_lseek_r+0x20>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7f6 fa36 	bl	8000da4 <_lseek>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_lseek_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_lseek_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000408 	.word	0x20000408

0800a948 <__swhatbuf_r>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	460e      	mov	r6, r1
 800a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a950:	2900      	cmp	r1, #0
 800a952:	b096      	sub	sp, #88	; 0x58
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	da08      	bge.n	800a96c <__swhatbuf_r+0x24>
 800a95a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	061a      	lsls	r2, r3, #24
 800a964:	d410      	bmi.n	800a988 <__swhatbuf_r+0x40>
 800a966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96a:	e00e      	b.n	800a98a <__swhatbuf_r+0x42>
 800a96c:	466a      	mov	r2, sp
 800a96e:	f000 f913 	bl	800ab98 <_fstat_r>
 800a972:	2800      	cmp	r0, #0
 800a974:	dbf1      	blt.n	800a95a <__swhatbuf_r+0x12>
 800a976:	9a01      	ldr	r2, [sp, #4]
 800a978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a97c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a980:	425a      	negs	r2, r3
 800a982:	415a      	adcs	r2, r3
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	e7ee      	b.n	800a966 <__swhatbuf_r+0x1e>
 800a988:	2340      	movs	r3, #64	; 0x40
 800a98a:	2000      	movs	r0, #0
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	b016      	add	sp, #88	; 0x58
 800a990:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a994 <__smakebuf_r>:
 800a994:	898b      	ldrh	r3, [r1, #12]
 800a996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a998:	079d      	lsls	r5, r3, #30
 800a99a:	4606      	mov	r6, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	d507      	bpl.n	800a9b0 <__smakebuf_r+0x1c>
 800a9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	6163      	str	r3, [r4, #20]
 800a9ac:	b002      	add	sp, #8
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	ab01      	add	r3, sp, #4
 800a9b2:	466a      	mov	r2, sp
 800a9b4:	f7ff ffc8 	bl	800a948 <__swhatbuf_r>
 800a9b8:	9900      	ldr	r1, [sp, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff f8fb 	bl	8009bb8 <_malloc_r>
 800a9c2:	b948      	cbnz	r0, 800a9d8 <__smakebuf_r+0x44>
 800a9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c8:	059a      	lsls	r2, r3, #22
 800a9ca:	d4ef      	bmi.n	800a9ac <__smakebuf_r+0x18>
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	f043 0302 	orr.w	r3, r3, #2
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7e3      	b.n	800a9a0 <__smakebuf_r+0xc>
 800a9d8:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <__smakebuf_r+0x7c>)
 800a9da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	6020      	str	r0, [r4, #0]
 800a9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	6163      	str	r3, [r4, #20]
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	6120      	str	r0, [r4, #16]
 800a9ee:	b15b      	cbz	r3, 800aa08 <__smakebuf_r+0x74>
 800a9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f000 f8e1 	bl	800abbc <_isatty_r>
 800a9fa:	b128      	cbz	r0, 800aa08 <__smakebuf_r+0x74>
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	f023 0303 	bic.w	r3, r3, #3
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	81a3      	strh	r3, [r4, #12]
 800aa08:	89a0      	ldrh	r0, [r4, #12]
 800aa0a:	4305      	orrs	r5, r0
 800aa0c:	81a5      	strh	r5, [r4, #12]
 800aa0e:	e7cd      	b.n	800a9ac <__smakebuf_r+0x18>
 800aa10:	080099d1 	.word	0x080099d1

0800aa14 <memcpy>:
 800aa14:	440a      	add	r2, r1
 800aa16:	4291      	cmp	r1, r2
 800aa18:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa1c:	d100      	bne.n	800aa20 <memcpy+0xc>
 800aa1e:	4770      	bx	lr
 800aa20:	b510      	push	{r4, lr}
 800aa22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa2a:	4291      	cmp	r1, r2
 800aa2c:	d1f9      	bne.n	800aa22 <memcpy+0xe>
 800aa2e:	bd10      	pop	{r4, pc}

0800aa30 <memmove>:
 800aa30:	4288      	cmp	r0, r1
 800aa32:	b510      	push	{r4, lr}
 800aa34:	eb01 0402 	add.w	r4, r1, r2
 800aa38:	d902      	bls.n	800aa40 <memmove+0x10>
 800aa3a:	4284      	cmp	r4, r0
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	d807      	bhi.n	800aa50 <memmove+0x20>
 800aa40:	1e43      	subs	r3, r0, #1
 800aa42:	42a1      	cmp	r1, r4
 800aa44:	d008      	beq.n	800aa58 <memmove+0x28>
 800aa46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa4e:	e7f8      	b.n	800aa42 <memmove+0x12>
 800aa50:	4402      	add	r2, r0
 800aa52:	4601      	mov	r1, r0
 800aa54:	428a      	cmp	r2, r1
 800aa56:	d100      	bne.n	800aa5a <memmove+0x2a>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa62:	e7f7      	b.n	800aa54 <memmove+0x24>

0800aa64 <__malloc_lock>:
 800aa64:	4801      	ldr	r0, [pc, #4]	; (800aa6c <__malloc_lock+0x8>)
 800aa66:	f7ff b885 	b.w	8009b74 <__retarget_lock_acquire_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	200003fc 	.word	0x200003fc

0800aa70 <__malloc_unlock>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__malloc_unlock+0x8>)
 800aa72:	f7ff b880 	b.w	8009b76 <__retarget_lock_release_recursive>
 800aa76:	bf00      	nop
 800aa78:	200003fc 	.word	0x200003fc

0800aa7c <_free_r>:
 800aa7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d044      	beq.n	800ab0c <_free_r+0x90>
 800aa82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa86:	9001      	str	r0, [sp, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa8e:	bfb8      	it	lt
 800aa90:	18e4      	addlt	r4, r4, r3
 800aa92:	f7ff ffe7 	bl	800aa64 <__malloc_lock>
 800aa96:	4a1e      	ldr	r2, [pc, #120]	; (800ab10 <_free_r+0x94>)
 800aa98:	9801      	ldr	r0, [sp, #4]
 800aa9a:	6813      	ldr	r3, [r2, #0]
 800aa9c:	b933      	cbnz	r3, 800aaac <_free_r+0x30>
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	6014      	str	r4, [r2, #0]
 800aaa2:	b003      	add	sp, #12
 800aaa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaa8:	f7ff bfe2 	b.w	800aa70 <__malloc_unlock>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d908      	bls.n	800aac2 <_free_r+0x46>
 800aab0:	6825      	ldr	r5, [r4, #0]
 800aab2:	1961      	adds	r1, r4, r5
 800aab4:	428b      	cmp	r3, r1
 800aab6:	bf01      	itttt	eq
 800aab8:	6819      	ldreq	r1, [r3, #0]
 800aaba:	685b      	ldreq	r3, [r3, #4]
 800aabc:	1949      	addeq	r1, r1, r5
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	e7ed      	b.n	800aa9e <_free_r+0x22>
 800aac2:	461a      	mov	r2, r3
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	b10b      	cbz	r3, 800aacc <_free_r+0x50>
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	d9fa      	bls.n	800aac2 <_free_r+0x46>
 800aacc:	6811      	ldr	r1, [r2, #0]
 800aace:	1855      	adds	r5, r2, r1
 800aad0:	42a5      	cmp	r5, r4
 800aad2:	d10b      	bne.n	800aaec <_free_r+0x70>
 800aad4:	6824      	ldr	r4, [r4, #0]
 800aad6:	4421      	add	r1, r4
 800aad8:	1854      	adds	r4, r2, r1
 800aada:	42a3      	cmp	r3, r4
 800aadc:	6011      	str	r1, [r2, #0]
 800aade:	d1e0      	bne.n	800aaa2 <_free_r+0x26>
 800aae0:	681c      	ldr	r4, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	6053      	str	r3, [r2, #4]
 800aae6:	4421      	add	r1, r4
 800aae8:	6011      	str	r1, [r2, #0]
 800aaea:	e7da      	b.n	800aaa2 <_free_r+0x26>
 800aaec:	d902      	bls.n	800aaf4 <_free_r+0x78>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	e7d6      	b.n	800aaa2 <_free_r+0x26>
 800aaf4:	6825      	ldr	r5, [r4, #0]
 800aaf6:	1961      	adds	r1, r4, r5
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf04      	itt	eq
 800aafc:	6819      	ldreq	r1, [r3, #0]
 800aafe:	685b      	ldreq	r3, [r3, #4]
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	bf04      	itt	eq
 800ab04:	1949      	addeq	r1, r1, r5
 800ab06:	6021      	streq	r1, [r4, #0]
 800ab08:	6054      	str	r4, [r2, #4]
 800ab0a:	e7ca      	b.n	800aaa2 <_free_r+0x26>
 800ab0c:	b003      	add	sp, #12
 800ab0e:	bd30      	pop	{r4, r5, pc}
 800ab10:	20000400 	.word	0x20000400

0800ab14 <_realloc_r>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	460e      	mov	r6, r1
 800ab1e:	b921      	cbnz	r1, 800ab2a <_realloc_r+0x16>
 800ab20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	4611      	mov	r1, r2
 800ab26:	f7ff b847 	b.w	8009bb8 <_malloc_r>
 800ab2a:	b92a      	cbnz	r2, 800ab38 <_realloc_r+0x24>
 800ab2c:	f7ff ffa6 	bl	800aa7c <_free_r>
 800ab30:	4625      	mov	r5, r4
 800ab32:	4628      	mov	r0, r5
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	f000 f850 	bl	800abdc <_malloc_usable_size_r>
 800ab3c:	4284      	cmp	r4, r0
 800ab3e:	4607      	mov	r7, r0
 800ab40:	d802      	bhi.n	800ab48 <_realloc_r+0x34>
 800ab42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab46:	d812      	bhi.n	800ab6e <_realloc_r+0x5a>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f7ff f834 	bl	8009bb8 <_malloc_r>
 800ab50:	4605      	mov	r5, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0ed      	beq.n	800ab32 <_realloc_r+0x1e>
 800ab56:	42bc      	cmp	r4, r7
 800ab58:	4622      	mov	r2, r4
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	bf28      	it	cs
 800ab5e:	463a      	movcs	r2, r7
 800ab60:	f7ff ff58 	bl	800aa14 <memcpy>
 800ab64:	4631      	mov	r1, r6
 800ab66:	4640      	mov	r0, r8
 800ab68:	f7ff ff88 	bl	800aa7c <_free_r>
 800ab6c:	e7e1      	b.n	800ab32 <_realloc_r+0x1e>
 800ab6e:	4635      	mov	r5, r6
 800ab70:	e7df      	b.n	800ab32 <_realloc_r+0x1e>
	...

0800ab74 <_read_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d07      	ldr	r5, [pc, #28]	; (800ab94 <_read_r+0x20>)
 800ab78:	4604      	mov	r4, r0
 800ab7a:	4608      	mov	r0, r1
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	602a      	str	r2, [r5, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	f7f6 f8ae 	bl	8000ce4 <_read>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_read_r+0x1e>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_read_r+0x1e>
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	20000408 	.word	0x20000408

0800ab98 <_fstat_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d07      	ldr	r5, [pc, #28]	; (800abb8 <_fstat_r+0x20>)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	4611      	mov	r1, r2
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	f7f6 f8e2 	bl	8000d6e <_fstat>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d102      	bne.n	800abb4 <_fstat_r+0x1c>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	b103      	cbz	r3, 800abb4 <_fstat_r+0x1c>
 800abb2:	6023      	str	r3, [r4, #0]
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	20000408 	.word	0x20000408

0800abbc <_isatty_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d06      	ldr	r5, [pc, #24]	; (800abd8 <_isatty_r+0x1c>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f7f6 f8e1 	bl	8000d8e <_isatty>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_isatty_r+0x1a>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_isatty_r+0x1a>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	20000408 	.word	0x20000408

0800abdc <_malloc_usable_size_r>:
 800abdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe0:	1f18      	subs	r0, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bfbc      	itt	lt
 800abe6:	580b      	ldrlt	r3, [r1, r0]
 800abe8:	18c0      	addlt	r0, r0, r3
 800abea:	4770      	bx	lr

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
